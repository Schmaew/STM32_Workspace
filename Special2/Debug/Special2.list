
Special2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004960  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004b60  08004b60  00005b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c38  08004c38  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c38  08004c38  00005c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c40  08004c40  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c40  08004c40  00005c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c44  08004c44  00005c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004c48  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  2000005c  08004ca4  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08004ca4  000063bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbd2  00000000  00000000  0000608a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d96  00000000  00000000  00011c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  000139f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006f0  00000000  00000000  00014308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027849  00000000  00000000  000149f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb12  00000000  00000000  0003c241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f68d3  00000000  00000000  00048d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f626  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000291c  00000000  00000000  0013f66c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00141f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	08004b48 	.word	0x08004b48

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	08004b48 	.word	0x08004b48

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005e2:	b089      	sub	sp, #36	@ 0x24
 80005e4:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005e6:	f000 fa3f 	bl	8000a68 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f000 fc46 	bl	8000e7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f84d 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 f9bb 	bl	800096c <MX_GPIO_Init>
  MX_DMA_Init();
 80005f6:	f000 f99b 	bl	8000930 <MX_DMA_Init>
  MX_ADC1_Init();
 80005fa:	f000 f8b5 	bl	8000768 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80005fe:	f000 f967 	bl	80008d0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adc_val, 8);
 8000602:	2208      	movs	r2, #8
 8000604:	491c      	ldr	r1, [pc, #112]	@ (8000678 <main+0x98>)
 8000606:	481d      	ldr	r0, [pc, #116]	@ (800067c <main+0x9c>)
 8000608:	f000 fcfc 	bl	8001004 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	sprintf(buffer, "\r\nVR_1_1 : %u VR_1_2 : %u VR_1_3 : %u VR_1_4 : %u \r\nVR_2_1 : %u VR_2_2 : %u VR_2_3 : %u VR_2_4 : %u \r\n---------------------------\r\n", adc_val[0], adc_val[1], adc_val[2], adc_val[3], adc_val[4], adc_val[5], adc_val[6], adc_val[7]);
 800060c:	4b1a      	ldr	r3, [pc, #104]	@ (8000678 <main+0x98>)
 800060e:	681e      	ldr	r6, [r3, #0]
 8000610:	4b19      	ldr	r3, [pc, #100]	@ (8000678 <main+0x98>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <main+0x98>)
 8000618:	689b      	ldr	r3, [r3, #8]
 800061a:	4a17      	ldr	r2, [pc, #92]	@ (8000678 <main+0x98>)
 800061c:	68d2      	ldr	r2, [r2, #12]
 800061e:	4916      	ldr	r1, [pc, #88]	@ (8000678 <main+0x98>)
 8000620:	6909      	ldr	r1, [r1, #16]
 8000622:	4815      	ldr	r0, [pc, #84]	@ (8000678 <main+0x98>)
 8000624:	6940      	ldr	r0, [r0, #20]
 8000626:	4c14      	ldr	r4, [pc, #80]	@ (8000678 <main+0x98>)
 8000628:	69a4      	ldr	r4, [r4, #24]
 800062a:	4d13      	ldr	r5, [pc, #76]	@ (8000678 <main+0x98>)
 800062c:	69ed      	ldr	r5, [r5, #28]
 800062e:	9505      	str	r5, [sp, #20]
 8000630:	9404      	str	r4, [sp, #16]
 8000632:	9003      	str	r0, [sp, #12]
 8000634:	9102      	str	r1, [sp, #8]
 8000636:	9201      	str	r2, [sp, #4]
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4632      	mov	r2, r6
 800063e:	4910      	ldr	r1, [pc, #64]	@ (8000680 <main+0xa0>)
 8000640:	4810      	ldr	r0, [pc, #64]	@ (8000684 <main+0xa4>)
 8000642:	f003 fde1 	bl	8004208 <siprintf>
	while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET) {}
 8000646:	bf00      	nop
 8000648:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <main+0xa8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000652:	2b40      	cmp	r3, #64	@ 0x40
 8000654:	d1f8      	bne.n	8000648 <main+0x68>
	HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000656:	480b      	ldr	r0, [pc, #44]	@ (8000684 <main+0xa4>)
 8000658:	f7ff fdf2 	bl	8000240 <strlen>
 800065c:	4603      	mov	r3, r0
 800065e:	b29a      	uxth	r2, r3
 8000660:	f04f 33ff 	mov.w	r3, #4294967295
 8000664:	4907      	ldr	r1, [pc, #28]	@ (8000684 <main+0xa4>)
 8000666:	4808      	ldr	r0, [pc, #32]	@ (8000688 <main+0xa8>)
 8000668:	f003 f8c4 	bl	80037f4 <HAL_UART_Transmit>
	HAL_Delay(2000);
 800066c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000670:	f000 fc60 	bl	8000f34 <HAL_Delay>
	sprintf(buffer, "\r\nVR_1_1 : %u VR_1_2 : %u VR_1_3 : %u VR_1_4 : %u \r\nVR_2_1 : %u VR_2_2 : %u VR_2_3 : %u VR_2_4 : %u \r\n---------------------------\r\n", adc_val[0], adc_val[1], adc_val[2], adc_val[3], adc_val[4], adc_val[5], adc_val[6], adc_val[7]);
 8000674:	e7ca      	b.n	800060c <main+0x2c>
 8000676:	bf00      	nop
 8000678:	200001a8 	.word	0x200001a8
 800067c:	20000078 	.word	0x20000078
 8000680:	08004b60 	.word	0x08004b60
 8000684:	200001c8 	.word	0x200001c8
 8000688:	20000120 	.word	0x20000120

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	@ 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	2234      	movs	r2, #52	@ 0x34
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f003 fdd4 	bl	8004248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000760 <SystemClock_Config+0xd4>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	4a2a      	ldr	r2, [pc, #168]	@ (8000760 <SystemClock_Config+0xd4>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80006bc:	4b28      	ldr	r3, [pc, #160]	@ (8000760 <SystemClock_Config+0xd4>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	4b26      	ldr	r3, [pc, #152]	@ (8000764 <SystemClock_Config+0xd8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a25      	ldr	r2, [pc, #148]	@ (8000764 <SystemClock_Config+0xd8>)
 80006ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b23      	ldr	r3, [pc, #140]	@ (8000764 <SystemClock_Config+0xd8>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	2302      	movs	r3, #2
 80006e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e8:	2310      	movs	r3, #16
 80006ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	2302      	movs	r3, #2
 80006ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f0:	2300      	movs	r3, #0
 80006f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f4:	2308      	movs	r3, #8
 80006f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006f8:	23d8      	movs	r3, #216	@ 0xd8
 80006fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000700:	2302      	movs	r3, #2
 8000702:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000704:	2302      	movs	r3, #2
 8000706:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4618      	mov	r0, r3
 800070e:	f001 ff67 	bl	80025e0 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000718:	f000 f9d2 	bl	8000ac0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800071c:	f001 ff10 	bl	8002540 <HAL_PWREx_EnableOverDrive>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000726:	f000 f9cb 	bl	8000ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2302      	movs	r3, #2
 8000730:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000736:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000740:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2107      	movs	r1, #7
 8000748:	4618      	mov	r0, r3
 800074a:	f002 f9f7 	bl	8002b3c <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000754:	f000 f9b4 	bl	8000ac0 <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	@ 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800077a:	4b52      	ldr	r3, [pc, #328]	@ (80008c4 <MX_ADC1_Init+0x15c>)
 800077c:	4a52      	ldr	r2, [pc, #328]	@ (80008c8 <MX_ADC1_Init+0x160>)
 800077e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000780:	4b50      	ldr	r3, [pc, #320]	@ (80008c4 <MX_ADC1_Init+0x15c>)
 8000782:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000786:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000788:	4b4e      	ldr	r3, [pc, #312]	@ (80008c4 <MX_ADC1_Init+0x15c>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800078e:	4b4d      	ldr	r3, [pc, #308]	@ (80008c4 <MX_ADC1_Init+0x15c>)
 8000790:	2201      	movs	r2, #1
 8000792:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000794:	4b4b      	ldr	r3, [pc, #300]	@ (80008c4 <MX_ADC1_Init+0x15c>)
 8000796:	2201      	movs	r2, #1
 8000798:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800079a:	4b4a      	ldr	r3, [pc, #296]	@ (80008c4 <MX_ADC1_Init+0x15c>)
 800079c:	2200      	movs	r2, #0
 800079e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b48      	ldr	r3, [pc, #288]	@ (80008c4 <MX_ADC1_Init+0x15c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a8:	4b46      	ldr	r3, [pc, #280]	@ (80008c4 <MX_ADC1_Init+0x15c>)
 80007aa:	4a48      	ldr	r2, [pc, #288]	@ (80008cc <MX_ADC1_Init+0x164>)
 80007ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ae:	4b45      	ldr	r3, [pc, #276]	@ (80008c4 <MX_ADC1_Init+0x15c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80007b4:	4b43      	ldr	r3, [pc, #268]	@ (80008c4 <MX_ADC1_Init+0x15c>)
 80007b6:	2208      	movs	r2, #8
 80007b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007ba:	4b42      	ldr	r3, [pc, #264]	@ (80008c4 <MX_ADC1_Init+0x15c>)
 80007bc:	2201      	movs	r2, #1
 80007be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c2:	4b40      	ldr	r3, [pc, #256]	@ (80008c4 <MX_ADC1_Init+0x15c>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c8:	483e      	ldr	r0, [pc, #248]	@ (80008c4 <MX_ADC1_Init+0x15c>)
 80007ca:	f000 fbd7 	bl	8000f7c <HAL_ADC_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007d4:	f000 f974 	bl	8000ac0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007d8:	2303      	movs	r3, #3
 80007da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007dc:	2301      	movs	r3, #1
 80007de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80007e0:	2301      	movs	r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e4:	463b      	mov	r3, r7
 80007e6:	4619      	mov	r1, r3
 80007e8:	4836      	ldr	r0, [pc, #216]	@ (80008c4 <MX_ADC1_Init+0x15c>)
 80007ea:	f000 fd0f 	bl	800120c <HAL_ADC_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007f4:	f000 f964 	bl	8000ac0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007f8:	2304      	movs	r3, #4
 80007fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000800:	463b      	mov	r3, r7
 8000802:	4619      	mov	r1, r3
 8000804:	482f      	ldr	r0, [pc, #188]	@ (80008c4 <MX_ADC1_Init+0x15c>)
 8000806:	f000 fd01 	bl	800120c <HAL_ADC_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000810:	f000 f956 	bl	8000ac0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000814:	2305      	movs	r3, #5
 8000816:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000818:	2303      	movs	r3, #3
 800081a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	4828      	ldr	r0, [pc, #160]	@ (80008c4 <MX_ADC1_Init+0x15c>)
 8000822:	f000 fcf3 	bl	800120c <HAL_ADC_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800082c:	f000 f948 	bl	8000ac0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000830:	2306      	movs	r3, #6
 8000832:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000834:	2304      	movs	r3, #4
 8000836:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000838:	463b      	mov	r3, r7
 800083a:	4619      	mov	r1, r3
 800083c:	4821      	ldr	r0, [pc, #132]	@ (80008c4 <MX_ADC1_Init+0x15c>)
 800083e:	f000 fce5 	bl	800120c <HAL_ADC_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000848:	f000 f93a 	bl	8000ac0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800084c:	2309      	movs	r3, #9
 800084e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000850:	2305      	movs	r3, #5
 8000852:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000854:	463b      	mov	r3, r7
 8000856:	4619      	mov	r1, r3
 8000858:	481a      	ldr	r0, [pc, #104]	@ (80008c4 <MX_ADC1_Init+0x15c>)
 800085a:	f000 fcd7 	bl	800120c <HAL_ADC_ConfigChannel>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000864:	f000 f92c 	bl	8000ac0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000868:	230a      	movs	r3, #10
 800086a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800086c:	2306      	movs	r3, #6
 800086e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000870:	463b      	mov	r3, r7
 8000872:	4619      	mov	r1, r3
 8000874:	4813      	ldr	r0, [pc, #76]	@ (80008c4 <MX_ADC1_Init+0x15c>)
 8000876:	f000 fcc9 	bl	800120c <HAL_ADC_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000880:	f000 f91e 	bl	8000ac0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000884:	230c      	movs	r3, #12
 8000886:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000888:	2307      	movs	r3, #7
 800088a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088c:	463b      	mov	r3, r7
 800088e:	4619      	mov	r1, r3
 8000890:	480c      	ldr	r0, [pc, #48]	@ (80008c4 <MX_ADC1_Init+0x15c>)
 8000892:	f000 fcbb 	bl	800120c <HAL_ADC_ConfigChannel>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800089c:	f000 f910 	bl	8000ac0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80008a0:	230d      	movs	r3, #13
 80008a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80008a4:	2308      	movs	r3, #8
 80008a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a8:	463b      	mov	r3, r7
 80008aa:	4619      	mov	r1, r3
 80008ac:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <MX_ADC1_Init+0x15c>)
 80008ae:	f000 fcad 	bl	800120c <HAL_ADC_ConfigChannel>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80008b8:	f000 f902 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000078 	.word	0x20000078
 80008c8:	40012000 	.word	0x40012000
 80008cc:	0f000001 	.word	0x0f000001

080008d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d4:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <MX_USART3_UART_Init+0x58>)
 80008d6:	4a15      	ldr	r2, [pc, #84]	@ (800092c <MX_USART3_UART_Init+0x5c>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008da:	4b13      	ldr	r3, [pc, #76]	@ (8000928 <MX_USART3_UART_Init+0x58>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <MX_USART3_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000928 <MX_USART3_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <MX_USART3_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <MX_USART3_UART_Init+0x58>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <MX_USART3_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <MX_USART3_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <MX_USART3_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <MX_USART3_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	@ (8000928 <MX_USART3_UART_Init+0x58>)
 8000914:	f002 ff20 	bl	8003758 <HAL_UART_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800091e:	f000 f8cf 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000120 	.word	0x20000120
 800092c:	40004800 	.word	0x40004800

08000930 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <MX_DMA_Init+0x38>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a0b      	ldr	r2, [pc, #44]	@ (8000968 <MX_DMA_Init+0x38>)
 800093c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <MX_DMA_Init+0x38>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2101      	movs	r1, #1
 8000952:	2038      	movs	r0, #56	@ 0x38
 8000954:	f001 f807 	bl	8001966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000958:	2038      	movs	r0, #56	@ 0x38
 800095a:	f001 f820 	bl	800199e <HAL_NVIC_EnableIRQ>

}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	@ 0x28
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	4b23      	ldr	r3, [pc, #140]	@ (8000a10 <MX_GPIO_Init+0xa4>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a22      	ldr	r2, [pc, #136]	@ (8000a10 <MX_GPIO_Init+0xa4>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <MX_GPIO_Init+0xa4>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <MX_GPIO_Init+0xa4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a10 <MX_GPIO_Init+0xa4>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <MX_GPIO_Init+0xa4>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	4b17      	ldr	r3, [pc, #92]	@ (8000a10 <MX_GPIO_Init+0xa4>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a16      	ldr	r2, [pc, #88]	@ (8000a10 <MX_GPIO_Init+0xa4>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <MX_GPIO_Init+0xa4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_GPIO_Init+0xa4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a10      	ldr	r2, [pc, #64]	@ (8000a10 <MX_GPIO_Init+0xa4>)
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <MX_GPIO_Init+0xa4>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2180      	movs	r1, #128	@ 0x80
 80009e6:	480b      	ldr	r0, [pc, #44]	@ (8000a14 <MX_GPIO_Init+0xa8>)
 80009e8:	f001 fd90 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009ec:	2380      	movs	r3, #128	@ 0x80
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f8:	2302      	movs	r3, #2
 80009fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <MX_GPIO_Init+0xa8>)
 8000a04:	f001 fbd6 	bl	80021b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a08:	bf00      	nop
 8000a0a:	3728      	adds	r7, #40	@ 0x28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020400 	.word	0x40020400

08000a18 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2180      	movs	r1, #128	@ 0x80
 8000a24:	4804      	ldr	r0, [pc, #16]	@ (8000a38 <HAL_ADC_ConvCpltCallback+0x20>)
 8000a26:	f001 fd71 	bl	800250c <HAL_GPIO_WritePin>
//	while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET) {}
//	HAL_UART_Transmit(&huart3, (uint8_t *)"-", 1, HAL_MAX_DELAY);
	s = false;
 8000a2a:	4b04      	ldr	r3, [pc, #16]	@ (8000a3c <HAL_ADC_ConvCpltCallback+0x24>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40020400 	.word	0x40020400
 8000a3c:	20000268 	.word	0x20000268

08000a40 <HAL_ADC_ConvHalfCpltCallback>:


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2180      	movs	r1, #128	@ 0x80
 8000a4c:	4804      	ldr	r0, [pc, #16]	@ (8000a60 <HAL_ADC_ConvHalfCpltCallback+0x20>)
 8000a4e:	f001 fd5d 	bl	800250c <HAL_GPIO_WritePin>
//	while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET) {}
//	HAL_UART_Transmit(&huart3, (uint8_t *)"|", 1, HAL_MAX_DELAY);
	s = true;
 8000a52:	4b04      	ldr	r3, [pc, #16]	@ (8000a64 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	701a      	strb	r2, [r3, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40020400 	.word	0x40020400
 8000a64:	20000268 	.word	0x20000268

08000a68 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a6e:	463b      	mov	r3, r7
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a7a:	f000 ffab 	bl	80019d4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a8a:	231f      	movs	r3, #31
 8000a8c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a8e:	2387      	movs	r3, #135	@ 0x87
 8000a90:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a96:	2300      	movs	r3, #0
 8000a98:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 ffc9 	bl	8001a44 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ab2:	2004      	movs	r0, #4
 8000ab4:	f000 ffa6 	bl	8001a04 <HAL_MPU_Enable>

}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <Error_Handler+0x8>

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <HAL_MspInit+0x44>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b10 <HAL_MspInit+0x44>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ade:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <HAL_MspInit+0x44>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	4b09      	ldr	r3, [pc, #36]	@ (8000b10 <HAL_MspInit+0x44>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aee:	4a08      	ldr	r2, [pc, #32]	@ (8000b10 <HAL_MspInit+0x44>)
 8000af0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000af6:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <HAL_MspInit+0x44>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800

08000b14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	@ 0x30
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a45      	ldr	r2, [pc, #276]	@ (8000c48 <HAL_ADC_MspInit+0x134>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	f040 8084 	bne.w	8000c40 <HAL_ADC_MspInit+0x12c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b38:	4b44      	ldr	r3, [pc, #272]	@ (8000c4c <HAL_ADC_MspInit+0x138>)
 8000b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3c:	4a43      	ldr	r2, [pc, #268]	@ (8000c4c <HAL_ADC_MspInit+0x138>)
 8000b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b42:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b44:	4b41      	ldr	r3, [pc, #260]	@ (8000c4c <HAL_ADC_MspInit+0x138>)
 8000b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b4c:	61bb      	str	r3, [r7, #24]
 8000b4e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b50:	4b3e      	ldr	r3, [pc, #248]	@ (8000c4c <HAL_ADC_MspInit+0x138>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b54:	4a3d      	ldr	r2, [pc, #244]	@ (8000c4c <HAL_ADC_MspInit+0x138>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8000c4c <HAL_ADC_MspInit+0x138>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b38      	ldr	r3, [pc, #224]	@ (8000c4c <HAL_ADC_MspInit+0x138>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6c:	4a37      	ldr	r2, [pc, #220]	@ (8000c4c <HAL_ADC_MspInit+0x138>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b74:	4b35      	ldr	r3, [pc, #212]	@ (8000c4c <HAL_ADC_MspInit+0x138>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b80:	4b32      	ldr	r3, [pc, #200]	@ (8000c4c <HAL_ADC_MspInit+0x138>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b84:	4a31      	ldr	r2, [pc, #196]	@ (8000c4c <HAL_ADC_MspInit+0x138>)
 8000b86:	f043 0302 	orr.w	r3, r3, #2
 8000b8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c4c <HAL_ADC_MspInit+0x138>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000b98:	230d      	movs	r3, #13
 8000b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4829      	ldr	r0, [pc, #164]	@ (8000c50 <HAL_ADC_MspInit+0x13c>)
 8000bac:	f001 fb02 	bl	80021b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000bb0:	2378      	movs	r3, #120	@ 0x78
 8000bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4824      	ldr	r0, [pc, #144]	@ (8000c54 <HAL_ADC_MspInit+0x140>)
 8000bc4:	f001 faf6 	bl	80021b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	4619      	mov	r1, r3
 8000bda:	481f      	ldr	r0, [pc, #124]	@ (8000c58 <HAL_ADC_MspInit+0x144>)
 8000bdc:	f001 faea 	bl	80021b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000be0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c5c <HAL_ADC_MspInit+0x148>)
 8000be2:	4a1f      	ldr	r2, [pc, #124]	@ (8000c60 <HAL_ADC_MspInit+0x14c>)
 8000be4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000be6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <HAL_ADC_MspInit+0x148>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	@ (8000c5c <HAL_ADC_MspInit+0x148>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <HAL_ADC_MspInit+0x148>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bf8:	4b18      	ldr	r3, [pc, #96]	@ (8000c5c <HAL_ADC_MspInit+0x148>)
 8000bfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bfe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c00:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <HAL_ADC_MspInit+0x148>)
 8000c02:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c06:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <HAL_ADC_MspInit+0x148>)
 8000c0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c0e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c10:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <HAL_ADC_MspInit+0x148>)
 8000c12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c16:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c18:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <HAL_ADC_MspInit+0x148>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <HAL_ADC_MspInit+0x148>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c24:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <HAL_ADC_MspInit+0x148>)
 8000c26:	f000 ff4d 	bl	8001ac4 <HAL_DMA_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 8000c30:	f7ff ff46 	bl	8000ac0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a09      	ldr	r2, [pc, #36]	@ (8000c5c <HAL_ADC_MspInit+0x148>)
 8000c38:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c3a:	4a08      	ldr	r2, [pc, #32]	@ (8000c5c <HAL_ADC_MspInit+0x148>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c40:	bf00      	nop
 8000c42:	3730      	adds	r7, #48	@ 0x30
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40012000 	.word	0x40012000
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020800 	.word	0x40020800
 8000c54:	40020000 	.word	0x40020000
 8000c58:	40020400 	.word	0x40020400
 8000c5c:	200000c0 	.word	0x200000c0
 8000c60:	40026410 	.word	0x40026410

08000c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b0ae      	sub	sp, #184	@ 0xb8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2290      	movs	r2, #144	@ 0x90
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f003 fadf 	bl	8004248 <memset>
  if(huart->Instance==USART3)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a22      	ldr	r2, [pc, #136]	@ (8000d18 <HAL_UART_MspInit+0xb4>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d13c      	bne.n	8000d0e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c98:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f002 f930 	bl	8002f08 <HAL_RCCEx_PeriphCLKConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cae:	f7ff ff07 	bl	8000ac0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <HAL_UART_MspInit+0xb8>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	4a19      	ldr	r2, [pc, #100]	@ (8000d1c <HAL_UART_MspInit+0xb8>)
 8000cb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cbe:	4b17      	ldr	r3, [pc, #92]	@ (8000d1c <HAL_UART_MspInit+0xb8>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cca:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <HAL_UART_MspInit+0xb8>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a13      	ldr	r2, [pc, #76]	@ (8000d1c <HAL_UART_MspInit+0xb8>)
 8000cd0:	f043 0308 	orr.w	r3, r3, #8
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <HAL_UART_MspInit+0xb8>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0308 	and.w	r3, r3, #8
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ce2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ce6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d02:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d06:	4619      	mov	r1, r3
 8000d08:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <HAL_UART_MspInit+0xbc>)
 8000d0a:	f001 fa53 	bl	80021b4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000d0e:	bf00      	nop
 8000d10:	37b8      	adds	r7, #184	@ 0xb8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40004800 	.word	0x40004800
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020c00 	.word	0x40020c00

08000d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <NMI_Handler+0x4>

08000d2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7a:	f000 f8bb 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d88:	4802      	ldr	r0, [pc, #8]	@ (8000d94 <DMA2_Stream0_IRQHandler+0x10>)
 8000d8a:	f000 ffa9 	bl	8001ce0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200000c0 	.word	0x200000c0

08000d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da0:	4a14      	ldr	r2, [pc, #80]	@ (8000df4 <_sbrk+0x5c>)
 8000da2:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <_sbrk+0x60>)
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dac:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d102      	bne.n	8000dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db4:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <_sbrk+0x64>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	@ (8000e00 <_sbrk+0x68>)
 8000db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dba:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d207      	bcs.n	8000dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc8:	f003 fa46 	bl	8004258 <__errno>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	220c      	movs	r2, #12
 8000dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd6:	e009      	b.n	8000dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dde:	4b07      	ldr	r3, [pc, #28]	@ (8000dfc <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <_sbrk+0x64>)
 8000de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20080000 	.word	0x20080000
 8000df8:	00000400 	.word	0x00000400
 8000dfc:	2000026c 	.word	0x2000026c
 8000e00:	200003c0 	.word	0x200003c0

08000e04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <SystemInit+0x20>)
 8000e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e0e:	4a05      	ldr	r2, [pc, #20]	@ (8000e24 <SystemInit+0x20>)
 8000e10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e2c:	f7ff ffea 	bl	8000e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	@ (8000e64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	@ (8000e68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	@ (8000e74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e56:	f003 fa05 	bl	8004264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5a:	f7ff fbc1 	bl	80005e0 <main>
  bx  lr    
 8000e5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e60:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e6c:	08004c48 	.word	0x08004c48
  ldr r2, =_sbss
 8000e70:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e74:	200003bc 	.word	0x200003bc

08000e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC_IRQHandler>

08000e7a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7e:	2003      	movs	r0, #3
 8000e80:	f000 fd66 	bl	8001950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e84:	2000      	movs	r0, #0
 8000e86:	f000 f805 	bl	8000e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8a:	f7ff fe1f 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <HAL_InitTick+0x54>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <HAL_InitTick+0x58>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fd81 	bl	80019ba <HAL_SYSTICK_Config>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00e      	b.n	8000ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d80a      	bhi.n	8000ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f000 fd49 	bl	8001966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed4:	4a06      	ldr	r2, [pc, #24]	@ (8000ef0 <HAL_InitTick+0x5c>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e000      	b.n	8000ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <HAL_IncTick+0x20>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <HAL_IncTick+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a04      	ldr	r2, [pc, #16]	@ (8000f18 <HAL_IncTick+0x24>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008
 8000f18:	20000270 	.word	0x20000270

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b03      	ldr	r3, [pc, #12]	@ (8000f30 <HAL_GetTick+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000270 	.word	0x20000270

08000f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f3c:	f7ff ffee 	bl	8000f1c <HAL_GetTick>
 8000f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f4c:	d005      	beq.n	8000f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <HAL_Delay+0x44>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f5a:	bf00      	nop
 8000f5c:	f7ff ffde 	bl	8000f1c <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d8f7      	bhi.n	8000f5c <HAL_Delay+0x28>
  {
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000008 	.word	0x20000008

08000f7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f84:	2300      	movs	r3, #0
 8000f86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e031      	b.n	8000ff6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d109      	bne.n	8000fae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff fdba 	bl	8000b14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	f003 0310 	and.w	r3, r3, #16
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d116      	bne.n	8000fe8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fbe:	4b10      	ldr	r3, [pc, #64]	@ (8001000 <HAL_ADC_Init+0x84>)
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	f043 0202 	orr.w	r2, r3, #2
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 fa74 	bl	80014b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fda:	f023 0303 	bic.w	r3, r3, #3
 8000fde:	f043 0201 	orr.w	r2, r3, #1
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fe6:	e001      	b.n	8000fec <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	ffffeefd 	.word	0xffffeefd

08001004 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800101a:	2b01      	cmp	r3, #1
 800101c:	d101      	bne.n	8001022 <HAL_ADC_Start_DMA+0x1e>
 800101e:	2302      	movs	r3, #2
 8001020:	e0d4      	b.n	80011cc <HAL_ADC_Start_DMA+0x1c8>
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2201      	movs	r2, #1
 8001026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	2b01      	cmp	r3, #1
 8001036:	d018      	beq.n	800106a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f042 0201 	orr.w	r2, r2, #1
 8001046:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001048:	4b62      	ldr	r3, [pc, #392]	@ (80011d4 <HAL_ADC_Start_DMA+0x1d0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a62      	ldr	r2, [pc, #392]	@ (80011d8 <HAL_ADC_Start_DMA+0x1d4>)
 800104e:	fba2 2303 	umull	r2, r3, r2, r3
 8001052:	0c9a      	lsrs	r2, r3, #18
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800105c:	e002      	b.n	8001064 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3b01      	subs	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f9      	bne.n	800105e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b01      	cmp	r3, #1
 8001076:	f040 809c 	bne.w	80011b2 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800107e:	4b57      	ldr	r3, [pc, #348]	@ (80011dc <HAL_ADC_Start_DMA+0x1d8>)
 8001080:	4013      	ands	r3, r2
 8001082:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001094:	2b00      	cmp	r3, #0
 8001096:	d007      	beq.n	80010a8 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010b4:	d106      	bne.n	80010c4 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ba:	f023 0206 	bic.w	r2, r3, #6
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	645a      	str	r2, [r3, #68]	@ 0x44
 80010c2:	e002      	b.n	80010ca <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2200      	movs	r2, #0
 80010c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010d6:	4a42      	ldr	r2, [pc, #264]	@ (80011e0 <HAL_ADC_Start_DMA+0x1dc>)
 80010d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010de:	4a41      	ldr	r2, [pc, #260]	@ (80011e4 <HAL_ADC_Start_DMA+0x1e0>)
 80010e0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010e6:	4a40      	ldr	r2, [pc, #256]	@ (80011e8 <HAL_ADC_Start_DMA+0x1e4>)
 80010e8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80010f2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001102:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001112:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	334c      	adds	r3, #76	@ 0x4c
 800111e:	4619      	mov	r1, r3
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f000 fd7c 	bl	8001c20 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001128:	4b30      	ldr	r3, [pc, #192]	@ (80011ec <HAL_ADC_Start_DMA+0x1e8>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 031f 	and.w	r3, r3, #31
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10f      	bne.n	8001154 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d143      	bne.n	80011ca <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	e03a      	b.n	80011ca <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a25      	ldr	r2, [pc, #148]	@ (80011f0 <HAL_ADC_Start_DMA+0x1ec>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d10e      	bne.n	800117c <HAL_ADC_Start_DMA+0x178>
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d107      	bne.n	800117c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800117a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800117c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ec <HAL_ADC_Start_DMA+0x1e8>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0310 	and.w	r3, r3, #16
 8001184:	2b00      	cmp	r3, #0
 8001186:	d120      	bne.n	80011ca <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a19      	ldr	r2, [pc, #100]	@ (80011f4 <HAL_ADC_Start_DMA+0x1f0>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d11b      	bne.n	80011ca <HAL_ADC_Start_DMA+0x1c6>
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d114      	bne.n	80011ca <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	e00b      	b.n	80011ca <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	f043 0210 	orr.w	r2, r3, #16
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c2:	f043 0201 	orr.w	r2, r3, #1
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000000 	.word	0x20000000
 80011d8:	431bde83 	.word	0x431bde83
 80011dc:	fffff8fe 	.word	0xfffff8fe
 80011e0:	080016ad 	.word	0x080016ad
 80011e4:	08001767 	.word	0x08001767
 80011e8:	08001783 	.word	0x08001783
 80011ec:	40012300 	.word	0x40012300
 80011f0:	40012000 	.word	0x40012000
 80011f4:	40012200 	.word	0x40012200

080011f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001220:	2b01      	cmp	r3, #1
 8001222:	d101      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x1c>
 8001224:	2302      	movs	r3, #2
 8001226:	e136      	b.n	8001496 <HAL_ADC_ConfigChannel+0x28a>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b09      	cmp	r3, #9
 8001236:	d93a      	bls.n	80012ae <HAL_ADC_ConfigChannel+0xa2>
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001240:	d035      	beq.n	80012ae <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68d9      	ldr	r1, [r3, #12]
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	b29b      	uxth	r3, r3
 800124e:	461a      	mov	r2, r3
 8001250:	4613      	mov	r3, r2
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	4413      	add	r3, r2
 8001256:	3b1e      	subs	r3, #30
 8001258:	2207      	movs	r2, #7
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43da      	mvns	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	400a      	ands	r2, r1
 8001266:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a8d      	ldr	r2, [pc, #564]	@ (80014a4 <HAL_ADC_ConfigChannel+0x298>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d10a      	bne.n	8001288 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68d9      	ldr	r1, [r3, #12]
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	061a      	lsls	r2, r3, #24
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	430a      	orrs	r2, r1
 8001284:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001286:	e035      	b.n	80012f4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	68d9      	ldr	r1, [r3, #12]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	b29b      	uxth	r3, r3
 8001298:	4618      	mov	r0, r3
 800129a:	4603      	mov	r3, r0
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4403      	add	r3, r0
 80012a0:	3b1e      	subs	r3, #30
 80012a2:	409a      	lsls	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	430a      	orrs	r2, r1
 80012aa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012ac:	e022      	b.n	80012f4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6919      	ldr	r1, [r3, #16]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	461a      	mov	r2, r3
 80012bc:	4613      	mov	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4413      	add	r3, r2
 80012c2:	2207      	movs	r2, #7
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43da      	mvns	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	400a      	ands	r2, r1
 80012d0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6919      	ldr	r1, [r3, #16]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	4603      	mov	r3, r0
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4403      	add	r3, r0
 80012ea:	409a      	lsls	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b06      	cmp	r3, #6
 80012fa:	d824      	bhi.n	8001346 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	3b05      	subs	r3, #5
 800130e:	221f      	movs	r2, #31
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43da      	mvns	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	400a      	ands	r2, r1
 800131c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	b29b      	uxth	r3, r3
 800132a:	4618      	mov	r0, r3
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	3b05      	subs	r3, #5
 8001338:	fa00 f203 	lsl.w	r2, r0, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	430a      	orrs	r2, r1
 8001342:	635a      	str	r2, [r3, #52]	@ 0x34
 8001344:	e04c      	b.n	80013e0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b0c      	cmp	r3, #12
 800134c:	d824      	bhi.n	8001398 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	3b23      	subs	r3, #35	@ 0x23
 8001360:	221f      	movs	r2, #31
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43da      	mvns	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	400a      	ands	r2, r1
 800136e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	b29b      	uxth	r3, r3
 800137c:	4618      	mov	r0, r3
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	3b23      	subs	r3, #35	@ 0x23
 800138a:	fa00 f203 	lsl.w	r2, r0, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	631a      	str	r2, [r3, #48]	@ 0x30
 8001396:	e023      	b.n	80013e0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	3b41      	subs	r3, #65	@ 0x41
 80013aa:	221f      	movs	r2, #31
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43da      	mvns	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	400a      	ands	r2, r1
 80013b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	3b41      	subs	r3, #65	@ 0x41
 80013d4:	fa00 f203 	lsl.w	r2, r0, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a30      	ldr	r2, [pc, #192]	@ (80014a8 <HAL_ADC_ConfigChannel+0x29c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d10a      	bne.n	8001400 <HAL_ADC_ConfigChannel+0x1f4>
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80013f2:	d105      	bne.n	8001400 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80013f4:	4b2d      	ldr	r3, [pc, #180]	@ (80014ac <HAL_ADC_ConfigChannel+0x2a0>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4a2c      	ldr	r2, [pc, #176]	@ (80014ac <HAL_ADC_ConfigChannel+0x2a0>)
 80013fa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80013fe:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a28      	ldr	r2, [pc, #160]	@ (80014a8 <HAL_ADC_ConfigChannel+0x29c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d10f      	bne.n	800142a <HAL_ADC_ConfigChannel+0x21e>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b12      	cmp	r3, #18
 8001410:	d10b      	bne.n	800142a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001412:	4b26      	ldr	r3, [pc, #152]	@ (80014ac <HAL_ADC_ConfigChannel+0x2a0>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4a25      	ldr	r2, [pc, #148]	@ (80014ac <HAL_ADC_ConfigChannel+0x2a0>)
 8001418:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800141c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800141e:	4b23      	ldr	r3, [pc, #140]	@ (80014ac <HAL_ADC_ConfigChannel+0x2a0>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4a22      	ldr	r2, [pc, #136]	@ (80014ac <HAL_ADC_ConfigChannel+0x2a0>)
 8001424:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001428:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a1e      	ldr	r2, [pc, #120]	@ (80014a8 <HAL_ADC_ConfigChannel+0x29c>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d12b      	bne.n	800148c <HAL_ADC_ConfigChannel+0x280>
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a1a      	ldr	r2, [pc, #104]	@ (80014a4 <HAL_ADC_ConfigChannel+0x298>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d003      	beq.n	8001446 <HAL_ADC_ConfigChannel+0x23a>
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b11      	cmp	r3, #17
 8001444:	d122      	bne.n	800148c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001446:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <HAL_ADC_ConfigChannel+0x2a0>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	4a18      	ldr	r2, [pc, #96]	@ (80014ac <HAL_ADC_ConfigChannel+0x2a0>)
 800144c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001450:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001452:	4b16      	ldr	r3, [pc, #88]	@ (80014ac <HAL_ADC_ConfigChannel+0x2a0>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	4a15      	ldr	r2, [pc, #84]	@ (80014ac <HAL_ADC_ConfigChannel+0x2a0>)
 8001458:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800145c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a10      	ldr	r2, [pc, #64]	@ (80014a4 <HAL_ADC_ConfigChannel+0x298>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d111      	bne.n	800148c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001468:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <HAL_ADC_ConfigChannel+0x2a4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a11      	ldr	r2, [pc, #68]	@ (80014b4 <HAL_ADC_ConfigChannel+0x2a8>)
 800146e:	fba2 2303 	umull	r2, r3, r2, r3
 8001472:	0c9a      	lsrs	r2, r3, #18
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800147e:	e002      	b.n	8001486 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	3b01      	subs	r3, #1
 8001484:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1f9      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	10000012 	.word	0x10000012
 80014a8:	40012000 	.word	0x40012000
 80014ac:	40012300 	.word	0x40012300
 80014b0:	20000000 	.word	0x20000000
 80014b4:	431bde83 	.word	0x431bde83

080014b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80014c0:	4b78      	ldr	r3, [pc, #480]	@ (80016a4 <ADC_Init+0x1ec>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	4a77      	ldr	r2, [pc, #476]	@ (80016a4 <ADC_Init+0x1ec>)
 80014c6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80014ca:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80014cc:	4b75      	ldr	r3, [pc, #468]	@ (80016a4 <ADC_Init+0x1ec>)
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	4973      	ldr	r1, [pc, #460]	@ (80016a4 <ADC_Init+0x1ec>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6859      	ldr	r1, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	021a      	lsls	r2, r3, #8
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800150c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6859      	ldr	r1, [r3, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800152e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6899      	ldr	r1, [r3, #8]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68da      	ldr	r2, [r3, #12]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001546:	4a58      	ldr	r2, [pc, #352]	@ (80016a8 <ADC_Init+0x1f0>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d022      	beq.n	8001592 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800155a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6899      	ldr	r1, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800157c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6899      	ldr	r1, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	e00f      	b.n	80015b2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0202 	bic.w	r2, r2, #2
 80015c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6899      	ldr	r1, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	005a      	lsls	r2, r3, #1
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d01b      	beq.n	8001618 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80015ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80015fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6859      	ldr	r1, [r3, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160a:	3b01      	subs	r3, #1
 800160c:	035a      	lsls	r2, r3, #13
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	e007      	b.n	8001628 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001626:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001636:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	3b01      	subs	r3, #1
 8001644:	051a      	lsls	r2, r3, #20
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800165c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6899      	ldr	r1, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800166a:	025a      	lsls	r2, r3, #9
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001682:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	029a      	lsls	r2, r3, #10
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	609a      	str	r2, [r3, #8]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	40012300 	.word	0x40012300
 80016a8:	0f000001 	.word	0x0f000001

080016ac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016b8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016be:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d13c      	bne.n	8001740 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ca:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d12b      	bne.n	8001738 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d127      	bne.n	8001738 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ee:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d006      	beq.n	8001704 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001700:	2b00      	cmp	r3, #0
 8001702:	d119      	bne.n	8001738 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0220 	bic.w	r2, r2, #32
 8001712:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001718:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d105      	bne.n	8001738 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001730:	f043 0201 	orr.w	r2, r3, #1
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f7ff f96d 	bl	8000a18 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800173e:	e00e      	b.n	800175e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f7ff fd53 	bl	80011f8 <HAL_ADC_ErrorCallback>
}
 8001752:	e004      	b.n	800175e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	4798      	blx	r3
}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b084      	sub	sp, #16
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001772:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f7ff f963 	bl	8000a40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800178e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2240      	movs	r2, #64	@ 0x40
 8001794:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179a:	f043 0204 	orr.w	r2, r3, #4
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f7ff fd28 	bl	80011f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017a8:	bf00      	nop
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c0:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <__NVIC_SetPriorityGrouping+0x40>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017cc:	4013      	ands	r3, r2
 80017ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017d8:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017de:	4a04      	ldr	r2, [pc, #16]	@ (80017f0 <__NVIC_SetPriorityGrouping+0x40>)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	60d3      	str	r3, [r2, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00
 80017f4:	05fa0000 	.word	0x05fa0000

080017f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017fc:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <__NVIC_GetPriorityGrouping+0x18>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	0a1b      	lsrs	r3, r3, #8
 8001802:	f003 0307 	and.w	r3, r3, #7
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	2b00      	cmp	r3, #0
 8001824:	db0b      	blt.n	800183e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	f003 021f 	and.w	r2, r3, #31
 800182c:	4907      	ldr	r1, [pc, #28]	@ (800184c <__NVIC_EnableIRQ+0x38>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	095b      	lsrs	r3, r3, #5
 8001834:	2001      	movs	r0, #1
 8001836:	fa00 f202 	lsl.w	r2, r0, r2
 800183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000e100 	.word	0xe000e100

08001850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	db0a      	blt.n	800187a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	490c      	ldr	r1, [pc, #48]	@ (800189c <__NVIC_SetPriority+0x4c>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	0112      	lsls	r2, r2, #4
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	440b      	add	r3, r1
 8001874:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001878:	e00a      	b.n	8001890 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4908      	ldr	r1, [pc, #32]	@ (80018a0 <__NVIC_SetPriority+0x50>)
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	3b04      	subs	r3, #4
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	440b      	add	r3, r1
 800188e:	761a      	strb	r2, [r3, #24]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000e100 	.word	0xe000e100
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	@ 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f1c3 0307 	rsb	r3, r3, #7
 80018be:	2b04      	cmp	r3, #4
 80018c0:	bf28      	it	cs
 80018c2:	2304      	movcs	r3, #4
 80018c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3304      	adds	r3, #4
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d902      	bls.n	80018d4 <NVIC_EncodePriority+0x30>
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3b03      	subs	r3, #3
 80018d2:	e000      	b.n	80018d6 <NVIC_EncodePriority+0x32>
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	f04f 32ff 	mov.w	r2, #4294967295
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43da      	mvns	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	401a      	ands	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
 80018f6:	43d9      	mvns	r1, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	4313      	orrs	r3, r2
         );
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3724      	adds	r7, #36	@ 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800191c:	d301      	bcc.n	8001922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191e:	2301      	movs	r3, #1
 8001920:	e00f      	b.n	8001942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001922:	4a0a      	ldr	r2, [pc, #40]	@ (800194c <SysTick_Config+0x40>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192a:	210f      	movs	r1, #15
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	f7ff ff8e 	bl	8001850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001934:	4b05      	ldr	r3, [pc, #20]	@ (800194c <SysTick_Config+0x40>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193a:	4b04      	ldr	r3, [pc, #16]	@ (800194c <SysTick_Config+0x40>)
 800193c:	2207      	movs	r2, #7
 800193e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	e000e010 	.word	0xe000e010

08001950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff29 	bl	80017b0 <__NVIC_SetPriorityGrouping>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001978:	f7ff ff3e 	bl	80017f8 <__NVIC_GetPriorityGrouping>
 800197c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f7ff ff8e 	bl	80018a4 <NVIC_EncodePriority>
 8001988:	4602      	mov	r2, r0
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff5d 	bl	8001850 <__NVIC_SetPriority>
}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff31 	bl	8001814 <__NVIC_EnableIRQ>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffa2 	bl	800190c <SysTick_Config>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80019d8:	f3bf 8f5f 	dmb	sy
}
 80019dc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80019de:	4b07      	ldr	r3, [pc, #28]	@ (80019fc <HAL_MPU_Disable+0x28>)
 80019e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e2:	4a06      	ldr	r2, [pc, #24]	@ (80019fc <HAL_MPU_Disable+0x28>)
 80019e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019e8:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80019ea:	4b05      	ldr	r3, [pc, #20]	@ (8001a00 <HAL_MPU_Disable+0x2c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	605a      	str	r2, [r3, #4]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	e000ed90 	.word	0xe000ed90

08001a04 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001a0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a3c <HAL_MPU_Enable+0x38>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a16:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <HAL_MPU_Enable+0x3c>)
 8001a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1a:	4a09      	ldr	r2, [pc, #36]	@ (8001a40 <HAL_MPU_Enable+0x3c>)
 8001a1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a20:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001a22:	f3bf 8f4f 	dsb	sy
}
 8001a26:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a28:	f3bf 8f6f 	isb	sy
}
 8001a2c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000ed90 	.word	0xe000ed90
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	785a      	ldrb	r2, [r3, #1]
 8001a50:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac0 <HAL_MPU_ConfigRegion+0x7c>)
 8001a52:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001a54:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac0 <HAL_MPU_ConfigRegion+0x7c>)
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	4a19      	ldr	r2, [pc, #100]	@ (8001ac0 <HAL_MPU_ConfigRegion+0x7c>)
 8001a5a:	f023 0301 	bic.w	r3, r3, #1
 8001a5e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001a60:	4a17      	ldr	r2, [pc, #92]	@ (8001ac0 <HAL_MPU_ConfigRegion+0x7c>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	7b1b      	ldrb	r3, [r3, #12]
 8001a6c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	7adb      	ldrb	r3, [r3, #11]
 8001a72:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7a9b      	ldrb	r3, [r3, #10]
 8001a7a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	7b5b      	ldrb	r3, [r3, #13]
 8001a82:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	7b9b      	ldrb	r3, [r3, #14]
 8001a8a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7bdb      	ldrb	r3, [r3, #15]
 8001a92:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7a5b      	ldrb	r3, [r3, #9]
 8001a9a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7a1b      	ldrb	r3, [r3, #8]
 8001aa2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001aa4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	7812      	ldrb	r2, [r2, #0]
 8001aaa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001aac:	4a04      	ldr	r2, [pc, #16]	@ (8001ac0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001aae:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ab0:	6113      	str	r3, [r2, #16]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000ed90 	.word	0xe000ed90

08001ac4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff fa24 	bl	8000f1c <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e099      	b.n	8001c14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0201 	bic.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b00:	e00f      	b.n	8001b22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b02:	f7ff fa0b 	bl	8000f1c <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b05      	cmp	r3, #5
 8001b0e:	d908      	bls.n	8001b22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2220      	movs	r2, #32
 8001b14:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2203      	movs	r2, #3
 8001b1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e078      	b.n	8001c14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1e8      	bne.n	8001b02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	4b38      	ldr	r3, [pc, #224]	@ (8001c1c <HAL_DMA_Init+0x158>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d107      	bne.n	8001b8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b84:	4313      	orrs	r3, r2
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f023 0307 	bic.w	r3, r3, #7
 8001ba2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d117      	bne.n	8001be6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00e      	beq.n	8001be6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 fa77 	bl	80020bc <DMA_CheckFifoParam>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2240      	movs	r2, #64	@ 0x40
 8001bd8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001be2:	2301      	movs	r3, #1
 8001be4:	e016      	b.n	8001c14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 fa2e 	bl	8002050 <DMA_CalcBaseAndBitshift>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfc:	223f      	movs	r2, #63	@ 0x3f
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	e010803f 	.word	0xe010803f

08001c20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_DMA_Start_IT+0x26>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e048      	b.n	8001cd8 <HAL_DMA_Start_IT+0xb8>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d137      	bne.n	8001cca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 f9c0 	bl	8001ff4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c78:	223f      	movs	r2, #63	@ 0x3f
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0216 	orr.w	r2, r2, #22
 8001c8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	695a      	ldr	r2, [r3, #20]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c9e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d007      	beq.n	8001cb8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0208 	orr.w	r2, r2, #8
 8001cb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0201 	orr.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	e005      	b.n	8001cd6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001cec:	4b8e      	ldr	r3, [pc, #568]	@ (8001f28 <HAL_DMA_IRQHandler+0x248>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a8e      	ldr	r2, [pc, #568]	@ (8001f2c <HAL_DMA_IRQHandler+0x24c>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	0a9b      	lsrs	r3, r3, #10
 8001cf8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d0a:	2208      	movs	r2, #8
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d01a      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d013      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0204 	bic.w	r2, r2, #4
 8001d32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d38:	2208      	movs	r2, #8
 8001d3a:	409a      	lsls	r2, r3
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d44:	f043 0201 	orr.w	r2, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d50:	2201      	movs	r2, #1
 8001d52:	409a      	lsls	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d012      	beq.n	8001d82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00b      	beq.n	8001d82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d6e:	2201      	movs	r2, #1
 8001d70:	409a      	lsls	r2, r3
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d7a:	f043 0202 	orr.w	r2, r3, #2
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d86:	2204      	movs	r2, #4
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d012      	beq.n	8001db8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00b      	beq.n	8001db8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da4:	2204      	movs	r2, #4
 8001da6:	409a      	lsls	r2, r3
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db0:	f043 0204 	orr.w	r2, r3, #4
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dbc:	2210      	movs	r2, #16
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d043      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d03c      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dda:	2210      	movs	r2, #16
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d018      	beq.n	8001e22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d108      	bne.n	8001e10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d024      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	4798      	blx	r3
 8001e0e:	e01f      	b.n	8001e50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d01b      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	4798      	blx	r3
 8001e20:	e016      	b.n	8001e50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d107      	bne.n	8001e40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0208 	bic.w	r2, r2, #8
 8001e3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e54:	2220      	movs	r2, #32
 8001e56:	409a      	lsls	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 808f 	beq.w	8001f80 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0310 	and.w	r3, r3, #16
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 8087 	beq.w	8001f80 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e76:	2220      	movs	r2, #32
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b05      	cmp	r3, #5
 8001e88:	d136      	bne.n	8001ef8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0216 	bic.w	r2, r2, #22
 8001e98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695a      	ldr	r2, [r3, #20]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ea8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d103      	bne.n	8001eba <HAL_DMA_IRQHandler+0x1da>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d007      	beq.n	8001eca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0208 	bic.w	r2, r2, #8
 8001ec8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ece:	223f      	movs	r2, #63	@ 0x3f
 8001ed0:	409a      	lsls	r2, r3
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d07e      	beq.n	8001fec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	4798      	blx	r3
        }
        return;
 8001ef6:	e079      	b.n	8001fec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d01d      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10d      	bne.n	8001f30 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d031      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	4798      	blx	r3
 8001f24:	e02c      	b.n	8001f80 <HAL_DMA_IRQHandler+0x2a0>
 8001f26:	bf00      	nop
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d023      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	4798      	blx	r3
 8001f40:	e01e      	b.n	8001f80 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10f      	bne.n	8001f70 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0210 	bic.w	r2, r2, #16
 8001f5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d032      	beq.n	8001fee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d022      	beq.n	8001fda <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2205      	movs	r2, #5
 8001f98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0201 	bic.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d307      	bcc.n	8001fc8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f2      	bne.n	8001fac <HAL_DMA_IRQHandler+0x2cc>
 8001fc6:	e000      	b.n	8001fca <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fc8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	4798      	blx	r3
 8001fea:	e000      	b.n	8001fee <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fec:	bf00      	nop
    }
  }
}
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002010:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b40      	cmp	r3, #64	@ 0x40
 8002020:	d108      	bne.n	8002034 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002032:	e007      	b.n	8002044 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	60da      	str	r2, [r3, #12]
}
 8002044:	bf00      	nop
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	3b10      	subs	r3, #16
 8002060:	4a13      	ldr	r2, [pc, #76]	@ (80020b0 <DMA_CalcBaseAndBitshift+0x60>)
 8002062:	fba2 2303 	umull	r2, r3, r2, r3
 8002066:	091b      	lsrs	r3, r3, #4
 8002068:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800206a:	4a12      	ldr	r2, [pc, #72]	@ (80020b4 <DMA_CalcBaseAndBitshift+0x64>)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4413      	add	r3, r2
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b03      	cmp	r3, #3
 800207c:	d908      	bls.n	8002090 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <DMA_CalcBaseAndBitshift+0x68>)
 8002086:	4013      	ands	r3, r2
 8002088:	1d1a      	adds	r2, r3, #4
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	659a      	str	r2, [r3, #88]	@ 0x58
 800208e:	e006      	b.n	800209e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <DMA_CalcBaseAndBitshift+0x68>)
 8002098:	4013      	ands	r3, r2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	aaaaaaab 	.word	0xaaaaaaab
 80020b4:	08004bfc 	.word	0x08004bfc
 80020b8:	fffffc00 	.word	0xfffffc00

080020bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d11f      	bne.n	8002116 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d856      	bhi.n	800218a <DMA_CheckFifoParam+0xce>
 80020dc:	a201      	add	r2, pc, #4	@ (adr r2, 80020e4 <DMA_CheckFifoParam+0x28>)
 80020de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e2:	bf00      	nop
 80020e4:	080020f5 	.word	0x080020f5
 80020e8:	08002107 	.word	0x08002107
 80020ec:	080020f5 	.word	0x080020f5
 80020f0:	0800218b 	.word	0x0800218b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d046      	beq.n	800218e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002104:	e043      	b.n	800218e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800210e:	d140      	bne.n	8002192 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002114:	e03d      	b.n	8002192 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800211e:	d121      	bne.n	8002164 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d837      	bhi.n	8002196 <DMA_CheckFifoParam+0xda>
 8002126:	a201      	add	r2, pc, #4	@ (adr r2, 800212c <DMA_CheckFifoParam+0x70>)
 8002128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212c:	0800213d 	.word	0x0800213d
 8002130:	08002143 	.word	0x08002143
 8002134:	0800213d 	.word	0x0800213d
 8002138:	08002155 	.word	0x08002155
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
      break;
 8002140:	e030      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002146:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d025      	beq.n	800219a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002152:	e022      	b.n	800219a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002158:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800215c:	d11f      	bne.n	800219e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002162:	e01c      	b.n	800219e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d903      	bls.n	8002172 <DMA_CheckFifoParam+0xb6>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b03      	cmp	r3, #3
 800216e:	d003      	beq.n	8002178 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002170:	e018      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	73fb      	strb	r3, [r7, #15]
      break;
 8002176:	e015      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00e      	beq.n	80021a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
      break;
 8002188:	e00b      	b.n	80021a2 <DMA_CheckFifoParam+0xe6>
      break;
 800218a:	bf00      	nop
 800218c:	e00a      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;
 800218e:	bf00      	nop
 8002190:	e008      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002192:	bf00      	nop
 8002194:	e006      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002196:	bf00      	nop
 8002198:	e004      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;
 800219a:	bf00      	nop
 800219c:	e002      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800219e:	bf00      	nop
 80021a0:	e000      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;
 80021a2:	bf00      	nop
    }
  } 
  
  return status; 
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop

080021b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	@ 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
 80021d2:	e175      	b.n	80024c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80021d4:	2201      	movs	r2, #1
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	f040 8164 	bne.w	80024ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d005      	beq.n	800220a <HAL_GPIO_Init+0x56>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d130      	bne.n	800226c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	2203      	movs	r2, #3
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002240:	2201      	movs	r2, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 0201 	and.w	r2, r3, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b03      	cmp	r3, #3
 8002276:	d017      	beq.n	80022a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	2203      	movs	r2, #3
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d123      	bne.n	80022fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	08da      	lsrs	r2, r3, #3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3208      	adds	r2, #8
 80022bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	220f      	movs	r2, #15
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	08da      	lsrs	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3208      	adds	r2, #8
 80022f6:	69b9      	ldr	r1, [r7, #24]
 80022f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	2203      	movs	r2, #3
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0203 	and.w	r2, r3, #3
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80be 	beq.w	80024ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233e:	4b66      	ldr	r3, [pc, #408]	@ (80024d8 <HAL_GPIO_Init+0x324>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002342:	4a65      	ldr	r2, [pc, #404]	@ (80024d8 <HAL_GPIO_Init+0x324>)
 8002344:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002348:	6453      	str	r3, [r2, #68]	@ 0x44
 800234a:	4b63      	ldr	r3, [pc, #396]	@ (80024d8 <HAL_GPIO_Init+0x324>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002356:	4a61      	ldr	r2, [pc, #388]	@ (80024dc <HAL_GPIO_Init+0x328>)
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	3302      	adds	r3, #2
 800235e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	220f      	movs	r2, #15
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a58      	ldr	r2, [pc, #352]	@ (80024e0 <HAL_GPIO_Init+0x32c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d037      	beq.n	80023f2 <HAL_GPIO_Init+0x23e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a57      	ldr	r2, [pc, #348]	@ (80024e4 <HAL_GPIO_Init+0x330>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d031      	beq.n	80023ee <HAL_GPIO_Init+0x23a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a56      	ldr	r2, [pc, #344]	@ (80024e8 <HAL_GPIO_Init+0x334>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d02b      	beq.n	80023ea <HAL_GPIO_Init+0x236>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a55      	ldr	r2, [pc, #340]	@ (80024ec <HAL_GPIO_Init+0x338>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d025      	beq.n	80023e6 <HAL_GPIO_Init+0x232>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a54      	ldr	r2, [pc, #336]	@ (80024f0 <HAL_GPIO_Init+0x33c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01f      	beq.n	80023e2 <HAL_GPIO_Init+0x22e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a53      	ldr	r2, [pc, #332]	@ (80024f4 <HAL_GPIO_Init+0x340>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d019      	beq.n	80023de <HAL_GPIO_Init+0x22a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a52      	ldr	r2, [pc, #328]	@ (80024f8 <HAL_GPIO_Init+0x344>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d013      	beq.n	80023da <HAL_GPIO_Init+0x226>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a51      	ldr	r2, [pc, #324]	@ (80024fc <HAL_GPIO_Init+0x348>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00d      	beq.n	80023d6 <HAL_GPIO_Init+0x222>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a50      	ldr	r2, [pc, #320]	@ (8002500 <HAL_GPIO_Init+0x34c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d007      	beq.n	80023d2 <HAL_GPIO_Init+0x21e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a4f      	ldr	r2, [pc, #316]	@ (8002504 <HAL_GPIO_Init+0x350>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_GPIO_Init+0x21a>
 80023ca:	2309      	movs	r3, #9
 80023cc:	e012      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023ce:	230a      	movs	r3, #10
 80023d0:	e010      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023d2:	2308      	movs	r3, #8
 80023d4:	e00e      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023d6:	2307      	movs	r3, #7
 80023d8:	e00c      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023da:	2306      	movs	r3, #6
 80023dc:	e00a      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023de:	2305      	movs	r3, #5
 80023e0:	e008      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023e2:	2304      	movs	r3, #4
 80023e4:	e006      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023e6:	2303      	movs	r3, #3
 80023e8:	e004      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e002      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023f2:	2300      	movs	r3, #0
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	f002 0203 	and.w	r2, r2, #3
 80023fa:	0092      	lsls	r2, r2, #2
 80023fc:	4093      	lsls	r3, r2
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002404:	4935      	ldr	r1, [pc, #212]	@ (80024dc <HAL_GPIO_Init+0x328>)
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	3302      	adds	r3, #2
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002412:	4b3d      	ldr	r3, [pc, #244]	@ (8002508 <HAL_GPIO_Init+0x354>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002436:	4a34      	ldr	r2, [pc, #208]	@ (8002508 <HAL_GPIO_Init+0x354>)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800243c:	4b32      	ldr	r3, [pc, #200]	@ (8002508 <HAL_GPIO_Init+0x354>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002460:	4a29      	ldr	r2, [pc, #164]	@ (8002508 <HAL_GPIO_Init+0x354>)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002466:	4b28      	ldr	r3, [pc, #160]	@ (8002508 <HAL_GPIO_Init+0x354>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800248a:	4a1f      	ldr	r2, [pc, #124]	@ (8002508 <HAL_GPIO_Init+0x354>)
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002490:	4b1d      	ldr	r3, [pc, #116]	@ (8002508 <HAL_GPIO_Init+0x354>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024b4:	4a14      	ldr	r2, [pc, #80]	@ (8002508 <HAL_GPIO_Init+0x354>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3301      	adds	r3, #1
 80024be:	61fb      	str	r3, [r7, #28]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	2b0f      	cmp	r3, #15
 80024c4:	f67f ae86 	bls.w	80021d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80024c8:	bf00      	nop
 80024ca:	bf00      	nop
 80024cc:	3724      	adds	r7, #36	@ 0x24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40013800 	.word	0x40013800
 80024e0:	40020000 	.word	0x40020000
 80024e4:	40020400 	.word	0x40020400
 80024e8:	40020800 	.word	0x40020800
 80024ec:	40020c00 	.word	0x40020c00
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40021400 	.word	0x40021400
 80024f8:	40021800 	.word	0x40021800
 80024fc:	40021c00 	.word	0x40021c00
 8002500:	40022000 	.word	0x40022000
 8002504:	40022400 	.word	0x40022400
 8002508:	40013c00 	.word	0x40013c00

0800250c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
 8002518:	4613      	mov	r3, r2
 800251a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800251c:	787b      	ldrb	r3, [r7, #1]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002528:	e003      	b.n	8002532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800252a:	887b      	ldrh	r3, [r7, #2]
 800252c:	041a      	lsls	r2, r3, #16
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	619a      	str	r2, [r3, #24]
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	4b23      	ldr	r3, [pc, #140]	@ (80025d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254e:	4a22      	ldr	r2, [pc, #136]	@ (80025d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002554:	6413      	str	r3, [r2, #64]	@ 0x40
 8002556:	4b20      	ldr	r3, [pc, #128]	@ (80025d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002562:	4b1e      	ldr	r3, [pc, #120]	@ (80025dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a1d      	ldr	r2, [pc, #116]	@ (80025dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800256c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800256e:	f7fe fcd5 	bl	8000f1c <HAL_GetTick>
 8002572:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002574:	e009      	b.n	800258a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002576:	f7fe fcd1 	bl	8000f1c <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002584:	d901      	bls.n	800258a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e022      	b.n	80025d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800258a:	4b14      	ldr	r3, [pc, #80]	@ (80025dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002596:	d1ee      	bne.n	8002576 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002598:	4b10      	ldr	r3, [pc, #64]	@ (80025dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a0f      	ldr	r2, [pc, #60]	@ (80025dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800259e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025a4:	f7fe fcba 	bl	8000f1c <HAL_GetTick>
 80025a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025aa:	e009      	b.n	80025c0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025ac:	f7fe fcb6 	bl	8000f1c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025ba:	d901      	bls.n	80025c0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e007      	b.n	80025d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025c0:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <HAL_PWREx_EnableOverDrive+0x9c>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025cc:	d1ee      	bne.n	80025ac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40007000 	.word	0x40007000

080025e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80025e8:	2300      	movs	r3, #0
 80025ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e29b      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 8087 	beq.w	8002712 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002604:	4b96      	ldr	r3, [pc, #600]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 030c 	and.w	r3, r3, #12
 800260c:	2b04      	cmp	r3, #4
 800260e:	d00c      	beq.n	800262a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002610:	4b93      	ldr	r3, [pc, #588]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b08      	cmp	r3, #8
 800261a:	d112      	bne.n	8002642 <HAL_RCC_OscConfig+0x62>
 800261c:	4b90      	ldr	r3, [pc, #576]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002624:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002628:	d10b      	bne.n	8002642 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262a:	4b8d      	ldr	r3, [pc, #564]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d06c      	beq.n	8002710 <HAL_RCC_OscConfig+0x130>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d168      	bne.n	8002710 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e275      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800264a:	d106      	bne.n	800265a <HAL_RCC_OscConfig+0x7a>
 800264c:	4b84      	ldr	r3, [pc, #528]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a83      	ldr	r2, [pc, #524]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 8002652:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	e02e      	b.n	80026b8 <HAL_RCC_OscConfig+0xd8>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10c      	bne.n	800267c <HAL_RCC_OscConfig+0x9c>
 8002662:	4b7f      	ldr	r3, [pc, #508]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a7e      	ldr	r2, [pc, #504]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 8002668:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	4b7c      	ldr	r3, [pc, #496]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a7b      	ldr	r2, [pc, #492]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 8002674:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	e01d      	b.n	80026b8 <HAL_RCC_OscConfig+0xd8>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002684:	d10c      	bne.n	80026a0 <HAL_RCC_OscConfig+0xc0>
 8002686:	4b76      	ldr	r3, [pc, #472]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a75      	ldr	r2, [pc, #468]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 800268c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	4b73      	ldr	r3, [pc, #460]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a72      	ldr	r2, [pc, #456]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 8002698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e00b      	b.n	80026b8 <HAL_RCC_OscConfig+0xd8>
 80026a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 80026a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a6b      	ldr	r2, [pc, #428]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 80026b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d013      	beq.n	80026e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7fe fc2c 	bl	8000f1c <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c8:	f7fe fc28 	bl	8000f1c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	@ 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e229      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026da:	4b61      	ldr	r3, [pc, #388]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0xe8>
 80026e6:	e014      	b.n	8002712 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7fe fc18 	bl	8000f1c <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f0:	f7fe fc14 	bl	8000f1c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	@ 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e215      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002702:	4b57      	ldr	r3, [pc, #348]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x110>
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d069      	beq.n	80027f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800271e:	4b50      	ldr	r3, [pc, #320]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00b      	beq.n	8002742 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272a:	4b4d      	ldr	r3, [pc, #308]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b08      	cmp	r3, #8
 8002734:	d11c      	bne.n	8002770 <HAL_RCC_OscConfig+0x190>
 8002736:	4b4a      	ldr	r3, [pc, #296]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d116      	bne.n	8002770 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002742:	4b47      	ldr	r3, [pc, #284]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d005      	beq.n	800275a <HAL_RCC_OscConfig+0x17a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d001      	beq.n	800275a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e1e9      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275a:	4b41      	ldr	r3, [pc, #260]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	493d      	ldr	r1, [pc, #244]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276e:	e040      	b.n	80027f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d023      	beq.n	80027c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002778:	4b39      	ldr	r3, [pc, #228]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a38      	ldr	r2, [pc, #224]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7fe fbca 	bl	8000f1c <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278c:	f7fe fbc6 	bl	8000f1c <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e1c7      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279e:	4b30      	ldr	r3, [pc, #192]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4929      	ldr	r1, [pc, #164]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]
 80027be:	e018      	b.n	80027f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c0:	4b27      	ldr	r3, [pc, #156]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a26      	ldr	r2, [pc, #152]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 80027c6:	f023 0301 	bic.w	r3, r3, #1
 80027ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe fba6 	bl	8000f1c <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d4:	f7fe fba2 	bl	8000f1c <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e1a3      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d038      	beq.n	8002870 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d019      	beq.n	800283a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002806:	4b16      	ldr	r3, [pc, #88]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 8002808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800280a:	4a15      	ldr	r2, [pc, #84]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002812:	f7fe fb83 	bl	8000f1c <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800281a:	f7fe fb7f 	bl	8000f1c <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e180      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282c:	4b0c      	ldr	r3, [pc, #48]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 800282e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_OscConfig+0x23a>
 8002838:	e01a      	b.n	8002870 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800283a:	4b09      	ldr	r3, [pc, #36]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 800283c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800283e:	4a08      	ldr	r2, [pc, #32]	@ (8002860 <HAL_RCC_OscConfig+0x280>)
 8002840:	f023 0301 	bic.w	r3, r3, #1
 8002844:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002846:	f7fe fb69 	bl	8000f1c <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284c:	e00a      	b.n	8002864 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800284e:	f7fe fb65 	bl	8000f1c <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d903      	bls.n	8002864 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e166      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
 8002860:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002864:	4b92      	ldr	r3, [pc, #584]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1ee      	bne.n	800284e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80a4 	beq.w	80029c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800287e:	4b8c      	ldr	r3, [pc, #560]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10d      	bne.n	80028a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800288a:	4b89      	ldr	r3, [pc, #548]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	4a88      	ldr	r2, [pc, #544]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002894:	6413      	str	r3, [r2, #64]	@ 0x40
 8002896:	4b86      	ldr	r3, [pc, #536]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a2:	2301      	movs	r3, #1
 80028a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028a6:	4b83      	ldr	r3, [pc, #524]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d118      	bne.n	80028e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80028b2:	4b80      	ldr	r3, [pc, #512]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a7f      	ldr	r2, [pc, #508]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 80028b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028be:	f7fe fb2d 	bl	8000f1c <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c6:	f7fe fb29 	bl	8000f1c <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b64      	cmp	r3, #100	@ 0x64
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e12a      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028d8:	4b76      	ldr	r3, [pc, #472]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0f0      	beq.n	80028c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d106      	bne.n	80028fa <HAL_RCC_OscConfig+0x31a>
 80028ec:	4b70      	ldr	r3, [pc, #448]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f0:	4a6f      	ldr	r2, [pc, #444]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f8:	e02d      	b.n	8002956 <HAL_RCC_OscConfig+0x376>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10c      	bne.n	800291c <HAL_RCC_OscConfig+0x33c>
 8002902:	4b6b      	ldr	r3, [pc, #428]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002906:	4a6a      	ldr	r2, [pc, #424]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	6713      	str	r3, [r2, #112]	@ 0x70
 800290e:	4b68      	ldr	r3, [pc, #416]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002912:	4a67      	ldr	r2, [pc, #412]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002914:	f023 0304 	bic.w	r3, r3, #4
 8002918:	6713      	str	r3, [r2, #112]	@ 0x70
 800291a:	e01c      	b.n	8002956 <HAL_RCC_OscConfig+0x376>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b05      	cmp	r3, #5
 8002922:	d10c      	bne.n	800293e <HAL_RCC_OscConfig+0x35e>
 8002924:	4b62      	ldr	r3, [pc, #392]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002928:	4a61      	ldr	r2, [pc, #388]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 800292a:	f043 0304 	orr.w	r3, r3, #4
 800292e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002930:	4b5f      	ldr	r3, [pc, #380]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002934:	4a5e      	ldr	r2, [pc, #376]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6713      	str	r3, [r2, #112]	@ 0x70
 800293c:	e00b      	b.n	8002956 <HAL_RCC_OscConfig+0x376>
 800293e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002942:	4a5b      	ldr	r2, [pc, #364]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	6713      	str	r3, [r2, #112]	@ 0x70
 800294a:	4b59      	ldr	r3, [pc, #356]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294e:	4a58      	ldr	r2, [pc, #352]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002950:	f023 0304 	bic.w	r3, r3, #4
 8002954:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d015      	beq.n	800298a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295e:	f7fe fadd 	bl	8000f1c <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002964:	e00a      	b.n	800297c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002966:	f7fe fad9 	bl	8000f1c <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002974:	4293      	cmp	r3, r2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e0d8      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297c:	4b4c      	ldr	r3, [pc, #304]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 800297e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0ee      	beq.n	8002966 <HAL_RCC_OscConfig+0x386>
 8002988:	e014      	b.n	80029b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298a:	f7fe fac7 	bl	8000f1c <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002990:	e00a      	b.n	80029a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002992:	f7fe fac3 	bl	8000f1c <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e0c2      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a8:	4b41      	ldr	r3, [pc, #260]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1ee      	bne.n	8002992 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029b4:	7dfb      	ldrb	r3, [r7, #23]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d105      	bne.n	80029c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ba:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	4a3c      	ldr	r2, [pc, #240]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 80029c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029c4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 80ae 	beq.w	8002b2c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029d0:	4b37      	ldr	r3, [pc, #220]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d06d      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d14b      	bne.n	8002a7c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e4:	4b32      	ldr	r3, [pc, #200]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a31      	ldr	r2, [pc, #196]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 80029ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7fe fa94 	bl	8000f1c <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f8:	f7fe fa90 	bl	8000f1c <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e091      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0a:	4b29      	ldr	r3, [pc, #164]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69da      	ldr	r2, [r3, #28]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a24:	019b      	lsls	r3, r3, #6
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2c:	085b      	lsrs	r3, r3, #1
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	041b      	lsls	r3, r3, #16
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a38:	061b      	lsls	r3, r3, #24
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a40:	071b      	lsls	r3, r3, #28
 8002a42:	491b      	ldr	r1, [pc, #108]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a48:	4b19      	ldr	r3, [pc, #100]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a18      	ldr	r2, [pc, #96]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002a4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7fe fa62 	bl	8000f1c <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5c:	f7fe fa5e 	bl	8000f1c <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e05f      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6e:	4b10      	ldr	r3, [pc, #64]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0x47c>
 8002a7a:	e057      	b.n	8002b2c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002a82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a88:	f7fe fa48 	bl	8000f1c <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a90:	f7fe fa44 	bl	8000f1c <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e045      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa2:	4b03      	ldr	r3, [pc, #12]	@ (8002ab0 <HAL_RCC_OscConfig+0x4d0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0x4b0>
 8002aae:	e03d      	b.n	8002b2c <HAL_RCC_OscConfig+0x54c>
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b38 <HAL_RCC_OscConfig+0x558>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d030      	beq.n	8002b28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d129      	bne.n	8002b28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d122      	bne.n	8002b28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ae8:	4013      	ands	r3, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002aee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d119      	bne.n	8002b28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afe:	085b      	lsrs	r3, r3, #1
 8002b00:	3b01      	subs	r3, #1
 8002b02:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d10f      	bne.n	8002b28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b12:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d107      	bne.n	8002b28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40023800 	.word	0x40023800

08002b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0d0      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b54:	4b6a      	ldr	r3, [pc, #424]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 030f 	and.w	r3, r3, #15
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d910      	bls.n	8002b84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b62:	4b67      	ldr	r3, [pc, #412]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 020f 	bic.w	r2, r3, #15
 8002b6a:	4965      	ldr	r1, [pc, #404]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b72:	4b63      	ldr	r3, [pc, #396]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d001      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0b8      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d020      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b9c:	4b59      	ldr	r3, [pc, #356]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	4a58      	ldr	r2, [pc, #352]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ba6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bb4:	4b53      	ldr	r3, [pc, #332]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	4a52      	ldr	r2, [pc, #328]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002bba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002bbe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc0:	4b50      	ldr	r3, [pc, #320]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	494d      	ldr	r1, [pc, #308]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d040      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d107      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be6:	4b47      	ldr	r3, [pc, #284]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d115      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e07f      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfe:	4b41      	ldr	r3, [pc, #260]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d109      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e073      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e06b      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c1e:	4b39      	ldr	r3, [pc, #228]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f023 0203 	bic.w	r2, r3, #3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	4936      	ldr	r1, [pc, #216]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c30:	f7fe f974 	bl	8000f1c <HAL_GetTick>
 8002c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c36:	e00a      	b.n	8002c4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c38:	f7fe f970 	bl	8000f1c <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e053      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 020c 	and.w	r2, r3, #12
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d1eb      	bne.n	8002c38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c60:	4b27      	ldr	r3, [pc, #156]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d210      	bcs.n	8002c90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4b24      	ldr	r3, [pc, #144]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 020f 	bic.w	r2, r3, #15
 8002c76:	4922      	ldr	r1, [pc, #136]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b20      	ldr	r3, [pc, #128]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e032      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c9c:	4b19      	ldr	r3, [pc, #100]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4916      	ldr	r1, [pc, #88]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cba:	4b12      	ldr	r3, [pc, #72]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	490e      	ldr	r1, [pc, #56]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cce:	f000 f821 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	490a      	ldr	r1, [pc, #40]	@ (8002d08 <HAL_RCC_ClockConfig+0x1cc>)
 8002ce0:	5ccb      	ldrb	r3, [r1, r3]
 8002ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce6:	4a09      	ldr	r2, [pc, #36]	@ (8002d0c <HAL_RCC_ClockConfig+0x1d0>)
 8002ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cea:	4b09      	ldr	r3, [pc, #36]	@ (8002d10 <HAL_RCC_ClockConfig+0x1d4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe f8d0 	bl	8000e94 <HAL_InitTick>

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023c00 	.word	0x40023c00
 8002d04:	40023800 	.word	0x40023800
 8002d08:	08004be4 	.word	0x08004be4
 8002d0c:	20000000 	.word	0x20000000
 8002d10:	20000004 	.word	0x20000004

08002d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d18:	b090      	sub	sp, #64	@ 0x40
 8002d1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d20:	2300      	movs	r3, #0
 8002d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d24:	2300      	movs	r3, #0
 8002d26:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d2c:	4b59      	ldr	r3, [pc, #356]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 030c 	and.w	r3, r3, #12
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d00d      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x40>
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	f200 80a1 	bhi.w	8002e80 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <HAL_RCC_GetSysClockFreq+0x34>
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d003      	beq.n	8002d4e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d46:	e09b      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d48:	4b53      	ldr	r3, [pc, #332]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d4c:	e09b      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d4e:	4b53      	ldr	r3, [pc, #332]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d52:	e098      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d54:	4b4f      	ldr	r3, [pc, #316]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d5c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002d5e:	4b4d      	ldr	r3, [pc, #308]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d028      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d6a:	4b4a      	ldr	r3, [pc, #296]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	099b      	lsrs	r3, r3, #6
 8002d70:	2200      	movs	r2, #0
 8002d72:	623b      	str	r3, [r7, #32]
 8002d74:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	4b47      	ldr	r3, [pc, #284]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d80:	fb03 f201 	mul.w	r2, r3, r1
 8002d84:	2300      	movs	r3, #0
 8002d86:	fb00 f303 	mul.w	r3, r0, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	4a43      	ldr	r2, [pc, #268]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d8e:	fba0 1202 	umull	r1, r2, r0, r2
 8002d92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d94:	460a      	mov	r2, r1
 8002d96:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002d98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d9a:	4413      	add	r3, r2
 8002d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002da0:	2200      	movs	r2, #0
 8002da2:	61bb      	str	r3, [r7, #24]
 8002da4:	61fa      	str	r2, [r7, #28]
 8002da6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002daa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002dae:	f7fd fa9f 	bl	80002f0 <__aeabi_uldivmod>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4613      	mov	r3, r2
 8002db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dba:	e053      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dbc:	4b35      	ldr	r3, [pc, #212]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	613b      	str	r3, [r7, #16]
 8002dc6:	617a      	str	r2, [r7, #20]
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002dce:	f04f 0b00 	mov.w	fp, #0
 8002dd2:	4652      	mov	r2, sl
 8002dd4:	465b      	mov	r3, fp
 8002dd6:	f04f 0000 	mov.w	r0, #0
 8002dda:	f04f 0100 	mov.w	r1, #0
 8002dde:	0159      	lsls	r1, r3, #5
 8002de0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002de4:	0150      	lsls	r0, r2, #5
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	ebb2 080a 	subs.w	r8, r2, sl
 8002dee:	eb63 090b 	sbc.w	r9, r3, fp
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002dfe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e06:	ebb2 0408 	subs.w	r4, r2, r8
 8002e0a:	eb63 0509 	sbc.w	r5, r3, r9
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	00eb      	lsls	r3, r5, #3
 8002e18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e1c:	00e2      	lsls	r2, r4, #3
 8002e1e:	4614      	mov	r4, r2
 8002e20:	461d      	mov	r5, r3
 8002e22:	eb14 030a 	adds.w	r3, r4, sl
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	eb45 030b 	adc.w	r3, r5, fp
 8002e2c:	607b      	str	r3, [r7, #4]
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e3a:	4629      	mov	r1, r5
 8002e3c:	028b      	lsls	r3, r1, #10
 8002e3e:	4621      	mov	r1, r4
 8002e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e44:	4621      	mov	r1, r4
 8002e46:	028a      	lsls	r2, r1, #10
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e4e:	2200      	movs	r2, #0
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	60fa      	str	r2, [r7, #12]
 8002e54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e58:	f7fd fa4a 	bl	80002f0 <__aeabi_uldivmod>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4613      	mov	r3, r2
 8002e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002e64:	4b0b      	ldr	r3, [pc, #44]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	0c1b      	lsrs	r3, r3, #16
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	3301      	adds	r3, #1
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002e74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e7e:	e002      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e80:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e82:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3740      	adds	r7, #64	@ 0x40
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800
 8002e98:	00f42400 	.word	0x00f42400
 8002e9c:	017d7840 	.word	0x017d7840

08002ea0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea4:	4b03      	ldr	r3, [pc, #12]	@ (8002eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	20000000 	.word	0x20000000

08002eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ebc:	f7ff fff0 	bl	8002ea0 <HAL_RCC_GetHCLKFreq>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	4b05      	ldr	r3, [pc, #20]	@ (8002ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	0a9b      	lsrs	r3, r3, #10
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	4903      	ldr	r1, [pc, #12]	@ (8002edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ece:	5ccb      	ldrb	r3, [r1, r3]
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	08004bf4 	.word	0x08004bf4

08002ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ee4:	f7ff ffdc 	bl	8002ea0 <HAL_RCC_GetHCLKFreq>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4b05      	ldr	r3, [pc, #20]	@ (8002f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	0b5b      	lsrs	r3, r3, #13
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	4903      	ldr	r1, [pc, #12]	@ (8002f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ef6:	5ccb      	ldrb	r3, [r1, r3]
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40023800 	.word	0x40023800
 8002f04:	08004bf4 	.word	0x08004bf4

08002f08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d012      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f30:	4b69      	ldr	r3, [pc, #420]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	4a68      	ldr	r2, [pc, #416]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f36:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002f3a:	6093      	str	r3, [r2, #8]
 8002f3c:	4b66      	ldr	r3, [pc, #408]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f44:	4964      	ldr	r1, [pc, #400]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002f52:	2301      	movs	r3, #1
 8002f54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d017      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f62:	4b5d      	ldr	r3, [pc, #372]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f68:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f70:	4959      	ldr	r1, [pc, #356]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f80:	d101      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002f82:	2301      	movs	r3, #1
 8002f84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d017      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f9e:	4b4e      	ldr	r3, [pc, #312]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fa4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fac:	494a      	ldr	r1, [pc, #296]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 808b 	beq.w	8003102 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fec:	4b3a      	ldr	r3, [pc, #232]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff0:	4a39      	ldr	r2, [pc, #228]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ff6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ff8:	4b37      	ldr	r3, [pc, #220]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003004:	4b35      	ldr	r3, [pc, #212]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a34      	ldr	r2, [pc, #208]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800300a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800300e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003010:	f7fd ff84 	bl	8000f1c <HAL_GetTick>
 8003014:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003016:	e008      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003018:	f7fd ff80 	bl	8000f1c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b64      	cmp	r3, #100	@ 0x64
 8003024:	d901      	bls.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e38f      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800302a:	4b2c      	ldr	r3, [pc, #176]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003036:	4b28      	ldr	r3, [pc, #160]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800303e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d035      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	429a      	cmp	r2, r3
 8003052:	d02e      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003054:	4b20      	ldr	r3, [pc, #128]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003058:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800305c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800305e:	4b1e      	ldr	r3, [pc, #120]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003062:	4a1d      	ldr	r2, [pc, #116]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003068:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800306a:	4b1b      	ldr	r3, [pc, #108]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306e:	4a1a      	ldr	r2, [pc, #104]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003070:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003074:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003076:	4a18      	ldr	r2, [pc, #96]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800307c:	4b16      	ldr	r3, [pc, #88]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800307e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b01      	cmp	r3, #1
 8003086:	d114      	bne.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fd ff48 	bl	8000f1c <HAL_GetTick>
 800308c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308e:	e00a      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003090:	f7fd ff44 	bl	8000f1c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e351      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a6:	4b0c      	ldr	r3, [pc, #48]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0ee      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030be:	d111      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80030c0:	4b05      	ldr	r3, [pc, #20]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80030cc:	4b04      	ldr	r3, [pc, #16]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030ce:	400b      	ands	r3, r1
 80030d0:	4901      	ldr	r1, [pc, #4]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
 80030d6:	e00b      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40007000 	.word	0x40007000
 80030e0:	0ffffcff 	.word	0x0ffffcff
 80030e4:	4bac      	ldr	r3, [pc, #688]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	4aab      	ldr	r2, [pc, #684]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80030ee:	6093      	str	r3, [r2, #8]
 80030f0:	4ba9      	ldr	r3, [pc, #676]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fc:	49a6      	ldr	r1, [pc, #664]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0310 	and.w	r3, r3, #16
 800310a:	2b00      	cmp	r3, #0
 800310c:	d010      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800310e:	4ba2      	ldr	r3, [pc, #648]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003110:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003114:	4aa0      	ldr	r2, [pc, #640]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003116:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800311a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800311e:	4b9e      	ldr	r3, [pc, #632]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003120:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003128:	499b      	ldr	r1, [pc, #620]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800313c:	4b96      	ldr	r3, [pc, #600]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003142:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800314a:	4993      	ldr	r1, [pc, #588]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800315e:	4b8e      	ldr	r3, [pc, #568]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003164:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800316c:	498a      	ldr	r1, [pc, #552]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00a      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003180:	4b85      	ldr	r3, [pc, #532]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003186:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800318e:	4982      	ldr	r1, [pc, #520]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031a2:	4b7d      	ldr	r3, [pc, #500]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b0:	4979      	ldr	r1, [pc, #484]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031c4:	4b74      	ldr	r3, [pc, #464]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ca:	f023 0203 	bic.w	r2, r3, #3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d2:	4971      	ldr	r1, [pc, #452]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031e6:	4b6c      	ldr	r3, [pc, #432]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ec:	f023 020c 	bic.w	r2, r3, #12
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031f4:	4968      	ldr	r1, [pc, #416]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003208:	4b63      	ldr	r3, [pc, #396]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003216:	4960      	ldr	r1, [pc, #384]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800322a:	4b5b      	ldr	r3, [pc, #364]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800322c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003230:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003238:	4957      	ldr	r1, [pc, #348]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800324c:	4b52      	ldr	r3, [pc, #328]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003252:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325a:	494f      	ldr	r1, [pc, #316]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800326e:	4b4a      	ldr	r3, [pc, #296]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003274:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327c:	4946      	ldr	r1, [pc, #280]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003290:	4b41      	ldr	r3, [pc, #260]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003296:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800329e:	493e      	ldr	r1, [pc, #248]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80032b2:	4b39      	ldr	r3, [pc, #228]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c0:	4935      	ldr	r1, [pc, #212]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032d4:	4b30      	ldr	r3, [pc, #192]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032da:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032e2:	492d      	ldr	r1, [pc, #180]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d011      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80032f6:	4b28      	ldr	r3, [pc, #160]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032fc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003304:	4924      	ldr	r1, [pc, #144]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003310:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003314:	d101      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003316:	2301      	movs	r3, #1
 8003318:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003326:	2301      	movs	r3, #1
 8003328:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003336:	4b18      	ldr	r3, [pc, #96]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800333c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003344:	4914      	ldr	r1, [pc, #80]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00b      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003358:	4b0f      	ldr	r3, [pc, #60]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800335a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800335e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003368:	490b      	ldr	r1, [pc, #44]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00f      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800337c:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003382:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800338c:	4902      	ldr	r1, [pc, #8]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003394:	e002      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00b      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033a8:	4b8a      	ldr	r3, [pc, #552]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b8:	4986      	ldr	r1, [pc, #536]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00b      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80033cc:	4b81      	ldr	r3, [pc, #516]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033d2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033dc:	497d      	ldr	r1, [pc, #500]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d006      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 80d6 	beq.w	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80033f8:	4b76      	ldr	r3, [pc, #472]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a75      	ldr	r2, [pc, #468]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003402:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003404:	f7fd fd8a 	bl	8000f1c <HAL_GetTick>
 8003408:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800340c:	f7fd fd86 	bl	8000f1c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	@ 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e195      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800341e:	4b6d      	ldr	r3, [pc, #436]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d021      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800343a:	2b00      	cmp	r3, #0
 800343c:	d11d      	bne.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800343e:	4b65      	ldr	r3, [pc, #404]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003440:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003444:	0c1b      	lsrs	r3, r3, #16
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800344c:	4b61      	ldr	r3, [pc, #388]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800344e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003452:	0e1b      	lsrs	r3, r3, #24
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	019a      	lsls	r2, r3, #6
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	041b      	lsls	r3, r3, #16
 8003464:	431a      	orrs	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	061b      	lsls	r3, r3, #24
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	071b      	lsls	r3, r3, #28
 8003472:	4958      	ldr	r1, [pc, #352]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d004      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800348e:	d00a      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003498:	2b00      	cmp	r3, #0
 800349a:	d02e      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034a4:	d129      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034a6:	4b4b      	ldr	r3, [pc, #300]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034ac:	0c1b      	lsrs	r3, r3, #16
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034b4:	4b47      	ldr	r3, [pc, #284]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034ba:	0f1b      	lsrs	r3, r3, #28
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	019a      	lsls	r2, r3, #6
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	041b      	lsls	r3, r3, #16
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	061b      	lsls	r3, r3, #24
 80034d4:	431a      	orrs	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	071b      	lsls	r3, r3, #28
 80034da:	493e      	ldr	r1, [pc, #248]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80034e2:	4b3c      	ldr	r3, [pc, #240]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034e8:	f023 021f 	bic.w	r2, r3, #31
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f0:	3b01      	subs	r3, #1
 80034f2:	4938      	ldr	r1, [pc, #224]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d01d      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003506:	4b33      	ldr	r3, [pc, #204]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003508:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800350c:	0e1b      	lsrs	r3, r3, #24
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003514:	4b2f      	ldr	r3, [pc, #188]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800351a:	0f1b      	lsrs	r3, r3, #28
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	019a      	lsls	r2, r3, #6
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	041b      	lsls	r3, r3, #16
 800352e:	431a      	orrs	r2, r3
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	061b      	lsls	r3, r3, #24
 8003534:	431a      	orrs	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	071b      	lsls	r3, r3, #28
 800353a:	4926      	ldr	r1, [pc, #152]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d011      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	019a      	lsls	r2, r3, #6
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	041b      	lsls	r3, r3, #16
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	061b      	lsls	r3, r3, #24
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	071b      	lsls	r3, r3, #28
 800356a:	491a      	ldr	r1, [pc, #104]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003572:	4b18      	ldr	r3, [pc, #96]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a17      	ldr	r2, [pc, #92]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003578:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800357c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800357e:	f7fd fccd 	bl	8000f1c <HAL_GetTick>
 8003582:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003584:	e008      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003586:	f7fd fcc9 	bl	8000f1c <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b64      	cmp	r3, #100	@ 0x64
 8003592:	d901      	bls.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e0d8      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003598:	4b0e      	ldr	r3, [pc, #56]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0f0      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	f040 80ce 	bne.w	8003748 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80035ac:	4b09      	ldr	r3, [pc, #36]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a08      	ldr	r2, [pc, #32]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b8:	f7fd fcb0 	bl	8000f1c <HAL_GetTick>
 80035bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035be:	e00b      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035c0:	f7fd fcac 	bl	8000f1c <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b64      	cmp	r3, #100	@ 0x64
 80035cc:	d904      	bls.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e0bb      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80035d2:	bf00      	nop
 80035d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035d8:	4b5e      	ldr	r3, [pc, #376]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035e4:	d0ec      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d009      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003602:	2b00      	cmp	r3, #0
 8003604:	d02e      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d12a      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800360e:	4b51      	ldr	r3, [pc, #324]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003614:	0c1b      	lsrs	r3, r3, #16
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800361c:	4b4d      	ldr	r3, [pc, #308]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003622:	0f1b      	lsrs	r3, r3, #28
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	019a      	lsls	r2, r3, #6
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	041b      	lsls	r3, r3, #16
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	061b      	lsls	r3, r3, #24
 800363c:	431a      	orrs	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	071b      	lsls	r3, r3, #28
 8003642:	4944      	ldr	r1, [pc, #272]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800364a:	4b42      	ldr	r3, [pc, #264]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800364c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003650:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003658:	3b01      	subs	r3, #1
 800365a:	021b      	lsls	r3, r3, #8
 800365c:	493d      	ldr	r1, [pc, #244]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d022      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003674:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003678:	d11d      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800367a:	4b36      	ldr	r3, [pc, #216]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800367c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003680:	0e1b      	lsrs	r3, r3, #24
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003688:	4b32      	ldr	r3, [pc, #200]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368e:	0f1b      	lsrs	r3, r3, #28
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	019a      	lsls	r2, r3, #6
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	041b      	lsls	r3, r3, #16
 80036a2:	431a      	orrs	r2, r3
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	061b      	lsls	r3, r3, #24
 80036a8:	431a      	orrs	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	071b      	lsls	r3, r3, #28
 80036ae:	4929      	ldr	r1, [pc, #164]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d028      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036c2:	4b24      	ldr	r3, [pc, #144]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c8:	0e1b      	lsrs	r3, r3, #24
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036d0:	4b20      	ldr	r3, [pc, #128]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d6:	0c1b      	lsrs	r3, r3, #16
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	019a      	lsls	r2, r3, #6
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	041b      	lsls	r3, r3, #16
 80036e8:	431a      	orrs	r2, r3
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	061b      	lsls	r3, r3, #24
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	071b      	lsls	r3, r3, #28
 80036f6:	4917      	ldr	r1, [pc, #92]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80036fe:	4b15      	ldr	r3, [pc, #84]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003700:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003704:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370c:	4911      	ldr	r1, [pc, #68]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003714:	4b0f      	ldr	r3, [pc, #60]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a0e      	ldr	r2, [pc, #56]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800371a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800371e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003720:	f7fd fbfc 	bl	8000f1c <HAL_GetTick>
 8003724:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003726:	e008      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003728:	f7fd fbf8 	bl	8000f1c <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b64      	cmp	r3, #100	@ 0x64
 8003734:	d901      	bls.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e007      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800373a:	4b06      	ldr	r3, [pc, #24]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003746:	d1ef      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3720      	adds	r7, #32
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40023800 	.word	0x40023800

08003758 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e040      	b.n	80037ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fd fa72 	bl	8000c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2224      	movs	r2, #36	@ 0x24
 8003784:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0201 	bic.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fb16 	bl	8003dd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f8af 	bl	8003908 <UART_SetConfig>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e01b      	b.n	80037ec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 fb95 	bl	8003f14 <UART_CheckIdleState>
 80037ea:	4603      	mov	r3, r0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08a      	sub	sp, #40	@ 0x28
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	4613      	mov	r3, r2
 8003802:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003808:	2b20      	cmp	r3, #32
 800380a:	d177      	bne.n	80038fc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_UART_Transmit+0x24>
 8003812:	88fb      	ldrh	r3, [r7, #6]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e070      	b.n	80038fe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2221      	movs	r2, #33	@ 0x21
 8003828:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800382a:	f7fd fb77 	bl	8000f1c <HAL_GetTick>
 800382e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	88fa      	ldrh	r2, [r7, #6]
 8003834:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	88fa      	ldrh	r2, [r7, #6]
 800383c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003848:	d108      	bne.n	800385c <HAL_UART_Transmit+0x68>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d104      	bne.n	800385c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	e003      	b.n	8003864 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003860:	2300      	movs	r3, #0
 8003862:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003864:	e02f      	b.n	80038c6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2200      	movs	r2, #0
 800386e:	2180      	movs	r1, #128	@ 0x80
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 fbf7 	bl	8004064 <UART_WaitOnFlagUntilTimeout>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d004      	beq.n	8003886 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2220      	movs	r2, #32
 8003880:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e03b      	b.n	80038fe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10b      	bne.n	80038a4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800389a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	3302      	adds	r3, #2
 80038a0:	61bb      	str	r3, [r7, #24]
 80038a2:	e007      	b.n	80038b4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	781a      	ldrb	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	3301      	adds	r3, #1
 80038b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1c9      	bne.n	8003866 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2200      	movs	r2, #0
 80038da:	2140      	movs	r1, #64	@ 0x40
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 fbc1 	bl	8004064 <UART_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d004      	beq.n	80038f2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e005      	b.n	80038fe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2220      	movs	r2, #32
 80038f6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	e000      	b.n	80038fe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80038fc:	2302      	movs	r3, #2
  }
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3720      	adds	r7, #32
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4ba6      	ldr	r3, [pc, #664]	@ (8003bcc <UART_SetConfig+0x2c4>)
 8003934:	4013      	ands	r3, r2
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	6979      	ldr	r1, [r7, #20]
 800393c:	430b      	orrs	r3, r1
 800393e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	4313      	orrs	r3, r2
 8003964:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	430a      	orrs	r2, r1
 8003978:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a94      	ldr	r2, [pc, #592]	@ (8003bd0 <UART_SetConfig+0x2c8>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d120      	bne.n	80039c6 <UART_SetConfig+0xbe>
 8003984:	4b93      	ldr	r3, [pc, #588]	@ (8003bd4 <UART_SetConfig+0x2cc>)
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	2b03      	cmp	r3, #3
 8003990:	d816      	bhi.n	80039c0 <UART_SetConfig+0xb8>
 8003992:	a201      	add	r2, pc, #4	@ (adr r2, 8003998 <UART_SetConfig+0x90>)
 8003994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003998:	080039a9 	.word	0x080039a9
 800399c:	080039b5 	.word	0x080039b5
 80039a0:	080039af 	.word	0x080039af
 80039a4:	080039bb 	.word	0x080039bb
 80039a8:	2301      	movs	r3, #1
 80039aa:	77fb      	strb	r3, [r7, #31]
 80039ac:	e150      	b.n	8003c50 <UART_SetConfig+0x348>
 80039ae:	2302      	movs	r3, #2
 80039b0:	77fb      	strb	r3, [r7, #31]
 80039b2:	e14d      	b.n	8003c50 <UART_SetConfig+0x348>
 80039b4:	2304      	movs	r3, #4
 80039b6:	77fb      	strb	r3, [r7, #31]
 80039b8:	e14a      	b.n	8003c50 <UART_SetConfig+0x348>
 80039ba:	2308      	movs	r3, #8
 80039bc:	77fb      	strb	r3, [r7, #31]
 80039be:	e147      	b.n	8003c50 <UART_SetConfig+0x348>
 80039c0:	2310      	movs	r3, #16
 80039c2:	77fb      	strb	r3, [r7, #31]
 80039c4:	e144      	b.n	8003c50 <UART_SetConfig+0x348>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a83      	ldr	r2, [pc, #524]	@ (8003bd8 <UART_SetConfig+0x2d0>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d132      	bne.n	8003a36 <UART_SetConfig+0x12e>
 80039d0:	4b80      	ldr	r3, [pc, #512]	@ (8003bd4 <UART_SetConfig+0x2cc>)
 80039d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d6:	f003 030c 	and.w	r3, r3, #12
 80039da:	2b0c      	cmp	r3, #12
 80039dc:	d828      	bhi.n	8003a30 <UART_SetConfig+0x128>
 80039de:	a201      	add	r2, pc, #4	@ (adr r2, 80039e4 <UART_SetConfig+0xdc>)
 80039e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e4:	08003a19 	.word	0x08003a19
 80039e8:	08003a31 	.word	0x08003a31
 80039ec:	08003a31 	.word	0x08003a31
 80039f0:	08003a31 	.word	0x08003a31
 80039f4:	08003a25 	.word	0x08003a25
 80039f8:	08003a31 	.word	0x08003a31
 80039fc:	08003a31 	.word	0x08003a31
 8003a00:	08003a31 	.word	0x08003a31
 8003a04:	08003a1f 	.word	0x08003a1f
 8003a08:	08003a31 	.word	0x08003a31
 8003a0c:	08003a31 	.word	0x08003a31
 8003a10:	08003a31 	.word	0x08003a31
 8003a14:	08003a2b 	.word	0x08003a2b
 8003a18:	2300      	movs	r3, #0
 8003a1a:	77fb      	strb	r3, [r7, #31]
 8003a1c:	e118      	b.n	8003c50 <UART_SetConfig+0x348>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	77fb      	strb	r3, [r7, #31]
 8003a22:	e115      	b.n	8003c50 <UART_SetConfig+0x348>
 8003a24:	2304      	movs	r3, #4
 8003a26:	77fb      	strb	r3, [r7, #31]
 8003a28:	e112      	b.n	8003c50 <UART_SetConfig+0x348>
 8003a2a:	2308      	movs	r3, #8
 8003a2c:	77fb      	strb	r3, [r7, #31]
 8003a2e:	e10f      	b.n	8003c50 <UART_SetConfig+0x348>
 8003a30:	2310      	movs	r3, #16
 8003a32:	77fb      	strb	r3, [r7, #31]
 8003a34:	e10c      	b.n	8003c50 <UART_SetConfig+0x348>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a68      	ldr	r2, [pc, #416]	@ (8003bdc <UART_SetConfig+0x2d4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d120      	bne.n	8003a82 <UART_SetConfig+0x17a>
 8003a40:	4b64      	ldr	r3, [pc, #400]	@ (8003bd4 <UART_SetConfig+0x2cc>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a46:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003a4a:	2b30      	cmp	r3, #48	@ 0x30
 8003a4c:	d013      	beq.n	8003a76 <UART_SetConfig+0x16e>
 8003a4e:	2b30      	cmp	r3, #48	@ 0x30
 8003a50:	d814      	bhi.n	8003a7c <UART_SetConfig+0x174>
 8003a52:	2b20      	cmp	r3, #32
 8003a54:	d009      	beq.n	8003a6a <UART_SetConfig+0x162>
 8003a56:	2b20      	cmp	r3, #32
 8003a58:	d810      	bhi.n	8003a7c <UART_SetConfig+0x174>
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <UART_SetConfig+0x15c>
 8003a5e:	2b10      	cmp	r3, #16
 8003a60:	d006      	beq.n	8003a70 <UART_SetConfig+0x168>
 8003a62:	e00b      	b.n	8003a7c <UART_SetConfig+0x174>
 8003a64:	2300      	movs	r3, #0
 8003a66:	77fb      	strb	r3, [r7, #31]
 8003a68:	e0f2      	b.n	8003c50 <UART_SetConfig+0x348>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	77fb      	strb	r3, [r7, #31]
 8003a6e:	e0ef      	b.n	8003c50 <UART_SetConfig+0x348>
 8003a70:	2304      	movs	r3, #4
 8003a72:	77fb      	strb	r3, [r7, #31]
 8003a74:	e0ec      	b.n	8003c50 <UART_SetConfig+0x348>
 8003a76:	2308      	movs	r3, #8
 8003a78:	77fb      	strb	r3, [r7, #31]
 8003a7a:	e0e9      	b.n	8003c50 <UART_SetConfig+0x348>
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	77fb      	strb	r3, [r7, #31]
 8003a80:	e0e6      	b.n	8003c50 <UART_SetConfig+0x348>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a56      	ldr	r2, [pc, #344]	@ (8003be0 <UART_SetConfig+0x2d8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d120      	bne.n	8003ace <UART_SetConfig+0x1c6>
 8003a8c:	4b51      	ldr	r3, [pc, #324]	@ (8003bd4 <UART_SetConfig+0x2cc>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a92:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a96:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a98:	d013      	beq.n	8003ac2 <UART_SetConfig+0x1ba>
 8003a9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a9c:	d814      	bhi.n	8003ac8 <UART_SetConfig+0x1c0>
 8003a9e:	2b80      	cmp	r3, #128	@ 0x80
 8003aa0:	d009      	beq.n	8003ab6 <UART_SetConfig+0x1ae>
 8003aa2:	2b80      	cmp	r3, #128	@ 0x80
 8003aa4:	d810      	bhi.n	8003ac8 <UART_SetConfig+0x1c0>
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <UART_SetConfig+0x1a8>
 8003aaa:	2b40      	cmp	r3, #64	@ 0x40
 8003aac:	d006      	beq.n	8003abc <UART_SetConfig+0x1b4>
 8003aae:	e00b      	b.n	8003ac8 <UART_SetConfig+0x1c0>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	77fb      	strb	r3, [r7, #31]
 8003ab4:	e0cc      	b.n	8003c50 <UART_SetConfig+0x348>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	77fb      	strb	r3, [r7, #31]
 8003aba:	e0c9      	b.n	8003c50 <UART_SetConfig+0x348>
 8003abc:	2304      	movs	r3, #4
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	e0c6      	b.n	8003c50 <UART_SetConfig+0x348>
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	77fb      	strb	r3, [r7, #31]
 8003ac6:	e0c3      	b.n	8003c50 <UART_SetConfig+0x348>
 8003ac8:	2310      	movs	r3, #16
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	e0c0      	b.n	8003c50 <UART_SetConfig+0x348>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a44      	ldr	r2, [pc, #272]	@ (8003be4 <UART_SetConfig+0x2dc>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d125      	bne.n	8003b24 <UART_SetConfig+0x21c>
 8003ad8:	4b3e      	ldr	r3, [pc, #248]	@ (8003bd4 <UART_SetConfig+0x2cc>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ae2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ae6:	d017      	beq.n	8003b18 <UART_SetConfig+0x210>
 8003ae8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aec:	d817      	bhi.n	8003b1e <UART_SetConfig+0x216>
 8003aee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003af2:	d00b      	beq.n	8003b0c <UART_SetConfig+0x204>
 8003af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003af8:	d811      	bhi.n	8003b1e <UART_SetConfig+0x216>
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <UART_SetConfig+0x1fe>
 8003afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b02:	d006      	beq.n	8003b12 <UART_SetConfig+0x20a>
 8003b04:	e00b      	b.n	8003b1e <UART_SetConfig+0x216>
 8003b06:	2300      	movs	r3, #0
 8003b08:	77fb      	strb	r3, [r7, #31]
 8003b0a:	e0a1      	b.n	8003c50 <UART_SetConfig+0x348>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	77fb      	strb	r3, [r7, #31]
 8003b10:	e09e      	b.n	8003c50 <UART_SetConfig+0x348>
 8003b12:	2304      	movs	r3, #4
 8003b14:	77fb      	strb	r3, [r7, #31]
 8003b16:	e09b      	b.n	8003c50 <UART_SetConfig+0x348>
 8003b18:	2308      	movs	r3, #8
 8003b1a:	77fb      	strb	r3, [r7, #31]
 8003b1c:	e098      	b.n	8003c50 <UART_SetConfig+0x348>
 8003b1e:	2310      	movs	r3, #16
 8003b20:	77fb      	strb	r3, [r7, #31]
 8003b22:	e095      	b.n	8003c50 <UART_SetConfig+0x348>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a2f      	ldr	r2, [pc, #188]	@ (8003be8 <UART_SetConfig+0x2e0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d125      	bne.n	8003b7a <UART_SetConfig+0x272>
 8003b2e:	4b29      	ldr	r3, [pc, #164]	@ (8003bd4 <UART_SetConfig+0x2cc>)
 8003b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b3c:	d017      	beq.n	8003b6e <UART_SetConfig+0x266>
 8003b3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b42:	d817      	bhi.n	8003b74 <UART_SetConfig+0x26c>
 8003b44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b48:	d00b      	beq.n	8003b62 <UART_SetConfig+0x25a>
 8003b4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b4e:	d811      	bhi.n	8003b74 <UART_SetConfig+0x26c>
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <UART_SetConfig+0x254>
 8003b54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b58:	d006      	beq.n	8003b68 <UART_SetConfig+0x260>
 8003b5a:	e00b      	b.n	8003b74 <UART_SetConfig+0x26c>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	77fb      	strb	r3, [r7, #31]
 8003b60:	e076      	b.n	8003c50 <UART_SetConfig+0x348>
 8003b62:	2302      	movs	r3, #2
 8003b64:	77fb      	strb	r3, [r7, #31]
 8003b66:	e073      	b.n	8003c50 <UART_SetConfig+0x348>
 8003b68:	2304      	movs	r3, #4
 8003b6a:	77fb      	strb	r3, [r7, #31]
 8003b6c:	e070      	b.n	8003c50 <UART_SetConfig+0x348>
 8003b6e:	2308      	movs	r3, #8
 8003b70:	77fb      	strb	r3, [r7, #31]
 8003b72:	e06d      	b.n	8003c50 <UART_SetConfig+0x348>
 8003b74:	2310      	movs	r3, #16
 8003b76:	77fb      	strb	r3, [r7, #31]
 8003b78:	e06a      	b.n	8003c50 <UART_SetConfig+0x348>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003bec <UART_SetConfig+0x2e4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d138      	bne.n	8003bf6 <UART_SetConfig+0x2ee>
 8003b84:	4b13      	ldr	r3, [pc, #76]	@ (8003bd4 <UART_SetConfig+0x2cc>)
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b8a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003b8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b92:	d017      	beq.n	8003bc4 <UART_SetConfig+0x2bc>
 8003b94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b98:	d82a      	bhi.n	8003bf0 <UART_SetConfig+0x2e8>
 8003b9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b9e:	d00b      	beq.n	8003bb8 <UART_SetConfig+0x2b0>
 8003ba0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ba4:	d824      	bhi.n	8003bf0 <UART_SetConfig+0x2e8>
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <UART_SetConfig+0x2aa>
 8003baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bae:	d006      	beq.n	8003bbe <UART_SetConfig+0x2b6>
 8003bb0:	e01e      	b.n	8003bf0 <UART_SetConfig+0x2e8>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	77fb      	strb	r3, [r7, #31]
 8003bb6:	e04b      	b.n	8003c50 <UART_SetConfig+0x348>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	77fb      	strb	r3, [r7, #31]
 8003bbc:	e048      	b.n	8003c50 <UART_SetConfig+0x348>
 8003bbe:	2304      	movs	r3, #4
 8003bc0:	77fb      	strb	r3, [r7, #31]
 8003bc2:	e045      	b.n	8003c50 <UART_SetConfig+0x348>
 8003bc4:	2308      	movs	r3, #8
 8003bc6:	77fb      	strb	r3, [r7, #31]
 8003bc8:	e042      	b.n	8003c50 <UART_SetConfig+0x348>
 8003bca:	bf00      	nop
 8003bcc:	efff69f3 	.word	0xefff69f3
 8003bd0:	40011000 	.word	0x40011000
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	40004400 	.word	0x40004400
 8003bdc:	40004800 	.word	0x40004800
 8003be0:	40004c00 	.word	0x40004c00
 8003be4:	40005000 	.word	0x40005000
 8003be8:	40011400 	.word	0x40011400
 8003bec:	40007800 	.word	0x40007800
 8003bf0:	2310      	movs	r3, #16
 8003bf2:	77fb      	strb	r3, [r7, #31]
 8003bf4:	e02c      	b.n	8003c50 <UART_SetConfig+0x348>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a72      	ldr	r2, [pc, #456]	@ (8003dc4 <UART_SetConfig+0x4bc>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d125      	bne.n	8003c4c <UART_SetConfig+0x344>
 8003c00:	4b71      	ldr	r3, [pc, #452]	@ (8003dc8 <UART_SetConfig+0x4c0>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c06:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003c0a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003c0e:	d017      	beq.n	8003c40 <UART_SetConfig+0x338>
 8003c10:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003c14:	d817      	bhi.n	8003c46 <UART_SetConfig+0x33e>
 8003c16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c1a:	d00b      	beq.n	8003c34 <UART_SetConfig+0x32c>
 8003c1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c20:	d811      	bhi.n	8003c46 <UART_SetConfig+0x33e>
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <UART_SetConfig+0x326>
 8003c26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c2a:	d006      	beq.n	8003c3a <UART_SetConfig+0x332>
 8003c2c:	e00b      	b.n	8003c46 <UART_SetConfig+0x33e>
 8003c2e:	2300      	movs	r3, #0
 8003c30:	77fb      	strb	r3, [r7, #31]
 8003c32:	e00d      	b.n	8003c50 <UART_SetConfig+0x348>
 8003c34:	2302      	movs	r3, #2
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	e00a      	b.n	8003c50 <UART_SetConfig+0x348>
 8003c3a:	2304      	movs	r3, #4
 8003c3c:	77fb      	strb	r3, [r7, #31]
 8003c3e:	e007      	b.n	8003c50 <UART_SetConfig+0x348>
 8003c40:	2308      	movs	r3, #8
 8003c42:	77fb      	strb	r3, [r7, #31]
 8003c44:	e004      	b.n	8003c50 <UART_SetConfig+0x348>
 8003c46:	2310      	movs	r3, #16
 8003c48:	77fb      	strb	r3, [r7, #31]
 8003c4a:	e001      	b.n	8003c50 <UART_SetConfig+0x348>
 8003c4c:	2310      	movs	r3, #16
 8003c4e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c58:	d15b      	bne.n	8003d12 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003c5a:	7ffb      	ldrb	r3, [r7, #31]
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d828      	bhi.n	8003cb2 <UART_SetConfig+0x3aa>
 8003c60:	a201      	add	r2, pc, #4	@ (adr r2, 8003c68 <UART_SetConfig+0x360>)
 8003c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c66:	bf00      	nop
 8003c68:	08003c8d 	.word	0x08003c8d
 8003c6c:	08003c95 	.word	0x08003c95
 8003c70:	08003c9d 	.word	0x08003c9d
 8003c74:	08003cb3 	.word	0x08003cb3
 8003c78:	08003ca3 	.word	0x08003ca3
 8003c7c:	08003cb3 	.word	0x08003cb3
 8003c80:	08003cb3 	.word	0x08003cb3
 8003c84:	08003cb3 	.word	0x08003cb3
 8003c88:	08003cab 	.word	0x08003cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c8c:	f7ff f914 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
 8003c90:	61b8      	str	r0, [r7, #24]
        break;
 8003c92:	e013      	b.n	8003cbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c94:	f7ff f924 	bl	8002ee0 <HAL_RCC_GetPCLK2Freq>
 8003c98:	61b8      	str	r0, [r7, #24]
        break;
 8003c9a:	e00f      	b.n	8003cbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c9c:	4b4b      	ldr	r3, [pc, #300]	@ (8003dcc <UART_SetConfig+0x4c4>)
 8003c9e:	61bb      	str	r3, [r7, #24]
        break;
 8003ca0:	e00c      	b.n	8003cbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ca2:	f7ff f837 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 8003ca6:	61b8      	str	r0, [r7, #24]
        break;
 8003ca8:	e008      	b.n	8003cbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003caa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cae:	61bb      	str	r3, [r7, #24]
        break;
 8003cb0:	e004      	b.n	8003cbc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	77bb      	strb	r3, [r7, #30]
        break;
 8003cba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d074      	beq.n	8003dac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	005a      	lsls	r2, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	085b      	lsrs	r3, r3, #1
 8003ccc:	441a      	add	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	2b0f      	cmp	r3, #15
 8003cdc:	d916      	bls.n	8003d0c <UART_SetConfig+0x404>
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ce4:	d212      	bcs.n	8003d0c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	f023 030f 	bic.w	r3, r3, #15
 8003cee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	89fb      	ldrh	r3, [r7, #14]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	89fa      	ldrh	r2, [r7, #14]
 8003d08:	60da      	str	r2, [r3, #12]
 8003d0a:	e04f      	b.n	8003dac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	77bb      	strb	r3, [r7, #30]
 8003d10:	e04c      	b.n	8003dac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d12:	7ffb      	ldrb	r3, [r7, #31]
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d828      	bhi.n	8003d6a <UART_SetConfig+0x462>
 8003d18:	a201      	add	r2, pc, #4	@ (adr r2, 8003d20 <UART_SetConfig+0x418>)
 8003d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1e:	bf00      	nop
 8003d20:	08003d45 	.word	0x08003d45
 8003d24:	08003d4d 	.word	0x08003d4d
 8003d28:	08003d55 	.word	0x08003d55
 8003d2c:	08003d6b 	.word	0x08003d6b
 8003d30:	08003d5b 	.word	0x08003d5b
 8003d34:	08003d6b 	.word	0x08003d6b
 8003d38:	08003d6b 	.word	0x08003d6b
 8003d3c:	08003d6b 	.word	0x08003d6b
 8003d40:	08003d63 	.word	0x08003d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d44:	f7ff f8b8 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
 8003d48:	61b8      	str	r0, [r7, #24]
        break;
 8003d4a:	e013      	b.n	8003d74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d4c:	f7ff f8c8 	bl	8002ee0 <HAL_RCC_GetPCLK2Freq>
 8003d50:	61b8      	str	r0, [r7, #24]
        break;
 8003d52:	e00f      	b.n	8003d74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d54:	4b1d      	ldr	r3, [pc, #116]	@ (8003dcc <UART_SetConfig+0x4c4>)
 8003d56:	61bb      	str	r3, [r7, #24]
        break;
 8003d58:	e00c      	b.n	8003d74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d5a:	f7fe ffdb 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 8003d5e:	61b8      	str	r0, [r7, #24]
        break;
 8003d60:	e008      	b.n	8003d74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d66:	61bb      	str	r3, [r7, #24]
        break;
 8003d68:	e004      	b.n	8003d74 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	77bb      	strb	r3, [r7, #30]
        break;
 8003d72:	bf00      	nop
    }

    if (pclk != 0U)
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d018      	beq.n	8003dac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	085a      	lsrs	r2, r3, #1
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	441a      	add	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	2b0f      	cmp	r3, #15
 8003d92:	d909      	bls.n	8003da8 <UART_SetConfig+0x4a0>
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d9a:	d205      	bcs.n	8003da8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60da      	str	r2, [r3, #12]
 8003da6:	e001      	b.n	8003dac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003db8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3720      	adds	r7, #32
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40007c00 	.word	0x40007c00
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	00f42400 	.word	0x00f42400

08003dd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e42:	f003 0304 	and.w	r3, r3, #4
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e64:	f003 0310 	and.w	r3, r3, #16
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e86:	f003 0320 	and.w	r3, r3, #32
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d01a      	beq.n	8003ee6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ece:	d10a      	bne.n	8003ee6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	605a      	str	r2, [r3, #4]
  }
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b098      	sub	sp, #96	@ 0x60
 8003f18:	af02      	add	r7, sp, #8
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f24:	f7fc fffa 	bl	8000f1c <HAL_GetTick>
 8003f28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0308 	and.w	r3, r3, #8
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d12e      	bne.n	8003f96 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f40:	2200      	movs	r2, #0
 8003f42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f88c 	bl	8004064 <UART_WaitOnFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d021      	beq.n	8003f96 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f5a:	e853 3f00 	ldrex	r3, [r3]
 8003f5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f66:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f70:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f72:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f78:	e841 2300 	strex	r3, r2, [r1]
 8003f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e6      	bne.n	8003f52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2220      	movs	r2, #32
 8003f88:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e062      	b.n	800405c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d149      	bne.n	8004038 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fa4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fac:	2200      	movs	r2, #0
 8003fae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f856 	bl	8004064 <UART_WaitOnFlagUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d03c      	beq.n	8004038 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc6:	e853 3f00 	ldrex	r3, [r3]
 8003fca:	623b      	str	r3, [r7, #32]
   return(result);
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fde:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fe4:	e841 2300 	strex	r3, r2, [r1]
 8003fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1e6      	bne.n	8003fbe <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	e853 3f00 	ldrex	r3, [r3]
 8003ffe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0301 	bic.w	r3, r3, #1
 8004006:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3308      	adds	r3, #8
 800400e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004010:	61fa      	str	r2, [r7, #28]
 8004012:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004014:	69b9      	ldr	r1, [r7, #24]
 8004016:	69fa      	ldr	r2, [r7, #28]
 8004018:	e841 2300 	strex	r3, r2, [r1]
 800401c:	617b      	str	r3, [r7, #20]
   return(result);
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1e5      	bne.n	8003ff0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e011      	b.n	800405c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2220      	movs	r2, #32
 800403c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3758      	adds	r7, #88	@ 0x58
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	4613      	mov	r3, r2
 8004072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004074:	e04f      	b.n	8004116 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407c:	d04b      	beq.n	8004116 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800407e:	f7fc ff4d 	bl	8000f1c <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	429a      	cmp	r2, r3
 800408c:	d302      	bcc.n	8004094 <UART_WaitOnFlagUntilTimeout+0x30>
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e04e      	b.n	8004136 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0304 	and.w	r3, r3, #4
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d037      	beq.n	8004116 <UART_WaitOnFlagUntilTimeout+0xb2>
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b80      	cmp	r3, #128	@ 0x80
 80040aa:	d034      	beq.n	8004116 <UART_WaitOnFlagUntilTimeout+0xb2>
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b40      	cmp	r3, #64	@ 0x40
 80040b0:	d031      	beq.n	8004116 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d110      	bne.n	80040e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2208      	movs	r2, #8
 80040c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 f838 	bl	800413e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2208      	movs	r2, #8
 80040d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e029      	b.n	8004136 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040f0:	d111      	bne.n	8004116 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f81e 	bl	800413e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2220      	movs	r2, #32
 8004106:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e00f      	b.n	8004136 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69da      	ldr	r2, [r3, #28]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4013      	ands	r3, r2
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	429a      	cmp	r2, r3
 8004124:	bf0c      	ite	eq
 8004126:	2301      	moveq	r3, #1
 8004128:	2300      	movne	r3, #0
 800412a:	b2db      	uxtb	r3, r3
 800412c:	461a      	mov	r2, r3
 800412e:	79fb      	ldrb	r3, [r7, #7]
 8004130:	429a      	cmp	r2, r3
 8004132:	d0a0      	beq.n	8004076 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800413e:	b480      	push	{r7}
 8004140:	b095      	sub	sp, #84	@ 0x54
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800414e:	e853 3f00 	ldrex	r3, [r3]
 8004152:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004156:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800415a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	461a      	mov	r2, r3
 8004162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004164:	643b      	str	r3, [r7, #64]	@ 0x40
 8004166:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004168:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800416a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800416c:	e841 2300 	strex	r3, r2, [r1]
 8004170:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1e6      	bne.n	8004146 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3308      	adds	r3, #8
 800417e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	e853 3f00 	ldrex	r3, [r3]
 8004186:	61fb      	str	r3, [r7, #28]
   return(result);
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	f023 0301 	bic.w	r3, r3, #1
 800418e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3308      	adds	r3, #8
 8004196:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004198:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800419a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800419e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041a0:	e841 2300 	strex	r3, r2, [r1]
 80041a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e5      	bne.n	8004178 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d118      	bne.n	80041e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f023 0310 	bic.w	r3, r3, #16
 80041c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041d2:	61bb      	str	r3, [r7, #24]
 80041d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d6:	6979      	ldr	r1, [r7, #20]
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	e841 2300 	strex	r3, r2, [r1]
 80041de:	613b      	str	r3, [r7, #16]
   return(result);
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1e6      	bne.n	80041b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80041fa:	bf00      	nop
 80041fc:	3754      	adds	r7, #84	@ 0x54
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
	...

08004208 <siprintf>:
 8004208:	b40e      	push	{r1, r2, r3}
 800420a:	b500      	push	{lr}
 800420c:	b09c      	sub	sp, #112	@ 0x70
 800420e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004210:	9002      	str	r0, [sp, #8]
 8004212:	9006      	str	r0, [sp, #24]
 8004214:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004218:	4809      	ldr	r0, [pc, #36]	@ (8004240 <siprintf+0x38>)
 800421a:	9107      	str	r1, [sp, #28]
 800421c:	9104      	str	r1, [sp, #16]
 800421e:	4909      	ldr	r1, [pc, #36]	@ (8004244 <siprintf+0x3c>)
 8004220:	f853 2b04 	ldr.w	r2, [r3], #4
 8004224:	9105      	str	r1, [sp, #20]
 8004226:	6800      	ldr	r0, [r0, #0]
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	a902      	add	r1, sp, #8
 800422c:	f000 f994 	bl	8004558 <_svfiprintf_r>
 8004230:	9b02      	ldr	r3, [sp, #8]
 8004232:	2200      	movs	r2, #0
 8004234:	701a      	strb	r2, [r3, #0]
 8004236:	b01c      	add	sp, #112	@ 0x70
 8004238:	f85d eb04 	ldr.w	lr, [sp], #4
 800423c:	b003      	add	sp, #12
 800423e:	4770      	bx	lr
 8004240:	2000000c 	.word	0x2000000c
 8004244:	ffff0208 	.word	0xffff0208

08004248 <memset>:
 8004248:	4402      	add	r2, r0
 800424a:	4603      	mov	r3, r0
 800424c:	4293      	cmp	r3, r2
 800424e:	d100      	bne.n	8004252 <memset+0xa>
 8004250:	4770      	bx	lr
 8004252:	f803 1b01 	strb.w	r1, [r3], #1
 8004256:	e7f9      	b.n	800424c <memset+0x4>

08004258 <__errno>:
 8004258:	4b01      	ldr	r3, [pc, #4]	@ (8004260 <__errno+0x8>)
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	2000000c 	.word	0x2000000c

08004264 <__libc_init_array>:
 8004264:	b570      	push	{r4, r5, r6, lr}
 8004266:	4d0d      	ldr	r5, [pc, #52]	@ (800429c <__libc_init_array+0x38>)
 8004268:	4c0d      	ldr	r4, [pc, #52]	@ (80042a0 <__libc_init_array+0x3c>)
 800426a:	1b64      	subs	r4, r4, r5
 800426c:	10a4      	asrs	r4, r4, #2
 800426e:	2600      	movs	r6, #0
 8004270:	42a6      	cmp	r6, r4
 8004272:	d109      	bne.n	8004288 <__libc_init_array+0x24>
 8004274:	4d0b      	ldr	r5, [pc, #44]	@ (80042a4 <__libc_init_array+0x40>)
 8004276:	4c0c      	ldr	r4, [pc, #48]	@ (80042a8 <__libc_init_array+0x44>)
 8004278:	f000 fc66 	bl	8004b48 <_init>
 800427c:	1b64      	subs	r4, r4, r5
 800427e:	10a4      	asrs	r4, r4, #2
 8004280:	2600      	movs	r6, #0
 8004282:	42a6      	cmp	r6, r4
 8004284:	d105      	bne.n	8004292 <__libc_init_array+0x2e>
 8004286:	bd70      	pop	{r4, r5, r6, pc}
 8004288:	f855 3b04 	ldr.w	r3, [r5], #4
 800428c:	4798      	blx	r3
 800428e:	3601      	adds	r6, #1
 8004290:	e7ee      	b.n	8004270 <__libc_init_array+0xc>
 8004292:	f855 3b04 	ldr.w	r3, [r5], #4
 8004296:	4798      	blx	r3
 8004298:	3601      	adds	r6, #1
 800429a:	e7f2      	b.n	8004282 <__libc_init_array+0x1e>
 800429c:	08004c40 	.word	0x08004c40
 80042a0:	08004c40 	.word	0x08004c40
 80042a4:	08004c40 	.word	0x08004c40
 80042a8:	08004c44 	.word	0x08004c44

080042ac <__retarget_lock_acquire_recursive>:
 80042ac:	4770      	bx	lr

080042ae <__retarget_lock_release_recursive>:
 80042ae:	4770      	bx	lr

080042b0 <_free_r>:
 80042b0:	b538      	push	{r3, r4, r5, lr}
 80042b2:	4605      	mov	r5, r0
 80042b4:	2900      	cmp	r1, #0
 80042b6:	d041      	beq.n	800433c <_free_r+0x8c>
 80042b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042bc:	1f0c      	subs	r4, r1, #4
 80042be:	2b00      	cmp	r3, #0
 80042c0:	bfb8      	it	lt
 80042c2:	18e4      	addlt	r4, r4, r3
 80042c4:	f000 f8e0 	bl	8004488 <__malloc_lock>
 80042c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004340 <_free_r+0x90>)
 80042ca:	6813      	ldr	r3, [r2, #0]
 80042cc:	b933      	cbnz	r3, 80042dc <_free_r+0x2c>
 80042ce:	6063      	str	r3, [r4, #4]
 80042d0:	6014      	str	r4, [r2, #0]
 80042d2:	4628      	mov	r0, r5
 80042d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042d8:	f000 b8dc 	b.w	8004494 <__malloc_unlock>
 80042dc:	42a3      	cmp	r3, r4
 80042de:	d908      	bls.n	80042f2 <_free_r+0x42>
 80042e0:	6820      	ldr	r0, [r4, #0]
 80042e2:	1821      	adds	r1, r4, r0
 80042e4:	428b      	cmp	r3, r1
 80042e6:	bf01      	itttt	eq
 80042e8:	6819      	ldreq	r1, [r3, #0]
 80042ea:	685b      	ldreq	r3, [r3, #4]
 80042ec:	1809      	addeq	r1, r1, r0
 80042ee:	6021      	streq	r1, [r4, #0]
 80042f0:	e7ed      	b.n	80042ce <_free_r+0x1e>
 80042f2:	461a      	mov	r2, r3
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	b10b      	cbz	r3, 80042fc <_free_r+0x4c>
 80042f8:	42a3      	cmp	r3, r4
 80042fa:	d9fa      	bls.n	80042f2 <_free_r+0x42>
 80042fc:	6811      	ldr	r1, [r2, #0]
 80042fe:	1850      	adds	r0, r2, r1
 8004300:	42a0      	cmp	r0, r4
 8004302:	d10b      	bne.n	800431c <_free_r+0x6c>
 8004304:	6820      	ldr	r0, [r4, #0]
 8004306:	4401      	add	r1, r0
 8004308:	1850      	adds	r0, r2, r1
 800430a:	4283      	cmp	r3, r0
 800430c:	6011      	str	r1, [r2, #0]
 800430e:	d1e0      	bne.n	80042d2 <_free_r+0x22>
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	6053      	str	r3, [r2, #4]
 8004316:	4408      	add	r0, r1
 8004318:	6010      	str	r0, [r2, #0]
 800431a:	e7da      	b.n	80042d2 <_free_r+0x22>
 800431c:	d902      	bls.n	8004324 <_free_r+0x74>
 800431e:	230c      	movs	r3, #12
 8004320:	602b      	str	r3, [r5, #0]
 8004322:	e7d6      	b.n	80042d2 <_free_r+0x22>
 8004324:	6820      	ldr	r0, [r4, #0]
 8004326:	1821      	adds	r1, r4, r0
 8004328:	428b      	cmp	r3, r1
 800432a:	bf04      	itt	eq
 800432c:	6819      	ldreq	r1, [r3, #0]
 800432e:	685b      	ldreq	r3, [r3, #4]
 8004330:	6063      	str	r3, [r4, #4]
 8004332:	bf04      	itt	eq
 8004334:	1809      	addeq	r1, r1, r0
 8004336:	6021      	streq	r1, [r4, #0]
 8004338:	6054      	str	r4, [r2, #4]
 800433a:	e7ca      	b.n	80042d2 <_free_r+0x22>
 800433c:	bd38      	pop	{r3, r4, r5, pc}
 800433e:	bf00      	nop
 8004340:	200003b8 	.word	0x200003b8

08004344 <sbrk_aligned>:
 8004344:	b570      	push	{r4, r5, r6, lr}
 8004346:	4e0f      	ldr	r6, [pc, #60]	@ (8004384 <sbrk_aligned+0x40>)
 8004348:	460c      	mov	r4, r1
 800434a:	6831      	ldr	r1, [r6, #0]
 800434c:	4605      	mov	r5, r0
 800434e:	b911      	cbnz	r1, 8004356 <sbrk_aligned+0x12>
 8004350:	f000 fba6 	bl	8004aa0 <_sbrk_r>
 8004354:	6030      	str	r0, [r6, #0]
 8004356:	4621      	mov	r1, r4
 8004358:	4628      	mov	r0, r5
 800435a:	f000 fba1 	bl	8004aa0 <_sbrk_r>
 800435e:	1c43      	adds	r3, r0, #1
 8004360:	d103      	bne.n	800436a <sbrk_aligned+0x26>
 8004362:	f04f 34ff 	mov.w	r4, #4294967295
 8004366:	4620      	mov	r0, r4
 8004368:	bd70      	pop	{r4, r5, r6, pc}
 800436a:	1cc4      	adds	r4, r0, #3
 800436c:	f024 0403 	bic.w	r4, r4, #3
 8004370:	42a0      	cmp	r0, r4
 8004372:	d0f8      	beq.n	8004366 <sbrk_aligned+0x22>
 8004374:	1a21      	subs	r1, r4, r0
 8004376:	4628      	mov	r0, r5
 8004378:	f000 fb92 	bl	8004aa0 <_sbrk_r>
 800437c:	3001      	adds	r0, #1
 800437e:	d1f2      	bne.n	8004366 <sbrk_aligned+0x22>
 8004380:	e7ef      	b.n	8004362 <sbrk_aligned+0x1e>
 8004382:	bf00      	nop
 8004384:	200003b4 	.word	0x200003b4

08004388 <_malloc_r>:
 8004388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800438c:	1ccd      	adds	r5, r1, #3
 800438e:	f025 0503 	bic.w	r5, r5, #3
 8004392:	3508      	adds	r5, #8
 8004394:	2d0c      	cmp	r5, #12
 8004396:	bf38      	it	cc
 8004398:	250c      	movcc	r5, #12
 800439a:	2d00      	cmp	r5, #0
 800439c:	4606      	mov	r6, r0
 800439e:	db01      	blt.n	80043a4 <_malloc_r+0x1c>
 80043a0:	42a9      	cmp	r1, r5
 80043a2:	d904      	bls.n	80043ae <_malloc_r+0x26>
 80043a4:	230c      	movs	r3, #12
 80043a6:	6033      	str	r3, [r6, #0]
 80043a8:	2000      	movs	r0, #0
 80043aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004484 <_malloc_r+0xfc>
 80043b2:	f000 f869 	bl	8004488 <__malloc_lock>
 80043b6:	f8d8 3000 	ldr.w	r3, [r8]
 80043ba:	461c      	mov	r4, r3
 80043bc:	bb44      	cbnz	r4, 8004410 <_malloc_r+0x88>
 80043be:	4629      	mov	r1, r5
 80043c0:	4630      	mov	r0, r6
 80043c2:	f7ff ffbf 	bl	8004344 <sbrk_aligned>
 80043c6:	1c43      	adds	r3, r0, #1
 80043c8:	4604      	mov	r4, r0
 80043ca:	d158      	bne.n	800447e <_malloc_r+0xf6>
 80043cc:	f8d8 4000 	ldr.w	r4, [r8]
 80043d0:	4627      	mov	r7, r4
 80043d2:	2f00      	cmp	r7, #0
 80043d4:	d143      	bne.n	800445e <_malloc_r+0xd6>
 80043d6:	2c00      	cmp	r4, #0
 80043d8:	d04b      	beq.n	8004472 <_malloc_r+0xea>
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	4639      	mov	r1, r7
 80043de:	4630      	mov	r0, r6
 80043e0:	eb04 0903 	add.w	r9, r4, r3
 80043e4:	f000 fb5c 	bl	8004aa0 <_sbrk_r>
 80043e8:	4581      	cmp	r9, r0
 80043ea:	d142      	bne.n	8004472 <_malloc_r+0xea>
 80043ec:	6821      	ldr	r1, [r4, #0]
 80043ee:	1a6d      	subs	r5, r5, r1
 80043f0:	4629      	mov	r1, r5
 80043f2:	4630      	mov	r0, r6
 80043f4:	f7ff ffa6 	bl	8004344 <sbrk_aligned>
 80043f8:	3001      	adds	r0, #1
 80043fa:	d03a      	beq.n	8004472 <_malloc_r+0xea>
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	442b      	add	r3, r5
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	f8d8 3000 	ldr.w	r3, [r8]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	bb62      	cbnz	r2, 8004464 <_malloc_r+0xdc>
 800440a:	f8c8 7000 	str.w	r7, [r8]
 800440e:	e00f      	b.n	8004430 <_malloc_r+0xa8>
 8004410:	6822      	ldr	r2, [r4, #0]
 8004412:	1b52      	subs	r2, r2, r5
 8004414:	d420      	bmi.n	8004458 <_malloc_r+0xd0>
 8004416:	2a0b      	cmp	r2, #11
 8004418:	d917      	bls.n	800444a <_malloc_r+0xc2>
 800441a:	1961      	adds	r1, r4, r5
 800441c:	42a3      	cmp	r3, r4
 800441e:	6025      	str	r5, [r4, #0]
 8004420:	bf18      	it	ne
 8004422:	6059      	strne	r1, [r3, #4]
 8004424:	6863      	ldr	r3, [r4, #4]
 8004426:	bf08      	it	eq
 8004428:	f8c8 1000 	streq.w	r1, [r8]
 800442c:	5162      	str	r2, [r4, r5]
 800442e:	604b      	str	r3, [r1, #4]
 8004430:	4630      	mov	r0, r6
 8004432:	f000 f82f 	bl	8004494 <__malloc_unlock>
 8004436:	f104 000b 	add.w	r0, r4, #11
 800443a:	1d23      	adds	r3, r4, #4
 800443c:	f020 0007 	bic.w	r0, r0, #7
 8004440:	1ac2      	subs	r2, r0, r3
 8004442:	bf1c      	itt	ne
 8004444:	1a1b      	subne	r3, r3, r0
 8004446:	50a3      	strne	r3, [r4, r2]
 8004448:	e7af      	b.n	80043aa <_malloc_r+0x22>
 800444a:	6862      	ldr	r2, [r4, #4]
 800444c:	42a3      	cmp	r3, r4
 800444e:	bf0c      	ite	eq
 8004450:	f8c8 2000 	streq.w	r2, [r8]
 8004454:	605a      	strne	r2, [r3, #4]
 8004456:	e7eb      	b.n	8004430 <_malloc_r+0xa8>
 8004458:	4623      	mov	r3, r4
 800445a:	6864      	ldr	r4, [r4, #4]
 800445c:	e7ae      	b.n	80043bc <_malloc_r+0x34>
 800445e:	463c      	mov	r4, r7
 8004460:	687f      	ldr	r7, [r7, #4]
 8004462:	e7b6      	b.n	80043d2 <_malloc_r+0x4a>
 8004464:	461a      	mov	r2, r3
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	42a3      	cmp	r3, r4
 800446a:	d1fb      	bne.n	8004464 <_malloc_r+0xdc>
 800446c:	2300      	movs	r3, #0
 800446e:	6053      	str	r3, [r2, #4]
 8004470:	e7de      	b.n	8004430 <_malloc_r+0xa8>
 8004472:	230c      	movs	r3, #12
 8004474:	6033      	str	r3, [r6, #0]
 8004476:	4630      	mov	r0, r6
 8004478:	f000 f80c 	bl	8004494 <__malloc_unlock>
 800447c:	e794      	b.n	80043a8 <_malloc_r+0x20>
 800447e:	6005      	str	r5, [r0, #0]
 8004480:	e7d6      	b.n	8004430 <_malloc_r+0xa8>
 8004482:	bf00      	nop
 8004484:	200003b8 	.word	0x200003b8

08004488 <__malloc_lock>:
 8004488:	4801      	ldr	r0, [pc, #4]	@ (8004490 <__malloc_lock+0x8>)
 800448a:	f7ff bf0f 	b.w	80042ac <__retarget_lock_acquire_recursive>
 800448e:	bf00      	nop
 8004490:	200003b0 	.word	0x200003b0

08004494 <__malloc_unlock>:
 8004494:	4801      	ldr	r0, [pc, #4]	@ (800449c <__malloc_unlock+0x8>)
 8004496:	f7ff bf0a 	b.w	80042ae <__retarget_lock_release_recursive>
 800449a:	bf00      	nop
 800449c:	200003b0 	.word	0x200003b0

080044a0 <__ssputs_r>:
 80044a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a4:	688e      	ldr	r6, [r1, #8]
 80044a6:	461f      	mov	r7, r3
 80044a8:	42be      	cmp	r6, r7
 80044aa:	680b      	ldr	r3, [r1, #0]
 80044ac:	4682      	mov	sl, r0
 80044ae:	460c      	mov	r4, r1
 80044b0:	4690      	mov	r8, r2
 80044b2:	d82d      	bhi.n	8004510 <__ssputs_r+0x70>
 80044b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80044bc:	d026      	beq.n	800450c <__ssputs_r+0x6c>
 80044be:	6965      	ldr	r5, [r4, #20]
 80044c0:	6909      	ldr	r1, [r1, #16]
 80044c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044c6:	eba3 0901 	sub.w	r9, r3, r1
 80044ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044ce:	1c7b      	adds	r3, r7, #1
 80044d0:	444b      	add	r3, r9
 80044d2:	106d      	asrs	r5, r5, #1
 80044d4:	429d      	cmp	r5, r3
 80044d6:	bf38      	it	cc
 80044d8:	461d      	movcc	r5, r3
 80044da:	0553      	lsls	r3, r2, #21
 80044dc:	d527      	bpl.n	800452e <__ssputs_r+0x8e>
 80044de:	4629      	mov	r1, r5
 80044e0:	f7ff ff52 	bl	8004388 <_malloc_r>
 80044e4:	4606      	mov	r6, r0
 80044e6:	b360      	cbz	r0, 8004542 <__ssputs_r+0xa2>
 80044e8:	6921      	ldr	r1, [r4, #16]
 80044ea:	464a      	mov	r2, r9
 80044ec:	f000 fae8 	bl	8004ac0 <memcpy>
 80044f0:	89a3      	ldrh	r3, [r4, #12]
 80044f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80044f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044fa:	81a3      	strh	r3, [r4, #12]
 80044fc:	6126      	str	r6, [r4, #16]
 80044fe:	6165      	str	r5, [r4, #20]
 8004500:	444e      	add	r6, r9
 8004502:	eba5 0509 	sub.w	r5, r5, r9
 8004506:	6026      	str	r6, [r4, #0]
 8004508:	60a5      	str	r5, [r4, #8]
 800450a:	463e      	mov	r6, r7
 800450c:	42be      	cmp	r6, r7
 800450e:	d900      	bls.n	8004512 <__ssputs_r+0x72>
 8004510:	463e      	mov	r6, r7
 8004512:	6820      	ldr	r0, [r4, #0]
 8004514:	4632      	mov	r2, r6
 8004516:	4641      	mov	r1, r8
 8004518:	f000 faa8 	bl	8004a6c <memmove>
 800451c:	68a3      	ldr	r3, [r4, #8]
 800451e:	1b9b      	subs	r3, r3, r6
 8004520:	60a3      	str	r3, [r4, #8]
 8004522:	6823      	ldr	r3, [r4, #0]
 8004524:	4433      	add	r3, r6
 8004526:	6023      	str	r3, [r4, #0]
 8004528:	2000      	movs	r0, #0
 800452a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800452e:	462a      	mov	r2, r5
 8004530:	f000 fad4 	bl	8004adc <_realloc_r>
 8004534:	4606      	mov	r6, r0
 8004536:	2800      	cmp	r0, #0
 8004538:	d1e0      	bne.n	80044fc <__ssputs_r+0x5c>
 800453a:	6921      	ldr	r1, [r4, #16]
 800453c:	4650      	mov	r0, sl
 800453e:	f7ff feb7 	bl	80042b0 <_free_r>
 8004542:	230c      	movs	r3, #12
 8004544:	f8ca 3000 	str.w	r3, [sl]
 8004548:	89a3      	ldrh	r3, [r4, #12]
 800454a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800454e:	81a3      	strh	r3, [r4, #12]
 8004550:	f04f 30ff 	mov.w	r0, #4294967295
 8004554:	e7e9      	b.n	800452a <__ssputs_r+0x8a>
	...

08004558 <_svfiprintf_r>:
 8004558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800455c:	4698      	mov	r8, r3
 800455e:	898b      	ldrh	r3, [r1, #12]
 8004560:	061b      	lsls	r3, r3, #24
 8004562:	b09d      	sub	sp, #116	@ 0x74
 8004564:	4607      	mov	r7, r0
 8004566:	460d      	mov	r5, r1
 8004568:	4614      	mov	r4, r2
 800456a:	d510      	bpl.n	800458e <_svfiprintf_r+0x36>
 800456c:	690b      	ldr	r3, [r1, #16]
 800456e:	b973      	cbnz	r3, 800458e <_svfiprintf_r+0x36>
 8004570:	2140      	movs	r1, #64	@ 0x40
 8004572:	f7ff ff09 	bl	8004388 <_malloc_r>
 8004576:	6028      	str	r0, [r5, #0]
 8004578:	6128      	str	r0, [r5, #16]
 800457a:	b930      	cbnz	r0, 800458a <_svfiprintf_r+0x32>
 800457c:	230c      	movs	r3, #12
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	f04f 30ff 	mov.w	r0, #4294967295
 8004584:	b01d      	add	sp, #116	@ 0x74
 8004586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800458a:	2340      	movs	r3, #64	@ 0x40
 800458c:	616b      	str	r3, [r5, #20]
 800458e:	2300      	movs	r3, #0
 8004590:	9309      	str	r3, [sp, #36]	@ 0x24
 8004592:	2320      	movs	r3, #32
 8004594:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004598:	f8cd 800c 	str.w	r8, [sp, #12]
 800459c:	2330      	movs	r3, #48	@ 0x30
 800459e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800473c <_svfiprintf_r+0x1e4>
 80045a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80045a6:	f04f 0901 	mov.w	r9, #1
 80045aa:	4623      	mov	r3, r4
 80045ac:	469a      	mov	sl, r3
 80045ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045b2:	b10a      	cbz	r2, 80045b8 <_svfiprintf_r+0x60>
 80045b4:	2a25      	cmp	r2, #37	@ 0x25
 80045b6:	d1f9      	bne.n	80045ac <_svfiprintf_r+0x54>
 80045b8:	ebba 0b04 	subs.w	fp, sl, r4
 80045bc:	d00b      	beq.n	80045d6 <_svfiprintf_r+0x7e>
 80045be:	465b      	mov	r3, fp
 80045c0:	4622      	mov	r2, r4
 80045c2:	4629      	mov	r1, r5
 80045c4:	4638      	mov	r0, r7
 80045c6:	f7ff ff6b 	bl	80044a0 <__ssputs_r>
 80045ca:	3001      	adds	r0, #1
 80045cc:	f000 80a7 	beq.w	800471e <_svfiprintf_r+0x1c6>
 80045d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045d2:	445a      	add	r2, fp
 80045d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80045d6:	f89a 3000 	ldrb.w	r3, [sl]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 809f 	beq.w	800471e <_svfiprintf_r+0x1c6>
 80045e0:	2300      	movs	r3, #0
 80045e2:	f04f 32ff 	mov.w	r2, #4294967295
 80045e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045ea:	f10a 0a01 	add.w	sl, sl, #1
 80045ee:	9304      	str	r3, [sp, #16]
 80045f0:	9307      	str	r3, [sp, #28]
 80045f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80045f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80045f8:	4654      	mov	r4, sl
 80045fa:	2205      	movs	r2, #5
 80045fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004600:	484e      	ldr	r0, [pc, #312]	@ (800473c <_svfiprintf_r+0x1e4>)
 8004602:	f7fb fe25 	bl	8000250 <memchr>
 8004606:	9a04      	ldr	r2, [sp, #16]
 8004608:	b9d8      	cbnz	r0, 8004642 <_svfiprintf_r+0xea>
 800460a:	06d0      	lsls	r0, r2, #27
 800460c:	bf44      	itt	mi
 800460e:	2320      	movmi	r3, #32
 8004610:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004614:	0711      	lsls	r1, r2, #28
 8004616:	bf44      	itt	mi
 8004618:	232b      	movmi	r3, #43	@ 0x2b
 800461a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800461e:	f89a 3000 	ldrb.w	r3, [sl]
 8004622:	2b2a      	cmp	r3, #42	@ 0x2a
 8004624:	d015      	beq.n	8004652 <_svfiprintf_r+0xfa>
 8004626:	9a07      	ldr	r2, [sp, #28]
 8004628:	4654      	mov	r4, sl
 800462a:	2000      	movs	r0, #0
 800462c:	f04f 0c0a 	mov.w	ip, #10
 8004630:	4621      	mov	r1, r4
 8004632:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004636:	3b30      	subs	r3, #48	@ 0x30
 8004638:	2b09      	cmp	r3, #9
 800463a:	d94b      	bls.n	80046d4 <_svfiprintf_r+0x17c>
 800463c:	b1b0      	cbz	r0, 800466c <_svfiprintf_r+0x114>
 800463e:	9207      	str	r2, [sp, #28]
 8004640:	e014      	b.n	800466c <_svfiprintf_r+0x114>
 8004642:	eba0 0308 	sub.w	r3, r0, r8
 8004646:	fa09 f303 	lsl.w	r3, r9, r3
 800464a:	4313      	orrs	r3, r2
 800464c:	9304      	str	r3, [sp, #16]
 800464e:	46a2      	mov	sl, r4
 8004650:	e7d2      	b.n	80045f8 <_svfiprintf_r+0xa0>
 8004652:	9b03      	ldr	r3, [sp, #12]
 8004654:	1d19      	adds	r1, r3, #4
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	9103      	str	r1, [sp, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	bfbb      	ittet	lt
 800465e:	425b      	neglt	r3, r3
 8004660:	f042 0202 	orrlt.w	r2, r2, #2
 8004664:	9307      	strge	r3, [sp, #28]
 8004666:	9307      	strlt	r3, [sp, #28]
 8004668:	bfb8      	it	lt
 800466a:	9204      	strlt	r2, [sp, #16]
 800466c:	7823      	ldrb	r3, [r4, #0]
 800466e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004670:	d10a      	bne.n	8004688 <_svfiprintf_r+0x130>
 8004672:	7863      	ldrb	r3, [r4, #1]
 8004674:	2b2a      	cmp	r3, #42	@ 0x2a
 8004676:	d132      	bne.n	80046de <_svfiprintf_r+0x186>
 8004678:	9b03      	ldr	r3, [sp, #12]
 800467a:	1d1a      	adds	r2, r3, #4
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	9203      	str	r2, [sp, #12]
 8004680:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004684:	3402      	adds	r4, #2
 8004686:	9305      	str	r3, [sp, #20]
 8004688:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800474c <_svfiprintf_r+0x1f4>
 800468c:	7821      	ldrb	r1, [r4, #0]
 800468e:	2203      	movs	r2, #3
 8004690:	4650      	mov	r0, sl
 8004692:	f7fb fddd 	bl	8000250 <memchr>
 8004696:	b138      	cbz	r0, 80046a8 <_svfiprintf_r+0x150>
 8004698:	9b04      	ldr	r3, [sp, #16]
 800469a:	eba0 000a 	sub.w	r0, r0, sl
 800469e:	2240      	movs	r2, #64	@ 0x40
 80046a0:	4082      	lsls	r2, r0
 80046a2:	4313      	orrs	r3, r2
 80046a4:	3401      	adds	r4, #1
 80046a6:	9304      	str	r3, [sp, #16]
 80046a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046ac:	4824      	ldr	r0, [pc, #144]	@ (8004740 <_svfiprintf_r+0x1e8>)
 80046ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80046b2:	2206      	movs	r2, #6
 80046b4:	f7fb fdcc 	bl	8000250 <memchr>
 80046b8:	2800      	cmp	r0, #0
 80046ba:	d036      	beq.n	800472a <_svfiprintf_r+0x1d2>
 80046bc:	4b21      	ldr	r3, [pc, #132]	@ (8004744 <_svfiprintf_r+0x1ec>)
 80046be:	bb1b      	cbnz	r3, 8004708 <_svfiprintf_r+0x1b0>
 80046c0:	9b03      	ldr	r3, [sp, #12]
 80046c2:	3307      	adds	r3, #7
 80046c4:	f023 0307 	bic.w	r3, r3, #7
 80046c8:	3308      	adds	r3, #8
 80046ca:	9303      	str	r3, [sp, #12]
 80046cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046ce:	4433      	add	r3, r6
 80046d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80046d2:	e76a      	b.n	80045aa <_svfiprintf_r+0x52>
 80046d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80046d8:	460c      	mov	r4, r1
 80046da:	2001      	movs	r0, #1
 80046dc:	e7a8      	b.n	8004630 <_svfiprintf_r+0xd8>
 80046de:	2300      	movs	r3, #0
 80046e0:	3401      	adds	r4, #1
 80046e2:	9305      	str	r3, [sp, #20]
 80046e4:	4619      	mov	r1, r3
 80046e6:	f04f 0c0a 	mov.w	ip, #10
 80046ea:	4620      	mov	r0, r4
 80046ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046f0:	3a30      	subs	r2, #48	@ 0x30
 80046f2:	2a09      	cmp	r2, #9
 80046f4:	d903      	bls.n	80046fe <_svfiprintf_r+0x1a6>
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0c6      	beq.n	8004688 <_svfiprintf_r+0x130>
 80046fa:	9105      	str	r1, [sp, #20]
 80046fc:	e7c4      	b.n	8004688 <_svfiprintf_r+0x130>
 80046fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8004702:	4604      	mov	r4, r0
 8004704:	2301      	movs	r3, #1
 8004706:	e7f0      	b.n	80046ea <_svfiprintf_r+0x192>
 8004708:	ab03      	add	r3, sp, #12
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	462a      	mov	r2, r5
 800470e:	4b0e      	ldr	r3, [pc, #56]	@ (8004748 <_svfiprintf_r+0x1f0>)
 8004710:	a904      	add	r1, sp, #16
 8004712:	4638      	mov	r0, r7
 8004714:	f3af 8000 	nop.w
 8004718:	1c42      	adds	r2, r0, #1
 800471a:	4606      	mov	r6, r0
 800471c:	d1d6      	bne.n	80046cc <_svfiprintf_r+0x174>
 800471e:	89ab      	ldrh	r3, [r5, #12]
 8004720:	065b      	lsls	r3, r3, #25
 8004722:	f53f af2d 	bmi.w	8004580 <_svfiprintf_r+0x28>
 8004726:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004728:	e72c      	b.n	8004584 <_svfiprintf_r+0x2c>
 800472a:	ab03      	add	r3, sp, #12
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	462a      	mov	r2, r5
 8004730:	4b05      	ldr	r3, [pc, #20]	@ (8004748 <_svfiprintf_r+0x1f0>)
 8004732:	a904      	add	r1, sp, #16
 8004734:	4638      	mov	r0, r7
 8004736:	f000 f879 	bl	800482c <_printf_i>
 800473a:	e7ed      	b.n	8004718 <_svfiprintf_r+0x1c0>
 800473c:	08004c04 	.word	0x08004c04
 8004740:	08004c0e 	.word	0x08004c0e
 8004744:	00000000 	.word	0x00000000
 8004748:	080044a1 	.word	0x080044a1
 800474c:	08004c0a 	.word	0x08004c0a

08004750 <_printf_common>:
 8004750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004754:	4616      	mov	r6, r2
 8004756:	4698      	mov	r8, r3
 8004758:	688a      	ldr	r2, [r1, #8]
 800475a:	690b      	ldr	r3, [r1, #16]
 800475c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004760:	4293      	cmp	r3, r2
 8004762:	bfb8      	it	lt
 8004764:	4613      	movlt	r3, r2
 8004766:	6033      	str	r3, [r6, #0]
 8004768:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800476c:	4607      	mov	r7, r0
 800476e:	460c      	mov	r4, r1
 8004770:	b10a      	cbz	r2, 8004776 <_printf_common+0x26>
 8004772:	3301      	adds	r3, #1
 8004774:	6033      	str	r3, [r6, #0]
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	0699      	lsls	r1, r3, #26
 800477a:	bf42      	ittt	mi
 800477c:	6833      	ldrmi	r3, [r6, #0]
 800477e:	3302      	addmi	r3, #2
 8004780:	6033      	strmi	r3, [r6, #0]
 8004782:	6825      	ldr	r5, [r4, #0]
 8004784:	f015 0506 	ands.w	r5, r5, #6
 8004788:	d106      	bne.n	8004798 <_printf_common+0x48>
 800478a:	f104 0a19 	add.w	sl, r4, #25
 800478e:	68e3      	ldr	r3, [r4, #12]
 8004790:	6832      	ldr	r2, [r6, #0]
 8004792:	1a9b      	subs	r3, r3, r2
 8004794:	42ab      	cmp	r3, r5
 8004796:	dc26      	bgt.n	80047e6 <_printf_common+0x96>
 8004798:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800479c:	6822      	ldr	r2, [r4, #0]
 800479e:	3b00      	subs	r3, #0
 80047a0:	bf18      	it	ne
 80047a2:	2301      	movne	r3, #1
 80047a4:	0692      	lsls	r2, r2, #26
 80047a6:	d42b      	bmi.n	8004800 <_printf_common+0xb0>
 80047a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80047ac:	4641      	mov	r1, r8
 80047ae:	4638      	mov	r0, r7
 80047b0:	47c8      	blx	r9
 80047b2:	3001      	adds	r0, #1
 80047b4:	d01e      	beq.n	80047f4 <_printf_common+0xa4>
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	6922      	ldr	r2, [r4, #16]
 80047ba:	f003 0306 	and.w	r3, r3, #6
 80047be:	2b04      	cmp	r3, #4
 80047c0:	bf02      	ittt	eq
 80047c2:	68e5      	ldreq	r5, [r4, #12]
 80047c4:	6833      	ldreq	r3, [r6, #0]
 80047c6:	1aed      	subeq	r5, r5, r3
 80047c8:	68a3      	ldr	r3, [r4, #8]
 80047ca:	bf0c      	ite	eq
 80047cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047d0:	2500      	movne	r5, #0
 80047d2:	4293      	cmp	r3, r2
 80047d4:	bfc4      	itt	gt
 80047d6:	1a9b      	subgt	r3, r3, r2
 80047d8:	18ed      	addgt	r5, r5, r3
 80047da:	2600      	movs	r6, #0
 80047dc:	341a      	adds	r4, #26
 80047de:	42b5      	cmp	r5, r6
 80047e0:	d11a      	bne.n	8004818 <_printf_common+0xc8>
 80047e2:	2000      	movs	r0, #0
 80047e4:	e008      	b.n	80047f8 <_printf_common+0xa8>
 80047e6:	2301      	movs	r3, #1
 80047e8:	4652      	mov	r2, sl
 80047ea:	4641      	mov	r1, r8
 80047ec:	4638      	mov	r0, r7
 80047ee:	47c8      	blx	r9
 80047f0:	3001      	adds	r0, #1
 80047f2:	d103      	bne.n	80047fc <_printf_common+0xac>
 80047f4:	f04f 30ff 	mov.w	r0, #4294967295
 80047f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047fc:	3501      	adds	r5, #1
 80047fe:	e7c6      	b.n	800478e <_printf_common+0x3e>
 8004800:	18e1      	adds	r1, r4, r3
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	2030      	movs	r0, #48	@ 0x30
 8004806:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800480a:	4422      	add	r2, r4
 800480c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004810:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004814:	3302      	adds	r3, #2
 8004816:	e7c7      	b.n	80047a8 <_printf_common+0x58>
 8004818:	2301      	movs	r3, #1
 800481a:	4622      	mov	r2, r4
 800481c:	4641      	mov	r1, r8
 800481e:	4638      	mov	r0, r7
 8004820:	47c8      	blx	r9
 8004822:	3001      	adds	r0, #1
 8004824:	d0e6      	beq.n	80047f4 <_printf_common+0xa4>
 8004826:	3601      	adds	r6, #1
 8004828:	e7d9      	b.n	80047de <_printf_common+0x8e>
	...

0800482c <_printf_i>:
 800482c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004830:	7e0f      	ldrb	r7, [r1, #24]
 8004832:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004834:	2f78      	cmp	r7, #120	@ 0x78
 8004836:	4691      	mov	r9, r2
 8004838:	4680      	mov	r8, r0
 800483a:	460c      	mov	r4, r1
 800483c:	469a      	mov	sl, r3
 800483e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004842:	d807      	bhi.n	8004854 <_printf_i+0x28>
 8004844:	2f62      	cmp	r7, #98	@ 0x62
 8004846:	d80a      	bhi.n	800485e <_printf_i+0x32>
 8004848:	2f00      	cmp	r7, #0
 800484a:	f000 80d2 	beq.w	80049f2 <_printf_i+0x1c6>
 800484e:	2f58      	cmp	r7, #88	@ 0x58
 8004850:	f000 80b9 	beq.w	80049c6 <_printf_i+0x19a>
 8004854:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004858:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800485c:	e03a      	b.n	80048d4 <_printf_i+0xa8>
 800485e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004862:	2b15      	cmp	r3, #21
 8004864:	d8f6      	bhi.n	8004854 <_printf_i+0x28>
 8004866:	a101      	add	r1, pc, #4	@ (adr r1, 800486c <_printf_i+0x40>)
 8004868:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800486c:	080048c5 	.word	0x080048c5
 8004870:	080048d9 	.word	0x080048d9
 8004874:	08004855 	.word	0x08004855
 8004878:	08004855 	.word	0x08004855
 800487c:	08004855 	.word	0x08004855
 8004880:	08004855 	.word	0x08004855
 8004884:	080048d9 	.word	0x080048d9
 8004888:	08004855 	.word	0x08004855
 800488c:	08004855 	.word	0x08004855
 8004890:	08004855 	.word	0x08004855
 8004894:	08004855 	.word	0x08004855
 8004898:	080049d9 	.word	0x080049d9
 800489c:	08004903 	.word	0x08004903
 80048a0:	08004993 	.word	0x08004993
 80048a4:	08004855 	.word	0x08004855
 80048a8:	08004855 	.word	0x08004855
 80048ac:	080049fb 	.word	0x080049fb
 80048b0:	08004855 	.word	0x08004855
 80048b4:	08004903 	.word	0x08004903
 80048b8:	08004855 	.word	0x08004855
 80048bc:	08004855 	.word	0x08004855
 80048c0:	0800499b 	.word	0x0800499b
 80048c4:	6833      	ldr	r3, [r6, #0]
 80048c6:	1d1a      	adds	r2, r3, #4
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6032      	str	r2, [r6, #0]
 80048cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80048d4:	2301      	movs	r3, #1
 80048d6:	e09d      	b.n	8004a14 <_printf_i+0x1e8>
 80048d8:	6833      	ldr	r3, [r6, #0]
 80048da:	6820      	ldr	r0, [r4, #0]
 80048dc:	1d19      	adds	r1, r3, #4
 80048de:	6031      	str	r1, [r6, #0]
 80048e0:	0606      	lsls	r6, r0, #24
 80048e2:	d501      	bpl.n	80048e8 <_printf_i+0xbc>
 80048e4:	681d      	ldr	r5, [r3, #0]
 80048e6:	e003      	b.n	80048f0 <_printf_i+0xc4>
 80048e8:	0645      	lsls	r5, r0, #25
 80048ea:	d5fb      	bpl.n	80048e4 <_printf_i+0xb8>
 80048ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80048f0:	2d00      	cmp	r5, #0
 80048f2:	da03      	bge.n	80048fc <_printf_i+0xd0>
 80048f4:	232d      	movs	r3, #45	@ 0x2d
 80048f6:	426d      	negs	r5, r5
 80048f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048fc:	4859      	ldr	r0, [pc, #356]	@ (8004a64 <_printf_i+0x238>)
 80048fe:	230a      	movs	r3, #10
 8004900:	e011      	b.n	8004926 <_printf_i+0xfa>
 8004902:	6821      	ldr	r1, [r4, #0]
 8004904:	6833      	ldr	r3, [r6, #0]
 8004906:	0608      	lsls	r0, r1, #24
 8004908:	f853 5b04 	ldr.w	r5, [r3], #4
 800490c:	d402      	bmi.n	8004914 <_printf_i+0xe8>
 800490e:	0649      	lsls	r1, r1, #25
 8004910:	bf48      	it	mi
 8004912:	b2ad      	uxthmi	r5, r5
 8004914:	2f6f      	cmp	r7, #111	@ 0x6f
 8004916:	4853      	ldr	r0, [pc, #332]	@ (8004a64 <_printf_i+0x238>)
 8004918:	6033      	str	r3, [r6, #0]
 800491a:	bf14      	ite	ne
 800491c:	230a      	movne	r3, #10
 800491e:	2308      	moveq	r3, #8
 8004920:	2100      	movs	r1, #0
 8004922:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004926:	6866      	ldr	r6, [r4, #4]
 8004928:	60a6      	str	r6, [r4, #8]
 800492a:	2e00      	cmp	r6, #0
 800492c:	bfa2      	ittt	ge
 800492e:	6821      	ldrge	r1, [r4, #0]
 8004930:	f021 0104 	bicge.w	r1, r1, #4
 8004934:	6021      	strge	r1, [r4, #0]
 8004936:	b90d      	cbnz	r5, 800493c <_printf_i+0x110>
 8004938:	2e00      	cmp	r6, #0
 800493a:	d04b      	beq.n	80049d4 <_printf_i+0x1a8>
 800493c:	4616      	mov	r6, r2
 800493e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004942:	fb03 5711 	mls	r7, r3, r1, r5
 8004946:	5dc7      	ldrb	r7, [r0, r7]
 8004948:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800494c:	462f      	mov	r7, r5
 800494e:	42bb      	cmp	r3, r7
 8004950:	460d      	mov	r5, r1
 8004952:	d9f4      	bls.n	800493e <_printf_i+0x112>
 8004954:	2b08      	cmp	r3, #8
 8004956:	d10b      	bne.n	8004970 <_printf_i+0x144>
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	07df      	lsls	r7, r3, #31
 800495c:	d508      	bpl.n	8004970 <_printf_i+0x144>
 800495e:	6923      	ldr	r3, [r4, #16]
 8004960:	6861      	ldr	r1, [r4, #4]
 8004962:	4299      	cmp	r1, r3
 8004964:	bfde      	ittt	le
 8004966:	2330      	movle	r3, #48	@ 0x30
 8004968:	f806 3c01 	strble.w	r3, [r6, #-1]
 800496c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004970:	1b92      	subs	r2, r2, r6
 8004972:	6122      	str	r2, [r4, #16]
 8004974:	f8cd a000 	str.w	sl, [sp]
 8004978:	464b      	mov	r3, r9
 800497a:	aa03      	add	r2, sp, #12
 800497c:	4621      	mov	r1, r4
 800497e:	4640      	mov	r0, r8
 8004980:	f7ff fee6 	bl	8004750 <_printf_common>
 8004984:	3001      	adds	r0, #1
 8004986:	d14a      	bne.n	8004a1e <_printf_i+0x1f2>
 8004988:	f04f 30ff 	mov.w	r0, #4294967295
 800498c:	b004      	add	sp, #16
 800498e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	f043 0320 	orr.w	r3, r3, #32
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	4833      	ldr	r0, [pc, #204]	@ (8004a68 <_printf_i+0x23c>)
 800499c:	2778      	movs	r7, #120	@ 0x78
 800499e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	6831      	ldr	r1, [r6, #0]
 80049a6:	061f      	lsls	r7, r3, #24
 80049a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80049ac:	d402      	bmi.n	80049b4 <_printf_i+0x188>
 80049ae:	065f      	lsls	r7, r3, #25
 80049b0:	bf48      	it	mi
 80049b2:	b2ad      	uxthmi	r5, r5
 80049b4:	6031      	str	r1, [r6, #0]
 80049b6:	07d9      	lsls	r1, r3, #31
 80049b8:	bf44      	itt	mi
 80049ba:	f043 0320 	orrmi.w	r3, r3, #32
 80049be:	6023      	strmi	r3, [r4, #0]
 80049c0:	b11d      	cbz	r5, 80049ca <_printf_i+0x19e>
 80049c2:	2310      	movs	r3, #16
 80049c4:	e7ac      	b.n	8004920 <_printf_i+0xf4>
 80049c6:	4827      	ldr	r0, [pc, #156]	@ (8004a64 <_printf_i+0x238>)
 80049c8:	e7e9      	b.n	800499e <_printf_i+0x172>
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	f023 0320 	bic.w	r3, r3, #32
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	e7f6      	b.n	80049c2 <_printf_i+0x196>
 80049d4:	4616      	mov	r6, r2
 80049d6:	e7bd      	b.n	8004954 <_printf_i+0x128>
 80049d8:	6833      	ldr	r3, [r6, #0]
 80049da:	6825      	ldr	r5, [r4, #0]
 80049dc:	6961      	ldr	r1, [r4, #20]
 80049de:	1d18      	adds	r0, r3, #4
 80049e0:	6030      	str	r0, [r6, #0]
 80049e2:	062e      	lsls	r6, r5, #24
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	d501      	bpl.n	80049ec <_printf_i+0x1c0>
 80049e8:	6019      	str	r1, [r3, #0]
 80049ea:	e002      	b.n	80049f2 <_printf_i+0x1c6>
 80049ec:	0668      	lsls	r0, r5, #25
 80049ee:	d5fb      	bpl.n	80049e8 <_printf_i+0x1bc>
 80049f0:	8019      	strh	r1, [r3, #0]
 80049f2:	2300      	movs	r3, #0
 80049f4:	6123      	str	r3, [r4, #16]
 80049f6:	4616      	mov	r6, r2
 80049f8:	e7bc      	b.n	8004974 <_printf_i+0x148>
 80049fa:	6833      	ldr	r3, [r6, #0]
 80049fc:	1d1a      	adds	r2, r3, #4
 80049fe:	6032      	str	r2, [r6, #0]
 8004a00:	681e      	ldr	r6, [r3, #0]
 8004a02:	6862      	ldr	r2, [r4, #4]
 8004a04:	2100      	movs	r1, #0
 8004a06:	4630      	mov	r0, r6
 8004a08:	f7fb fc22 	bl	8000250 <memchr>
 8004a0c:	b108      	cbz	r0, 8004a12 <_printf_i+0x1e6>
 8004a0e:	1b80      	subs	r0, r0, r6
 8004a10:	6060      	str	r0, [r4, #4]
 8004a12:	6863      	ldr	r3, [r4, #4]
 8004a14:	6123      	str	r3, [r4, #16]
 8004a16:	2300      	movs	r3, #0
 8004a18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a1c:	e7aa      	b.n	8004974 <_printf_i+0x148>
 8004a1e:	6923      	ldr	r3, [r4, #16]
 8004a20:	4632      	mov	r2, r6
 8004a22:	4649      	mov	r1, r9
 8004a24:	4640      	mov	r0, r8
 8004a26:	47d0      	blx	sl
 8004a28:	3001      	adds	r0, #1
 8004a2a:	d0ad      	beq.n	8004988 <_printf_i+0x15c>
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	079b      	lsls	r3, r3, #30
 8004a30:	d413      	bmi.n	8004a5a <_printf_i+0x22e>
 8004a32:	68e0      	ldr	r0, [r4, #12]
 8004a34:	9b03      	ldr	r3, [sp, #12]
 8004a36:	4298      	cmp	r0, r3
 8004a38:	bfb8      	it	lt
 8004a3a:	4618      	movlt	r0, r3
 8004a3c:	e7a6      	b.n	800498c <_printf_i+0x160>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	4632      	mov	r2, r6
 8004a42:	4649      	mov	r1, r9
 8004a44:	4640      	mov	r0, r8
 8004a46:	47d0      	blx	sl
 8004a48:	3001      	adds	r0, #1
 8004a4a:	d09d      	beq.n	8004988 <_printf_i+0x15c>
 8004a4c:	3501      	adds	r5, #1
 8004a4e:	68e3      	ldr	r3, [r4, #12]
 8004a50:	9903      	ldr	r1, [sp, #12]
 8004a52:	1a5b      	subs	r3, r3, r1
 8004a54:	42ab      	cmp	r3, r5
 8004a56:	dcf2      	bgt.n	8004a3e <_printf_i+0x212>
 8004a58:	e7eb      	b.n	8004a32 <_printf_i+0x206>
 8004a5a:	2500      	movs	r5, #0
 8004a5c:	f104 0619 	add.w	r6, r4, #25
 8004a60:	e7f5      	b.n	8004a4e <_printf_i+0x222>
 8004a62:	bf00      	nop
 8004a64:	08004c15 	.word	0x08004c15
 8004a68:	08004c26 	.word	0x08004c26

08004a6c <memmove>:
 8004a6c:	4288      	cmp	r0, r1
 8004a6e:	b510      	push	{r4, lr}
 8004a70:	eb01 0402 	add.w	r4, r1, r2
 8004a74:	d902      	bls.n	8004a7c <memmove+0x10>
 8004a76:	4284      	cmp	r4, r0
 8004a78:	4623      	mov	r3, r4
 8004a7a:	d807      	bhi.n	8004a8c <memmove+0x20>
 8004a7c:	1e43      	subs	r3, r0, #1
 8004a7e:	42a1      	cmp	r1, r4
 8004a80:	d008      	beq.n	8004a94 <memmove+0x28>
 8004a82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a8a:	e7f8      	b.n	8004a7e <memmove+0x12>
 8004a8c:	4402      	add	r2, r0
 8004a8e:	4601      	mov	r1, r0
 8004a90:	428a      	cmp	r2, r1
 8004a92:	d100      	bne.n	8004a96 <memmove+0x2a>
 8004a94:	bd10      	pop	{r4, pc}
 8004a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a9e:	e7f7      	b.n	8004a90 <memmove+0x24>

08004aa0 <_sbrk_r>:
 8004aa0:	b538      	push	{r3, r4, r5, lr}
 8004aa2:	4d06      	ldr	r5, [pc, #24]	@ (8004abc <_sbrk_r+0x1c>)
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	4608      	mov	r0, r1
 8004aaa:	602b      	str	r3, [r5, #0]
 8004aac:	f7fc f974 	bl	8000d98 <_sbrk>
 8004ab0:	1c43      	adds	r3, r0, #1
 8004ab2:	d102      	bne.n	8004aba <_sbrk_r+0x1a>
 8004ab4:	682b      	ldr	r3, [r5, #0]
 8004ab6:	b103      	cbz	r3, 8004aba <_sbrk_r+0x1a>
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	bd38      	pop	{r3, r4, r5, pc}
 8004abc:	200003ac 	.word	0x200003ac

08004ac0 <memcpy>:
 8004ac0:	440a      	add	r2, r1
 8004ac2:	4291      	cmp	r1, r2
 8004ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ac8:	d100      	bne.n	8004acc <memcpy+0xc>
 8004aca:	4770      	bx	lr
 8004acc:	b510      	push	{r4, lr}
 8004ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ad6:	4291      	cmp	r1, r2
 8004ad8:	d1f9      	bne.n	8004ace <memcpy+0xe>
 8004ada:	bd10      	pop	{r4, pc}

08004adc <_realloc_r>:
 8004adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae0:	4680      	mov	r8, r0
 8004ae2:	4615      	mov	r5, r2
 8004ae4:	460c      	mov	r4, r1
 8004ae6:	b921      	cbnz	r1, 8004af2 <_realloc_r+0x16>
 8004ae8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aec:	4611      	mov	r1, r2
 8004aee:	f7ff bc4b 	b.w	8004388 <_malloc_r>
 8004af2:	b92a      	cbnz	r2, 8004b00 <_realloc_r+0x24>
 8004af4:	f7ff fbdc 	bl	80042b0 <_free_r>
 8004af8:	2400      	movs	r4, #0
 8004afa:	4620      	mov	r0, r4
 8004afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b00:	f000 f81a 	bl	8004b38 <_malloc_usable_size_r>
 8004b04:	4285      	cmp	r5, r0
 8004b06:	4606      	mov	r6, r0
 8004b08:	d802      	bhi.n	8004b10 <_realloc_r+0x34>
 8004b0a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004b0e:	d8f4      	bhi.n	8004afa <_realloc_r+0x1e>
 8004b10:	4629      	mov	r1, r5
 8004b12:	4640      	mov	r0, r8
 8004b14:	f7ff fc38 	bl	8004388 <_malloc_r>
 8004b18:	4607      	mov	r7, r0
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	d0ec      	beq.n	8004af8 <_realloc_r+0x1c>
 8004b1e:	42b5      	cmp	r5, r6
 8004b20:	462a      	mov	r2, r5
 8004b22:	4621      	mov	r1, r4
 8004b24:	bf28      	it	cs
 8004b26:	4632      	movcs	r2, r6
 8004b28:	f7ff ffca 	bl	8004ac0 <memcpy>
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	4640      	mov	r0, r8
 8004b30:	f7ff fbbe 	bl	80042b0 <_free_r>
 8004b34:	463c      	mov	r4, r7
 8004b36:	e7e0      	b.n	8004afa <_realloc_r+0x1e>

08004b38 <_malloc_usable_size_r>:
 8004b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b3c:	1f18      	subs	r0, r3, #4
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	bfbc      	itt	lt
 8004b42:	580b      	ldrlt	r3, [r1, r0]
 8004b44:	18c0      	addlt	r0, r0, r3
 8004b46:	4770      	bx	lr

08004b48 <_init>:
 8004b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4a:	bf00      	nop
 8004b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b4e:	bc08      	pop	{r3}
 8004b50:	469e      	mov	lr, r3
 8004b52:	4770      	bx	lr

08004b54 <_fini>:
 8004b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b56:	bf00      	nop
 8004b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5a:	bc08      	pop	{r3}
 8004b5c:	469e      	mov	lr, r3
 8004b5e:	4770      	bx	lr
