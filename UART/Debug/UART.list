
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08005ca4  08005ca4  00006ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d68  08005d68  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005d68  08005d68  00006d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d70  08005d70  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d70  08005d70  00006d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d74  08005d74  00006d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005d78  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000898  20000068  08005de0  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000900  08005de0  00007900  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104b8  00000000  00000000  00007096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026d7  00000000  00000000  0001754e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00019c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000995  00000000  00000000  0001a8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002894e  00000000  00000000  0001b255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa5c  00000000  00000000  00043ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6005  00000000  00000000  000535ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149604  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b90  00000000  00000000  00149648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0014d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	08005c8c 	.word	0x08005c8c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	08005c8c 	.word	0x08005c8c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <UART2_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UART2_Init() {
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer2[rx_index2], 1);  // Start receiving in interrupt mode
 8000604:	4b2d      	ldr	r3, [pc, #180]	@ (80006bc <UART2_Init+0xbc>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a2d      	ldr	r2, [pc, #180]	@ (80006c0 <UART2_Init+0xc0>)
 800060a:	4413      	add	r3, r2
 800060c:	2201      	movs	r2, #1
 800060e:	4619      	mov	r1, r3
 8000610:	482c      	ldr	r0, [pc, #176]	@ (80006c4 <UART2_Init+0xc4>)
 8000612:	f002 fcf3 	bl	8002ffc <HAL_UART_Receive_IT>

    // Initial greeting
    sprintf(tx_buffer, "Hi! Man from U.A.R.T.2\n");
 8000616:	492c      	ldr	r1, [pc, #176]	@ (80006c8 <UART2_Init+0xc8>)
 8000618:	482c      	ldr	r0, [pc, #176]	@ (80006cc <UART2_Init+0xcc>)
 800061a:	f004 fcd3 	bl	8004fc4 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer), HAL_MAX_DELAY);
 800061e:	482b      	ldr	r0, [pc, #172]	@ (80006cc <UART2_Init+0xcc>)
 8000620:	f7ff fe6e 	bl	8000300 <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	b29a      	uxth	r2, r3
 8000628:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800062c:	4927      	ldr	r1, [pc, #156]	@ (80006cc <UART2_Init+0xcc>)
 800062e:	4825      	ldr	r0, [pc, #148]	@ (80006c4 <UART2_Init+0xc4>)
 8000630:	f002 fbfc 	bl	8002e2c <HAL_UART_Transmit>

    // Ask for name
    sprintf(tx_buffer, "Enter your name: ");
 8000634:	4926      	ldr	r1, [pc, #152]	@ (80006d0 <UART2_Init+0xd0>)
 8000636:	4825      	ldr	r0, [pc, #148]	@ (80006cc <UART2_Init+0xcc>)
 8000638:	f004 fcc4 	bl	8004fc4 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer), HAL_MAX_DELAY);
 800063c:	4823      	ldr	r0, [pc, #140]	@ (80006cc <UART2_Init+0xcc>)
 800063e:	f7ff fe5f 	bl	8000300 <strlen>
 8000642:	4603      	mov	r3, r0
 8000644:	b29a      	uxth	r2, r3
 8000646:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800064a:	4920      	ldr	r1, [pc, #128]	@ (80006cc <UART2_Init+0xcc>)
 800064c:	481d      	ldr	r0, [pc, #116]	@ (80006c4 <UART2_Init+0xc4>)
 800064e:	f002 fbed 	bl	8002e2c <HAL_UART_Transmit>

    // Wait for the name input
    while (!message_received2);
 8000652:	bf00      	nop
 8000654:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <UART2_Init+0xd4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d0fb      	beq.n	8000654 <UART2_Init+0x54>
    strcpy(my_name, rx_buffer2);
 800065c:	4918      	ldr	r1, [pc, #96]	@ (80006c0 <UART2_Init+0xc0>)
 800065e:	481e      	ldr	r0, [pc, #120]	@ (80006d8 <UART2_Init+0xd8>)
 8000660:	f004 fd8f 	bl	8005182 <strcpy>
    message_received2 = 0;
 8000664:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <UART2_Init+0xd4>)
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]

    // Send name to UART3
    HAL_UART_Transmit(&huart2, (uint8_t*)my_name, strlen(my_name), HAL_MAX_DELAY);
 800066a:	481b      	ldr	r0, [pc, #108]	@ (80006d8 <UART2_Init+0xd8>)
 800066c:	f7ff fe48 	bl	8000300 <strlen>
 8000670:	4603      	mov	r3, r0
 8000672:	b29a      	uxth	r2, r3
 8000674:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000678:	4917      	ldr	r1, [pc, #92]	@ (80006d8 <UART2_Init+0xd8>)
 800067a:	4812      	ldr	r0, [pc, #72]	@ (80006c4 <UART2_Init+0xc4>)
 800067c:	f002 fbd6 	bl	8002e2c <HAL_UART_Transmit>

    // Wait for a response from UART3
    while (!message_received2);
 8000680:	bf00      	nop
 8000682:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <UART2_Init+0xd4>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0fb      	beq.n	8000682 <UART2_Init+0x82>
    strcpy(other_name, rx_buffer2);
 800068a:	490d      	ldr	r1, [pc, #52]	@ (80006c0 <UART2_Init+0xc0>)
 800068c:	4813      	ldr	r0, [pc, #76]	@ (80006dc <UART2_Init+0xdc>)
 800068e:	f004 fd78 	bl	8005182 <strcpy>
    message_received2 = 0;
 8000692:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <UART2_Init+0xd4>)
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]

    // Confirm both sides are ready
    sprintf(tx_buffer, "Computer B (UART3) is ready. Your name is %s\n", other_name);
 8000698:	4a10      	ldr	r2, [pc, #64]	@ (80006dc <UART2_Init+0xdc>)
 800069a:	4911      	ldr	r1, [pc, #68]	@ (80006e0 <UART2_Init+0xe0>)
 800069c:	480b      	ldr	r0, [pc, #44]	@ (80006cc <UART2_Init+0xcc>)
 800069e:	f004 fc91 	bl	8004fc4 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer), HAL_MAX_DELAY);
 80006a2:	480a      	ldr	r0, [pc, #40]	@ (80006cc <UART2_Init+0xcc>)
 80006a4:	f7ff fe2c 	bl	8000300 <strlen>
 80006a8:	4603      	mov	r3, r0
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006b0:	4906      	ldr	r1, [pc, #24]	@ (80006cc <UART2_Init+0xcc>)
 80006b2:	4804      	ldr	r0, [pc, #16]	@ (80006c4 <UART2_Init+0xc4>)
 80006b4:	f002 fbba 	bl	8002e2c <HAL_UART_Transmit>
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200006d8 	.word	0x200006d8
 80006c0:	20000674 	.word	0x20000674
 80006c4:	20000084 	.word	0x20000084
 80006c8:	08005ca4 	.word	0x08005ca4
 80006cc:	20000748 	.word	0x20000748
 80006d0:	08005cbc 	.word	0x08005cbc
 80006d4:	200006dc 	.word	0x200006dc
 80006d8:	200006e0 	.word	0x200006e0
 80006dc:	20000714 	.word	0x20000714
 80006e0:	08005cd0 	.word	0x08005cd0

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 80006e8:	f000 fcd1 	bl	800108e <HAL_Init>
  SystemClock_Config();
 80006ec:	f000 f86e 	bl	80007cc <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f0:	f000 f96c 	bl	80009cc <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006f4:	f000 f93c 	bl	8000970 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80006f8:	f000 f8da 	bl	80008b0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80006fc:	f000 f908 	bl	8000910 <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */
  // Start receiving interrupts on UART2
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_buffer2[rx_index2], 1);
 8000700:	4b28      	ldr	r3, [pc, #160]	@ (80007a4 <main+0xc0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a28      	ldr	r2, [pc, #160]	@ (80007a8 <main+0xc4>)
 8000706:	4413      	add	r3, r2
 8000708:	2201      	movs	r2, #1
 800070a:	4619      	mov	r1, r3
 800070c:	4827      	ldr	r0, [pc, #156]	@ (80007ac <main+0xc8>)
 800070e:	f002 fc75 	bl	8002ffc <HAL_UART_Receive_IT>

  // Initialize UART2 communication
  UART2_Init();
 8000712:	f7ff ff75 	bl	8000600 <UART2_Init>

  // Main loop: Message exchange
  while (1) {
      // Wait for a message from UART3
      while (!message_received2) {
 8000716:	e002      	b.n	800071e <main+0x3a>
          HAL_Delay(10);  // Polling delay to avoid busy waiting
 8000718:	200a      	movs	r0, #10
 800071a:	f000 fd15 	bl	8001148 <HAL_Delay>
      while (!message_received2) {
 800071e:	4b24      	ldr	r3, [pc, #144]	@ (80007b0 <main+0xcc>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d0f8      	beq.n	8000718 <main+0x34>
      }
      message_received2 = 0;  // Reset the flag
 8000726:	4b22      	ldr	r3, [pc, #136]	@ (80007b0 <main+0xcc>)
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]

      // Display the received message from UART3
      sprintf(tx_buffer, "UART3 => %s\n", rx_buffer2);
 800072c:	4a1e      	ldr	r2, [pc, #120]	@ (80007a8 <main+0xc4>)
 800072e:	4921      	ldr	r1, [pc, #132]	@ (80007b4 <main+0xd0>)
 8000730:	4821      	ldr	r0, [pc, #132]	@ (80007b8 <main+0xd4>)
 8000732:	f004 fc47 	bl	8004fc4 <siprintf>
      HAL_UART_Transmit_IT(&huart2, (uint8_t *)tx_buffer, strlen(tx_buffer));
 8000736:	4820      	ldr	r0, [pc, #128]	@ (80007b8 <main+0xd4>)
 8000738:	f7ff fde2 	bl	8000300 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	b29b      	uxth	r3, r3
 8000740:	461a      	mov	r2, r3
 8000742:	491d      	ldr	r1, [pc, #116]	@ (80007b8 <main+0xd4>)
 8000744:	4819      	ldr	r0, [pc, #100]	@ (80007ac <main+0xc8>)
 8000746:	f002 fbfb 	bl	8002f40 <HAL_UART_Transmit_IT>

      // Get user input and send it over UART2
      sprintf(tx_buffer, "%s => ", my_name);
 800074a:	4a1c      	ldr	r2, [pc, #112]	@ (80007bc <main+0xd8>)
 800074c:	491c      	ldr	r1, [pc, #112]	@ (80007c0 <main+0xdc>)
 800074e:	481a      	ldr	r0, [pc, #104]	@ (80007b8 <main+0xd4>)
 8000750:	f004 fc38 	bl	8004fc4 <siprintf>
      HAL_UART_Transmit_IT(&huart2, (uint8_t *)tx_buffer, strlen(tx_buffer));
 8000754:	4818      	ldr	r0, [pc, #96]	@ (80007b8 <main+0xd4>)
 8000756:	f7ff fdd3 	bl	8000300 <strlen>
 800075a:	4603      	mov	r3, r0
 800075c:	b29b      	uxth	r3, r3
 800075e:	461a      	mov	r2, r3
 8000760:	4915      	ldr	r1, [pc, #84]	@ (80007b8 <main+0xd4>)
 8000762:	4812      	ldr	r0, [pc, #72]	@ (80007ac <main+0xc8>)
 8000764:	f002 fbec 	bl	8002f40 <HAL_UART_Transmit_IT>
      fgets(tx_buffer, sizeof(tx_buffer), stdin);
 8000768:	4b16      	ldr	r3, [pc, #88]	@ (80007c4 <main+0xe0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	461a      	mov	r2, r3
 8000770:	2164      	movs	r1, #100	@ 0x64
 8000772:	4811      	ldr	r0, [pc, #68]	@ (80007b8 <main+0xd4>)
 8000774:	f004 fad8 	bl	8004d28 <fgets>
      HAL_UART_Transmit_IT(&huart2, (uint8_t *)tx_buffer, strlen(tx_buffer));
 8000778:	480f      	ldr	r0, [pc, #60]	@ (80007b8 <main+0xd4>)
 800077a:	f7ff fdc1 	bl	8000300 <strlen>
 800077e:	4603      	mov	r3, r0
 8000780:	b29b      	uxth	r3, r3
 8000782:	461a      	mov	r2, r3
 8000784:	490c      	ldr	r1, [pc, #48]	@ (80007b8 <main+0xd4>)
 8000786:	4809      	ldr	r0, [pc, #36]	@ (80007ac <main+0xc8>)
 8000788:	f002 fbda 	bl	8002f40 <HAL_UART_Transmit_IT>

      // Check if the user wants to quit
      if (strcmp(tx_buffer, "q\n") == 0) {
 800078c:	490e      	ldr	r1, [pc, #56]	@ (80007c8 <main+0xe4>)
 800078e:	480a      	ldr	r0, [pc, #40]	@ (80007b8 <main+0xd4>)
 8000790:	f7ff fd56 	bl	8000240 <strcmp>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d000      	beq.n	800079c <main+0xb8>
      while (!message_received2) {
 800079a:	e7c0      	b.n	800071e <main+0x3a>
          break;
 800079c:	bf00      	nop
      }
  }

  return 0;
 800079e:	2300      	movs	r3, #0
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200006d8 	.word	0x200006d8
 80007a8:	20000674 	.word	0x20000674
 80007ac:	20000084 	.word	0x20000084
 80007b0:	200006dc 	.word	0x200006dc
 80007b4:	08005d00 	.word	0x08005d00
 80007b8:	20000748 	.word	0x20000748
 80007bc:	200006e0 	.word	0x200006e0
 80007c0:	08005d10 	.word	0x08005d10
 80007c4:	20000018 	.word	0x20000018
 80007c8:	08005d18 	.word	0x08005d18

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b094      	sub	sp, #80	@ 0x50
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	2234      	movs	r2, #52	@ 0x34
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f004 fc55 	bl	800508a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007f0:	f001 f972 	bl	8001ad8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f4:	4b2c      	ldr	r3, [pc, #176]	@ (80008a8 <SystemClock_Config+0xdc>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f8:	4a2b      	ldr	r2, [pc, #172]	@ (80008a8 <SystemClock_Config+0xdc>)
 80007fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000800:	4b29      	ldr	r3, [pc, #164]	@ (80008a8 <SystemClock_Config+0xdc>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800080c:	4b27      	ldr	r3, [pc, #156]	@ (80008ac <SystemClock_Config+0xe0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000814:	4a25      	ldr	r2, [pc, #148]	@ (80008ac <SystemClock_Config+0xe0>)
 8000816:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	4b23      	ldr	r3, [pc, #140]	@ (80008ac <SystemClock_Config+0xe0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000828:	2301      	movs	r3, #1
 800082a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800082c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000830:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000832:	2302      	movs	r3, #2
 8000834:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000836:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800083a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800083c:	2304      	movs	r3, #4
 800083e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000840:	2360      	movs	r3, #96	@ 0x60
 8000842:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000844:	2302      	movs	r3, #2
 8000846:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000848:	2304      	movs	r3, #4
 800084a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800084c:	2302      	movs	r3, #2
 800084e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4618      	mov	r0, r3
 8000856:	f001 f99f 	bl	8001b98 <HAL_RCC_OscConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000860:	f000 f9f2 	bl	8000c48 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000864:	f001 f948 	bl	8001af8 <HAL_PWREx_EnableOverDrive>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800086e:	f000 f9eb 	bl	8000c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	230f      	movs	r3, #15
 8000874:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	2302      	movs	r3, #2
 8000878:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800087e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000882:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	2103      	movs	r1, #3
 800088e:	4618      	mov	r0, r3
 8000890:	f001 fc30 	bl	80020f4 <HAL_RCC_ClockConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800089a:	f000 f9d5 	bl	8000c48 <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	3750      	adds	r7, #80	@ 0x50
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000

080008b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b4:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <MX_USART2_UART_Init+0x58>)
 80008b6:	4a15      	ldr	r2, [pc, #84]	@ (800090c <MX_USART2_UART_Init+0x5c>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ba:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <MX_USART2_UART_Init+0x58>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <MX_USART2_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <MX_USART2_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <MX_USART2_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <MX_USART2_UART_Init+0x58>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <MX_USART2_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <MX_USART2_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <MX_USART2_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ec:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <MX_USART2_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	@ (8000908 <MX_USART2_UART_Init+0x58>)
 80008f4:	f002 fa4c 	bl	8002d90 <HAL_UART_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008fe:	f000 f9a3 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000084 	.word	0x20000084
 800090c:	40004400 	.word	0x40004400

08000910 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000914:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <MX_USART3_UART_Init+0x58>)
 8000916:	4a15      	ldr	r2, [pc, #84]	@ (800096c <MX_USART3_UART_Init+0x5c>)
 8000918:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800091a:	4b13      	ldr	r3, [pc, #76]	@ (8000968 <MX_USART3_UART_Init+0x58>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_USART3_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_USART3_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800092e:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <MX_USART3_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <MX_USART3_UART_Init+0x58>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <MX_USART3_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <MX_USART3_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000946:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <MX_USART3_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <MX_USART3_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	@ (8000968 <MX_USART3_UART_Init+0x58>)
 8000954:	f002 fa1c 	bl	8002d90 <HAL_UART_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800095e:	f000 f973 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000010c 	.word	0x2000010c
 800096c:	40004800 	.word	0x40004800

08000970 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000974:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000976:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800097a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800097c:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097e:	2206      	movs	r2, #6
 8000980:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000982:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000984:	2202      	movs	r2, #2
 8000986:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000988:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000990:	2202      	movs	r2, #2
 8000992:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000994:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000996:	2201      	movs	r2, #1
 8000998:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009a0:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b4:	f000 ff55 	bl	8001862 <HAL_PCD_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009be:	f000 f943 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000194 	.word	0x20000194

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08c      	sub	sp, #48	@ 0x30
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	4b7a      	ldr	r3, [pc, #488]	@ (8000bcc <MX_GPIO_Init+0x200>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a79      	ldr	r2, [pc, #484]	@ (8000bcc <MX_GPIO_Init+0x200>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b77      	ldr	r3, [pc, #476]	@ (8000bcc <MX_GPIO_Init+0x200>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	61bb      	str	r3, [r7, #24]
 80009f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fa:	4b74      	ldr	r3, [pc, #464]	@ (8000bcc <MX_GPIO_Init+0x200>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a73      	ldr	r2, [pc, #460]	@ (8000bcc <MX_GPIO_Init+0x200>)
 8000a00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b71      	ldr	r3, [pc, #452]	@ (8000bcc <MX_GPIO_Init+0x200>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b6e      	ldr	r3, [pc, #440]	@ (8000bcc <MX_GPIO_Init+0x200>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a6d      	ldr	r2, [pc, #436]	@ (8000bcc <MX_GPIO_Init+0x200>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b6b      	ldr	r3, [pc, #428]	@ (8000bcc <MX_GPIO_Init+0x200>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	4b68      	ldr	r3, [pc, #416]	@ (8000bcc <MX_GPIO_Init+0x200>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a67      	ldr	r2, [pc, #412]	@ (8000bcc <MX_GPIO_Init+0x200>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b65      	ldr	r3, [pc, #404]	@ (8000bcc <MX_GPIO_Init+0x200>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a42:	4b62      	ldr	r3, [pc, #392]	@ (8000bcc <MX_GPIO_Init+0x200>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a61      	ldr	r2, [pc, #388]	@ (8000bcc <MX_GPIO_Init+0x200>)
 8000a48:	f043 0308 	orr.w	r3, r3, #8
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b5f      	ldr	r3, [pc, #380]	@ (8000bcc <MX_GPIO_Init+0x200>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0308 	and.w	r3, r3, #8
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a5a:	4b5c      	ldr	r3, [pc, #368]	@ (8000bcc <MX_GPIO_Init+0x200>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a5b      	ldr	r2, [pc, #364]	@ (8000bcc <MX_GPIO_Init+0x200>)
 8000a60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b59      	ldr	r3, [pc, #356]	@ (8000bcc <MX_GPIO_Init+0x200>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2120      	movs	r1, #32
 8000a76:	4856      	ldr	r0, [pc, #344]	@ (8000bd0 <MX_GPIO_Init+0x204>)
 8000a78:	f000 feda 	bl	8001830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a82:	4854      	ldr	r0, [pc, #336]	@ (8000bd4 <MX_GPIO_Init+0x208>)
 8000a84:	f000 fed4 	bl	8001830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2140      	movs	r1, #64	@ 0x40
 8000a8c:	4852      	ldr	r0, [pc, #328]	@ (8000bd8 <MX_GPIO_Init+0x20c>)
 8000a8e:	f000 fecf 	bl	8001830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a98:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	484c      	ldr	r0, [pc, #304]	@ (8000bdc <MX_GPIO_Init+0x210>)
 8000aaa:	f000 fd15 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000aae:	2332      	movs	r3, #50	@ 0x32
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000abe:	230b      	movs	r3, #11
 8000ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4844      	ldr	r0, [pc, #272]	@ (8000bdc <MX_GPIO_Init+0x210>)
 8000aca:	f000 fd05 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8000ace:	2382      	movs	r3, #130	@ 0x82
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ade:	230b      	movs	r3, #11
 8000ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4839      	ldr	r0, [pc, #228]	@ (8000bd0 <MX_GPIO_Init+0x204>)
 8000aea:	f000 fcf5 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000aee:	2320      	movs	r3, #32
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	4832      	ldr	r0, [pc, #200]	@ (8000bd0 <MX_GPIO_Init+0x204>)
 8000b06:	f000 fce7 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b0a:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	482c      	ldr	r0, [pc, #176]	@ (8000bd4 <MX_GPIO_Init+0x208>)
 8000b24:	f000 fcd8 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b3a:	230b      	movs	r3, #11
 8000b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4619      	mov	r1, r3
 8000b44:	4823      	ldr	r0, [pc, #140]	@ (8000bd4 <MX_GPIO_Init+0x208>)
 8000b46:	f000 fcc7 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b4a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b5c:	2307      	movs	r3, #7
 8000b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	481e      	ldr	r0, [pc, #120]	@ (8000be0 <MX_GPIO_Init+0x214>)
 8000b68:	f000 fcb6 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b6c:	2340      	movs	r3, #64	@ 0x40
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4619      	mov	r1, r3
 8000b82:	4815      	ldr	r0, [pc, #84]	@ (8000bd8 <MX_GPIO_Init+0x20c>)
 8000b84:	f000 fca8 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b88:	2380      	movs	r3, #128	@ 0x80
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480f      	ldr	r0, [pc, #60]	@ (8000bd8 <MX_GPIO_Init+0x20c>)
 8000b9c:	f000 fc9c 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ba0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb2:	230b      	movs	r3, #11
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4806      	ldr	r0, [pc, #24]	@ (8000bd8 <MX_GPIO_Init+0x20c>)
 8000bbe:	f000 fc8b 	bl	80014d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc2:	bf00      	nop
 8000bc4:	3730      	adds	r7, #48	@ 0x30
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	40020400 	.word	0x40020400
 8000bd8:	40021800 	.word	0x40021800
 8000bdc:	40020800 	.word	0x40020800
 8000be0:	40020c00 	.word	0x40020c00

08000be4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a10      	ldr	r2, [pc, #64]	@ (8000c34 <HAL_UART_RxCpltCallback+0x50>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d11a      	bne.n	8000c2c <HAL_UART_RxCpltCallback+0x48>
        if (rx_buffer2[rx_index2 - 1] == '\n') {
 8000bf6:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <HAL_UART_RxCpltCallback+0x54>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	4a0f      	ldr	r2, [pc, #60]	@ (8000c3c <HAL_UART_RxCpltCallback+0x58>)
 8000bfe:	5cd3      	ldrb	r3, [r2, r3]
 8000c00:	2b0a      	cmp	r3, #10
 8000c02:	d107      	bne.n	8000c14 <HAL_UART_RxCpltCallback+0x30>
            rx_buffer2[rx_index2] = '\0';  // Terminate the string
 8000c04:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <HAL_UART_RxCpltCallback+0x54>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0c      	ldr	r2, [pc, #48]	@ (8000c3c <HAL_UART_RxCpltCallback+0x58>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	54d1      	strb	r1, [r2, r3]
            message_received2 = 1;  // Set flag indicating message received
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <HAL_UART_RxCpltCallback+0x5c>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	601a      	str	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer2[rx_index2++], 1);
 8000c14:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <HAL_UART_RxCpltCallback+0x54>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	4907      	ldr	r1, [pc, #28]	@ (8000c38 <HAL_UART_RxCpltCallback+0x54>)
 8000c1c:	600a      	str	r2, [r1, #0]
 8000c1e:	4a07      	ldr	r2, [pc, #28]	@ (8000c3c <HAL_UART_RxCpltCallback+0x58>)
 8000c20:	4413      	add	r3, r2
 8000c22:	2201      	movs	r2, #1
 8000c24:	4619      	mov	r1, r3
 8000c26:	4807      	ldr	r0, [pc, #28]	@ (8000c44 <HAL_UART_RxCpltCallback+0x60>)
 8000c28:	f002 f9e8 	bl	8002ffc <HAL_UART_Receive_IT>
    }
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40004400 	.word	0x40004400
 8000c38:	200006d8 	.word	0x200006d8
 8000c3c:	20000674 	.word	0x20000674
 8000c40:	200006dc 	.word	0x200006dc
 8000c44:	20000084 	.word	0x20000084

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
}
 8000c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <Error_Handler+0x8>

08000c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <HAL_MspInit+0x44>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c98 <HAL_MspInit+0x44>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c66:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <HAL_MspInit+0x44>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <HAL_MspInit+0x44>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c76:	4a08      	ldr	r2, [pc, #32]	@ (8000c98 <HAL_MspInit+0x44>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_MspInit+0x44>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800

08000c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b0ae      	sub	sp, #184	@ 0xb8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2290      	movs	r2, #144	@ 0x90
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f004 f9e4 	bl	800508a <memset>
  if(huart->Instance==USART2)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a25      	ldr	r2, [pc, #148]	@ (8000d5c <HAL_UART_MspInit+0xc0>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d142      	bne.n	8000d52 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ccc:	2380      	movs	r3, #128	@ 0x80
 8000cce:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f001 fc31 	bl	8002540 <HAL_RCCEx_PeriphCLKConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ce4:	f7ff ffb0 	bl	8000c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d60 <HAL_UART_MspInit+0xc4>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cec:	4a1c      	ldr	r2, [pc, #112]	@ (8000d60 <HAL_UART_MspInit+0xc4>)
 8000cee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cf2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <HAL_UART_MspInit+0xc4>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <HAL_UART_MspInit+0xc4>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d04:	4a16      	ldr	r2, [pc, #88]	@ (8000d60 <HAL_UART_MspInit+0xc4>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0c:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <HAL_UART_MspInit+0xc4>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d18:	230c      	movs	r3, #12
 8000d1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d30:	2307      	movs	r3, #7
 8000d32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4809      	ldr	r0, [pc, #36]	@ (8000d64 <HAL_UART_MspInit+0xc8>)
 8000d3e:	f000 fbcb 	bl	80014d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2100      	movs	r1, #0
 8000d46:	2026      	movs	r0, #38	@ 0x26
 8000d48:	f000 fafd 	bl	8001346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d4c:	2026      	movs	r0, #38	@ 0x26
 8000d4e:	f000 fb16 	bl	800137e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d52:	bf00      	nop
 8000d54:	37b8      	adds	r7, #184	@ 0xb8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40004400 	.word	0x40004400
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020000 	.word	0x40020000

08000d68 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b0ae      	sub	sp, #184	@ 0xb8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2290      	movs	r2, #144	@ 0x90
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f004 f97e 	bl	800508a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d96:	d159      	bne.n	8000e4c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d98:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000d9c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4618      	mov	r0, r3
 8000daa:	f001 fbc9 	bl	8002540 <HAL_RCCEx_PeriphCLKConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000db4:	f7ff ff48 	bl	8000c48 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db8:	4b26      	ldr	r3, [pc, #152]	@ (8000e54 <HAL_PCD_MspInit+0xec>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbc:	4a25      	ldr	r2, [pc, #148]	@ (8000e54 <HAL_PCD_MspInit+0xec>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc4:	4b23      	ldr	r3, [pc, #140]	@ (8000e54 <HAL_PCD_MspInit+0xec>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dd0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000dd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dea:	230a      	movs	r3, #10
 8000dec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000df4:	4619      	mov	r1, r3
 8000df6:	4818      	ldr	r0, [pc, #96]	@ (8000e58 <HAL_PCD_MspInit+0xf0>)
 8000df8:	f000 fb6e 	bl	80014d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000dfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e14:	4619      	mov	r1, r3
 8000e16:	4810      	ldr	r0, [pc, #64]	@ (8000e58 <HAL_PCD_MspInit+0xf0>)
 8000e18:	f000 fb5e 	bl	80014d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e54 <HAL_PCD_MspInit+0xec>)
 8000e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e20:	4a0c      	ldr	r2, [pc, #48]	@ (8000e54 <HAL_PCD_MspInit+0xec>)
 8000e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e26:	6353      	str	r3, [r2, #52]	@ 0x34
 8000e28:	4b0a      	ldr	r3, [pc, #40]	@ (8000e54 <HAL_PCD_MspInit+0xec>)
 8000e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4b07      	ldr	r3, [pc, #28]	@ (8000e54 <HAL_PCD_MspInit+0xec>)
 8000e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e38:	4a06      	ldr	r2, [pc, #24]	@ (8000e54 <HAL_PCD_MspInit+0xec>)
 8000e3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e40:	4b04      	ldr	r3, [pc, #16]	@ (8000e54 <HAL_PCD_MspInit+0xec>)
 8000e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000e4c:	bf00      	nop
 8000e4e:	37b8      	adds	r7, #184	@ 0xb8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020000 	.word	0x40020000

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <NMI_Handler+0x4>

08000e64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <MemManage_Handler+0x4>

08000e74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb2:	f000 f929 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ec0:	4802      	ldr	r0, [pc, #8]	@ (8000ecc <USART2_IRQHandler+0x10>)
 8000ec2:	f002 f8df 	bl	8003084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000084 	.word	0x20000084

08000ed0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	e00a      	b.n	8000ef8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ee2:	f3af 8000 	nop.w
 8000ee6:	4601      	mov	r1, r0
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	1c5a      	adds	r2, r3, #1
 8000eec:	60ba      	str	r2, [r7, #8]
 8000eee:	b2ca      	uxtb	r2, r1
 8000ef0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	dbf0      	blt.n	8000ee2 <_read+0x12>
  }

  return len;
 8000f00:	687b      	ldr	r3, [r7, #4]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	60f8      	str	r0, [r7, #12]
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	e009      	b.n	8000f30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	1c5a      	adds	r2, r3, #1
 8000f20:	60ba      	str	r2, [r7, #8]
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dbf1      	blt.n	8000f1c <_write+0x12>
  }
  return len;
 8000f38:	687b      	ldr	r3, [r7, #4]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <_close>:

int _close(int file)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f6a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <_isatty>:

int _isatty(int file)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb4:	4a14      	ldr	r2, [pc, #80]	@ (8001008 <_sbrk+0x5c>)
 8000fb6:	4b15      	ldr	r3, [pc, #84]	@ (800100c <_sbrk+0x60>)
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc0:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <_sbrk+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <_sbrk+0x64>)
 8000fca:	4a12      	ldr	r2, [pc, #72]	@ (8001014 <_sbrk+0x68>)
 8000fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fce:	4b10      	ldr	r3, [pc, #64]	@ (8001010 <_sbrk+0x64>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d207      	bcs.n	8000fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fdc:	f004 f8a4 	bl	8005128 <__errno>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fea:	e009      	b.n	8001000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fec:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	4a05      	ldr	r2, [pc, #20]	@ (8001010 <_sbrk+0x64>)
 8000ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20080000 	.word	0x20080000
 800100c:	00000400 	.word	0x00000400
 8001010:	200007ac 	.word	0x200007ac
 8001014:	20000900 	.word	0x20000900

08001018 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <SystemInit+0x20>)
 800101e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001022:	4a05      	ldr	r2, [pc, #20]	@ (8001038 <SystemInit+0x20>)
 8001024:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001028:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800103c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001074 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001040:	f7ff ffea 	bl	8001018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001044:	480c      	ldr	r0, [pc, #48]	@ (8001078 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001046:	490d      	ldr	r1, [pc, #52]	@ (800107c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001048:	4a0d      	ldr	r2, [pc, #52]	@ (8001080 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800105c:	4c0a      	ldr	r4, [pc, #40]	@ (8001088 <LoopFillZerobss+0x22>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800106a:	f004 f863 	bl	8005134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106e:	f7ff fb39 	bl	80006e4 <main>
  bx  lr    
 8001072:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001074:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001080:	08005d78 	.word	0x08005d78
  ldr r2, =_sbss
 8001084:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001088:	20000900 	.word	0x20000900

0800108c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC_IRQHandler>

0800108e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001092:	2003      	movs	r0, #3
 8001094:	f000 f94c 	bl	8001330 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001098:	2000      	movs	r0, #0
 800109a:	f000 f805 	bl	80010a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109e:	f7ff fdd9 	bl	8000c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <HAL_InitTick+0x54>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_InitTick+0x58>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f967 	bl	800139a <HAL_SYSTICK_Config>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00e      	b.n	80010f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d80a      	bhi.n	80010f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010e4:	f000 f92f 	bl	8001346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e8:	4a06      	ldr	r2, [pc, #24]	@ (8001104 <HAL_InitTick+0x5c>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000008 	.word	0x20000008
 8001104:	20000004 	.word	0x20000004

08001108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	@ (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	200007b0 	.word	0x200007b0

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	200007b0 	.word	0x200007b0

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff ffee 	bl	8001130 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b0a      	ldr	r3, [pc, #40]	@ (800118c <HAL_Delay+0x44>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116e:	bf00      	nop
 8001170:	f7ff ffde 	bl	8001130 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8f7      	bhi.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <__NVIC_SetPriorityGrouping+0x40>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011be:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <__NVIC_SetPriorityGrouping+0x40>)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	60d3      	str	r3, [r2, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00
 80011d4:	05fa0000 	.word	0x05fa0000

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4907      	ldr	r1, [pc, #28]	@ (800122c <__NVIC_EnableIRQ+0x38>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	@ (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	@ (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	@ 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	@ 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012fc:	d301      	bcc.n	8001302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fe:	2301      	movs	r3, #1
 8001300:	e00f      	b.n	8001322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001302:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <SysTick_Config+0x40>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130a:	210f      	movs	r1, #15
 800130c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001310:	f7ff ff8e 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <SysTick_Config+0x40>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131a:	4b04      	ldr	r3, [pc, #16]	@ (800132c <SysTick_Config+0x40>)
 800131c:	2207      	movs	r2, #7
 800131e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	e000e010 	.word	0xe000e010

08001330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff29 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff3e 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff8e 	bl	8001284 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5d 	bl	8001230 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff31 	bl	80011f4 <__NVIC_EnableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffa2 	bl	80012ec <SysTick_Config>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013c0:	f7ff feb6 	bl	8001130 <HAL_GetTick>
 80013c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d008      	beq.n	80013e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2280      	movs	r2, #128	@ 0x80
 80013d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e052      	b.n	800148a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 0216 	bic.w	r2, r2, #22
 80013f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001402:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001408:	2b00      	cmp	r3, #0
 800140a:	d103      	bne.n	8001414 <HAL_DMA_Abort+0x62>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001410:	2b00      	cmp	r3, #0
 8001412:	d007      	beq.n	8001424 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0208 	bic.w	r2, r2, #8
 8001422:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0201 	bic.w	r2, r2, #1
 8001432:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001434:	e013      	b.n	800145e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001436:	f7ff fe7b 	bl	8001130 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b05      	cmp	r3, #5
 8001442:	d90c      	bls.n	800145e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2220      	movs	r2, #32
 8001448:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2203      	movs	r2, #3
 800144e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e015      	b.n	800148a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1e4      	bne.n	8001436 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001470:	223f      	movs	r2, #63	@ 0x3f
 8001472:	409a      	lsls	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d004      	beq.n	80014b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2280      	movs	r2, #128	@ 0x80
 80014aa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e00c      	b.n	80014ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2205      	movs	r2, #5
 80014b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0201 	bic.w	r2, r2, #1
 80014c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	@ 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	e175      	b.n	80017e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80014f8:	2201      	movs	r2, #1
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	429a      	cmp	r2, r3
 8001512:	f040 8164 	bne.w	80017de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	2b01      	cmp	r3, #1
 8001520:	d005      	beq.n	800152e <HAL_GPIO_Init+0x56>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d130      	bne.n	8001590 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	2203      	movs	r2, #3
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001564:	2201      	movs	r2, #1
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	091b      	lsrs	r3, r3, #4
 800157a:	f003 0201 	and.w	r2, r3, #1
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	2b03      	cmp	r3, #3
 800159a:	d017      	beq.n	80015cc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	2203      	movs	r2, #3
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d123      	bne.n	8001620 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	08da      	lsrs	r2, r3, #3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3208      	adds	r2, #8
 80015e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	220f      	movs	r2, #15
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	691a      	ldr	r2, [r3, #16]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	08da      	lsrs	r2, r3, #3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3208      	adds	r2, #8
 800161a:	69b9      	ldr	r1, [r7, #24]
 800161c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	2203      	movs	r2, #3
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0203 	and.w	r2, r3, #3
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 80be 	beq.w	80017de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	4b66      	ldr	r3, [pc, #408]	@ (80017fc <HAL_GPIO_Init+0x324>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001666:	4a65      	ldr	r2, [pc, #404]	@ (80017fc <HAL_GPIO_Init+0x324>)
 8001668:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800166c:	6453      	str	r3, [r2, #68]	@ 0x44
 800166e:	4b63      	ldr	r3, [pc, #396]	@ (80017fc <HAL_GPIO_Init+0x324>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001672:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800167a:	4a61      	ldr	r2, [pc, #388]	@ (8001800 <HAL_GPIO_Init+0x328>)
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	3302      	adds	r3, #2
 8001682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	220f      	movs	r2, #15
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a58      	ldr	r2, [pc, #352]	@ (8001804 <HAL_GPIO_Init+0x32c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d037      	beq.n	8001716 <HAL_GPIO_Init+0x23e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a57      	ldr	r2, [pc, #348]	@ (8001808 <HAL_GPIO_Init+0x330>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d031      	beq.n	8001712 <HAL_GPIO_Init+0x23a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a56      	ldr	r2, [pc, #344]	@ (800180c <HAL_GPIO_Init+0x334>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d02b      	beq.n	800170e <HAL_GPIO_Init+0x236>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a55      	ldr	r2, [pc, #340]	@ (8001810 <HAL_GPIO_Init+0x338>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d025      	beq.n	800170a <HAL_GPIO_Init+0x232>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a54      	ldr	r2, [pc, #336]	@ (8001814 <HAL_GPIO_Init+0x33c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d01f      	beq.n	8001706 <HAL_GPIO_Init+0x22e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a53      	ldr	r2, [pc, #332]	@ (8001818 <HAL_GPIO_Init+0x340>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d019      	beq.n	8001702 <HAL_GPIO_Init+0x22a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a52      	ldr	r2, [pc, #328]	@ (800181c <HAL_GPIO_Init+0x344>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d013      	beq.n	80016fe <HAL_GPIO_Init+0x226>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a51      	ldr	r2, [pc, #324]	@ (8001820 <HAL_GPIO_Init+0x348>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d00d      	beq.n	80016fa <HAL_GPIO_Init+0x222>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a50      	ldr	r2, [pc, #320]	@ (8001824 <HAL_GPIO_Init+0x34c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d007      	beq.n	80016f6 <HAL_GPIO_Init+0x21e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4f      	ldr	r2, [pc, #316]	@ (8001828 <HAL_GPIO_Init+0x350>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <HAL_GPIO_Init+0x21a>
 80016ee:	2309      	movs	r3, #9
 80016f0:	e012      	b.n	8001718 <HAL_GPIO_Init+0x240>
 80016f2:	230a      	movs	r3, #10
 80016f4:	e010      	b.n	8001718 <HAL_GPIO_Init+0x240>
 80016f6:	2308      	movs	r3, #8
 80016f8:	e00e      	b.n	8001718 <HAL_GPIO_Init+0x240>
 80016fa:	2307      	movs	r3, #7
 80016fc:	e00c      	b.n	8001718 <HAL_GPIO_Init+0x240>
 80016fe:	2306      	movs	r3, #6
 8001700:	e00a      	b.n	8001718 <HAL_GPIO_Init+0x240>
 8001702:	2305      	movs	r3, #5
 8001704:	e008      	b.n	8001718 <HAL_GPIO_Init+0x240>
 8001706:	2304      	movs	r3, #4
 8001708:	e006      	b.n	8001718 <HAL_GPIO_Init+0x240>
 800170a:	2303      	movs	r3, #3
 800170c:	e004      	b.n	8001718 <HAL_GPIO_Init+0x240>
 800170e:	2302      	movs	r3, #2
 8001710:	e002      	b.n	8001718 <HAL_GPIO_Init+0x240>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <HAL_GPIO_Init+0x240>
 8001716:	2300      	movs	r3, #0
 8001718:	69fa      	ldr	r2, [r7, #28]
 800171a:	f002 0203 	and.w	r2, r2, #3
 800171e:	0092      	lsls	r2, r2, #2
 8001720:	4093      	lsls	r3, r2
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001728:	4935      	ldr	r1, [pc, #212]	@ (8001800 <HAL_GPIO_Init+0x328>)
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	3302      	adds	r3, #2
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001736:	4b3d      	ldr	r3, [pc, #244]	@ (800182c <HAL_GPIO_Init+0x354>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800175a:	4a34      	ldr	r2, [pc, #208]	@ (800182c <HAL_GPIO_Init+0x354>)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001760:	4b32      	ldr	r3, [pc, #200]	@ (800182c <HAL_GPIO_Init+0x354>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001784:	4a29      	ldr	r2, [pc, #164]	@ (800182c <HAL_GPIO_Init+0x354>)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800178a:	4b28      	ldr	r3, [pc, #160]	@ (800182c <HAL_GPIO_Init+0x354>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ae:	4a1f      	ldr	r2, [pc, #124]	@ (800182c <HAL_GPIO_Init+0x354>)
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b4:	4b1d      	ldr	r3, [pc, #116]	@ (800182c <HAL_GPIO_Init+0x354>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017d8:	4a14      	ldr	r2, [pc, #80]	@ (800182c <HAL_GPIO_Init+0x354>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3301      	adds	r3, #1
 80017e2:	61fb      	str	r3, [r7, #28]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	2b0f      	cmp	r3, #15
 80017e8:	f67f ae86 	bls.w	80014f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3724      	adds	r7, #36	@ 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	40013800 	.word	0x40013800
 8001804:	40020000 	.word	0x40020000
 8001808:	40020400 	.word	0x40020400
 800180c:	40020800 	.word	0x40020800
 8001810:	40020c00 	.word	0x40020c00
 8001814:	40021000 	.word	0x40021000
 8001818:	40021400 	.word	0x40021400
 800181c:	40021800 	.word	0x40021800
 8001820:	40021c00 	.word	0x40021c00
 8001824:	40022000 	.word	0x40022000
 8001828:	40022400 	.word	0x40022400
 800182c:	40013c00 	.word	0x40013c00

08001830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
 800183c:	4613      	mov	r3, r2
 800183e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001840:	787b      	ldrb	r3, [r7, #1]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001846:	887a      	ldrh	r2, [r7, #2]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800184c:	e003      	b.n	8001856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800184e:	887b      	ldrh	r3, [r7, #2]
 8001850:	041a      	lsls	r2, r3, #16
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	619a      	str	r2, [r3, #24]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af02      	add	r7, sp, #8
 8001868:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e108      	b.n	8001a86 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d106      	bne.n	8001894 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff fa6a 	bl	8000d68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2203      	movs	r2, #3
 8001898:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018a2:	d102      	bne.n	80018aa <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f002 ff3e 	bl	8004730 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	7c1a      	ldrb	r2, [r3, #16]
 80018bc:	f88d 2000 	strb.w	r2, [sp]
 80018c0:	3304      	adds	r3, #4
 80018c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018c4:	f002 feda 	bl	800467c <USB_CoreInit>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2202      	movs	r2, #2
 80018d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e0d5      	b.n	8001a86 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 ff36 	bl	8004752 <USB_SetCurrentMode>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2202      	movs	r2, #2
 80018f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0c6      	b.n	8001a86 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	73fb      	strb	r3, [r7, #15]
 80018fc:	e04a      	b.n	8001994 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4413      	add	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	3315      	adds	r3, #21
 800190e:	2201      	movs	r2, #1
 8001910:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001912:	7bfa      	ldrb	r2, [r7, #15]
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	4413      	add	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	3314      	adds	r3, #20
 8001922:	7bfa      	ldrb	r2, [r7, #15]
 8001924:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001926:	7bfa      	ldrb	r2, [r7, #15]
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	b298      	uxth	r0, r3
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4413      	add	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	332e      	adds	r3, #46	@ 0x2e
 800193a:	4602      	mov	r2, r0
 800193c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	3318      	adds	r3, #24
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001952:	7bfa      	ldrb	r2, [r7, #15]
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	4413      	add	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	331c      	adds	r3, #28
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001966:	7bfa      	ldrb	r2, [r7, #15]
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	3320      	adds	r3, #32
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800197a:	7bfa      	ldrb	r2, [r7, #15]
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	4413      	add	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	440b      	add	r3, r1
 8001988:	3324      	adds	r3, #36	@ 0x24
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	3301      	adds	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	791b      	ldrb	r3, [r3, #4]
 8001998:	7bfa      	ldrb	r2, [r7, #15]
 800199a:	429a      	cmp	r2, r3
 800199c:	d3af      	bcc.n	80018fe <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800199e:	2300      	movs	r3, #0
 80019a0:	73fb      	strb	r3, [r7, #15]
 80019a2:	e044      	b.n	8001a2e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019ba:	7bfa      	ldrb	r2, [r7, #15]
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4413      	add	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80019cc:	7bfa      	ldrb	r2, [r7, #15]
 80019ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019d0:	7bfa      	ldrb	r2, [r7, #15]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4413      	add	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019e6:	7bfa      	ldrb	r2, [r7, #15]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4413      	add	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019fc:	7bfa      	ldrb	r2, [r7, #15]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	4413      	add	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a12:	7bfa      	ldrb	r2, [r7, #15]
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	440b      	add	r3, r1
 8001a20:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	73fb      	strb	r3, [r7, #15]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	791b      	ldrb	r3, [r3, #4]
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d3b5      	bcc.n	80019a4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7c1a      	ldrb	r2, [r3, #16]
 8001a40:	f88d 2000 	strb.w	r2, [sp]
 8001a44:	3304      	adds	r3, #4
 8001a46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a48:	f002 fed0 	bl	80047ec <USB_DevInit>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d005      	beq.n	8001a5e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2202      	movs	r2, #2
 8001a56:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e013      	b.n	8001a86 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7b1b      	ldrb	r3, [r3, #12]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d102      	bne.n	8001a7a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f80b 	bl	8001a90 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 f88b 	bl	8004b9a <USB_DevDisconnect>

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001abe:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <HAL_PCDEx_ActivateLPM+0x44>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	10000003 	.word	0x10000003

08001ad8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001adc:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a04      	ldr	r2, [pc, #16]	@ (8001af4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40007000 	.word	0x40007000

08001af8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	4b23      	ldr	r3, [pc, #140]	@ (8001b90 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	4a22      	ldr	r2, [pc, #136]	@ (8001b90 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b0e:	4b20      	ldr	r3, [pc, #128]	@ (8001b90 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8001b94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b24:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b26:	f7ff fb03 	bl	8001130 <HAL_GetTick>
 8001b2a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b2c:	e009      	b.n	8001b42 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b2e:	f7ff faff 	bl	8001130 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b3c:	d901      	bls.n	8001b42 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e022      	b.n	8001b88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b42:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b4e:	d1ee      	bne.n	8001b2e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b50:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0f      	ldr	r2, [pc, #60]	@ (8001b94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b5c:	f7ff fae8 	bl	8001130 <HAL_GetTick>
 8001b60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b62:	e009      	b.n	8001b78 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b64:	f7ff fae4 	bl	8001130 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b72:	d901      	bls.n	8001b78 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e007      	b.n	8001b88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b78:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b84:	d1ee      	bne.n	8001b64 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40007000 	.word	0x40007000

08001b98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e29b      	b.n	80020e6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 8087 	beq.w	8001cca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bbc:	4b96      	ldr	r3, [pc, #600]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d00c      	beq.n	8001be2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bc8:	4b93      	ldr	r3, [pc, #588]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d112      	bne.n	8001bfa <HAL_RCC_OscConfig+0x62>
 8001bd4:	4b90      	ldr	r3, [pc, #576]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001be0:	d10b      	bne.n	8001bfa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be2:	4b8d      	ldr	r3, [pc, #564]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d06c      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x130>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d168      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e275      	b.n	80020e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x7a>
 8001c04:	4b84      	ldr	r3, [pc, #528]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a83      	ldr	r2, [pc, #524]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	e02e      	b.n	8001c70 <HAL_RCC_OscConfig+0xd8>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x9c>
 8001c1a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a7e      	ldr	r2, [pc, #504]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001c20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b7c      	ldr	r3, [pc, #496]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a7b      	ldr	r2, [pc, #492]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001c2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e01d      	b.n	8001c70 <HAL_RCC_OscConfig+0xd8>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0xc0>
 8001c3e:	4b76      	ldr	r3, [pc, #472]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a75      	ldr	r2, [pc, #468]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b73      	ldr	r3, [pc, #460]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a72      	ldr	r2, [pc, #456]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e00b      	b.n	8001c70 <HAL_RCC_OscConfig+0xd8>
 8001c58:	4b6f      	ldr	r3, [pc, #444]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a6e      	ldr	r2, [pc, #440]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001c5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b6c      	ldr	r3, [pc, #432]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a6b      	ldr	r2, [pc, #428]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001c6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff fa5a 	bl	8001130 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff fa56 	bl	8001130 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	@ 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e229      	b.n	80020e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b61      	ldr	r3, [pc, #388]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0xe8>
 8001c9e:	e014      	b.n	8001cca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fa46 	bl	8001130 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff fa42 	bl	8001130 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	@ 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e215      	b.n	80020e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cba:	4b57      	ldr	r3, [pc, #348]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x110>
 8001cc6:	e000      	b.n	8001cca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d069      	beq.n	8001daa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd6:	4b50      	ldr	r3, [pc, #320]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00b      	beq.n	8001cfa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ce2:	4b4d      	ldr	r3, [pc, #308]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d11c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x190>
 8001cee:	4b4a      	ldr	r3, [pc, #296]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d116      	bne.n	8001d28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfa:	4b47      	ldr	r3, [pc, #284]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <HAL_RCC_OscConfig+0x17a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e1e9      	b.n	80020e6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d12:	4b41      	ldr	r3, [pc, #260]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	493d      	ldr	r1, [pc, #244]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d26:	e040      	b.n	8001daa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d023      	beq.n	8001d78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d30:	4b39      	ldr	r3, [pc, #228]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a38      	ldr	r2, [pc, #224]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3c:	f7ff f9f8 	bl	8001130 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d44:	f7ff f9f4 	bl	8001130 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e1c7      	b.n	80020e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d56:	4b30      	ldr	r3, [pc, #192]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d62:	4b2d      	ldr	r3, [pc, #180]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4929      	ldr	r1, [pc, #164]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]
 8001d76:	e018      	b.n	8001daa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d78:	4b27      	ldr	r3, [pc, #156]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a26      	ldr	r2, [pc, #152]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001d7e:	f023 0301 	bic.w	r3, r3, #1
 8001d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7ff f9d4 	bl	8001130 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8c:	f7ff f9d0 	bl	8001130 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e1a3      	b.n	80020e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d038      	beq.n	8001e28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d019      	beq.n	8001df2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dbe:	4b16      	ldr	r3, [pc, #88]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dc2:	4a15      	ldr	r2, [pc, #84]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dca:	f7ff f9b1 	bl	8001130 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd2:	f7ff f9ad 	bl	8001130 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e180      	b.n	80020e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001de6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x23a>
 8001df0:	e01a      	b.n	8001e28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001df2:	4b09      	ldr	r3, [pc, #36]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001df4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001df6:	4a08      	ldr	r2, [pc, #32]	@ (8001e18 <HAL_RCC_OscConfig+0x280>)
 8001df8:	f023 0301 	bic.w	r3, r3, #1
 8001dfc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfe:	f7ff f997 	bl	8001130 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e04:	e00a      	b.n	8001e1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e06:	f7ff f993 	bl	8001130 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d903      	bls.n	8001e1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e166      	b.n	80020e6 <HAL_RCC_OscConfig+0x54e>
 8001e18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1c:	4b92      	ldr	r3, [pc, #584]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001e1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1ee      	bne.n	8001e06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80a4 	beq.w	8001f7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e36:	4b8c      	ldr	r3, [pc, #560]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10d      	bne.n	8001e5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	4b89      	ldr	r3, [pc, #548]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	4a88      	ldr	r2, [pc, #544]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4e:	4b86      	ldr	r3, [pc, #536]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e5e:	4b83      	ldr	r3, [pc, #524]	@ (800206c <HAL_RCC_OscConfig+0x4d4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d118      	bne.n	8001e9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001e6a:	4b80      	ldr	r3, [pc, #512]	@ (800206c <HAL_RCC_OscConfig+0x4d4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a7f      	ldr	r2, [pc, #508]	@ (800206c <HAL_RCC_OscConfig+0x4d4>)
 8001e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e76:	f7ff f95b 	bl	8001130 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7e:	f7ff f957 	bl	8001130 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b64      	cmp	r3, #100	@ 0x64
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e12a      	b.n	80020e6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e90:	4b76      	ldr	r3, [pc, #472]	@ (800206c <HAL_RCC_OscConfig+0x4d4>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0f0      	beq.n	8001e7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d106      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x31a>
 8001ea4:	4b70      	ldr	r3, [pc, #448]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea8:	4a6f      	ldr	r2, [pc, #444]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eb0:	e02d      	b.n	8001f0e <HAL_RCC_OscConfig+0x376>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x33c>
 8001eba:	4b6b      	ldr	r3, [pc, #428]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ebe:	4a6a      	ldr	r2, [pc, #424]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ec6:	4b68      	ldr	r3, [pc, #416]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eca:	4a67      	ldr	r2, [pc, #412]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001ecc:	f023 0304 	bic.w	r3, r3, #4
 8001ed0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ed2:	e01c      	b.n	8001f0e <HAL_RCC_OscConfig+0x376>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b05      	cmp	r3, #5
 8001eda:	d10c      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x35e>
 8001edc:	4b62      	ldr	r3, [pc, #392]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee0:	4a61      	ldr	r2, [pc, #388]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ee8:	4b5f      	ldr	r3, [pc, #380]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eec:	4a5e      	ldr	r2, [pc, #376]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ef4:	e00b      	b.n	8001f0e <HAL_RCC_OscConfig+0x376>
 8001ef6:	4b5c      	ldr	r3, [pc, #368]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001efa:	4a5b      	ldr	r2, [pc, #364]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001efc:	f023 0301 	bic.w	r3, r3, #1
 8001f00:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f02:	4b59      	ldr	r3, [pc, #356]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f06:	4a58      	ldr	r2, [pc, #352]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001f08:	f023 0304 	bic.w	r3, r3, #4
 8001f0c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d015      	beq.n	8001f42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f16:	f7ff f90b 	bl	8001130 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1c:	e00a      	b.n	8001f34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7ff f907 	bl	8001130 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e0d8      	b.n	80020e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f34:	4b4c      	ldr	r3, [pc, #304]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0ee      	beq.n	8001f1e <HAL_RCC_OscConfig+0x386>
 8001f40:	e014      	b.n	8001f6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f42:	f7ff f8f5 	bl	8001130 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7ff f8f1 	bl	8001130 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e0c2      	b.n	80020e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f60:	4b41      	ldr	r3, [pc, #260]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1ee      	bne.n	8001f4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d105      	bne.n	8001f7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f72:	4b3d      	ldr	r3, [pc, #244]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	4a3c      	ldr	r2, [pc, #240]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001f78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f7c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80ae 	beq.w	80020e4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f88:	4b37      	ldr	r3, [pc, #220]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d06d      	beq.n	8002070 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d14b      	bne.n	8002034 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9c:	4b32      	ldr	r3, [pc, #200]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a31      	ldr	r2, [pc, #196]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001fa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa8:	f7ff f8c2 	bl	8001130 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb0:	f7ff f8be 	bl	8001130 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e091      	b.n	80020e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc2:	4b29      	ldr	r3, [pc, #164]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69da      	ldr	r2, [r3, #28]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fdc:	019b      	lsls	r3, r3, #6
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe4:	085b      	lsrs	r3, r3, #1
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	041b      	lsls	r3, r3, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff0:	061b      	lsls	r3, r3, #24
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff8:	071b      	lsls	r3, r3, #28
 8001ffa:	491b      	ldr	r1, [pc, #108]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002000:	4b19      	ldr	r3, [pc, #100]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a18      	ldr	r2, [pc, #96]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8002006:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800200a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7ff f890 	bl	8001130 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002014:	f7ff f88c 	bl	8001130 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e05f      	b.n	80020e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002026:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0x47c>
 8002032:	e057      	b.n	80020e4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002034:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0b      	ldr	r2, [pc, #44]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 800203a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800203e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7ff f876 	bl	8001130 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002048:	f7ff f872 	bl	8001130 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e045      	b.n	80020e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205a:	4b03      	ldr	r3, [pc, #12]	@ (8002068 <HAL_RCC_OscConfig+0x4d0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x4b0>
 8002066:	e03d      	b.n	80020e4 <HAL_RCC_OscConfig+0x54c>
 8002068:	40023800 	.word	0x40023800
 800206c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002070:	4b1f      	ldr	r3, [pc, #124]	@ (80020f0 <HAL_RCC_OscConfig+0x558>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d030      	beq.n	80020e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002088:	429a      	cmp	r2, r3
 800208a:	d129      	bne.n	80020e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002096:	429a      	cmp	r2, r3
 8002098:	d122      	bne.n	80020e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020a0:	4013      	ands	r3, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d119      	bne.n	80020e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b6:	085b      	lsrs	r3, r3, #1
 80020b8:	3b01      	subs	r3, #1
 80020ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020bc:	429a      	cmp	r2, r3
 80020be:	d10f      	bne.n	80020e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d107      	bne.n	80020e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40023800 	.word	0x40023800

080020f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0d0      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800210c:	4b6a      	ldr	r3, [pc, #424]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d910      	bls.n	800213c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211a:	4b67      	ldr	r3, [pc, #412]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 020f 	bic.w	r2, r3, #15
 8002122:	4965      	ldr	r1, [pc, #404]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212a:	4b63      	ldr	r3, [pc, #396]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d001      	beq.n	800213c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0b8      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d020      	beq.n	800218a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002154:	4b59      	ldr	r3, [pc, #356]	@ (80022bc <HAL_RCC_ClockConfig+0x1c8>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	4a58      	ldr	r2, [pc, #352]	@ (80022bc <HAL_RCC_ClockConfig+0x1c8>)
 800215a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800215e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800216c:	4b53      	ldr	r3, [pc, #332]	@ (80022bc <HAL_RCC_ClockConfig+0x1c8>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	4a52      	ldr	r2, [pc, #328]	@ (80022bc <HAL_RCC_ClockConfig+0x1c8>)
 8002172:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002176:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002178:	4b50      	ldr	r3, [pc, #320]	@ (80022bc <HAL_RCC_ClockConfig+0x1c8>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	494d      	ldr	r1, [pc, #308]	@ (80022bc <HAL_RCC_ClockConfig+0x1c8>)
 8002186:	4313      	orrs	r3, r2
 8002188:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d040      	beq.n	8002218 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d107      	bne.n	80021ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	4b47      	ldr	r3, [pc, #284]	@ (80022bc <HAL_RCC_ClockConfig+0x1c8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d115      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e07f      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d107      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b6:	4b41      	ldr	r3, [pc, #260]	@ (80022bc <HAL_RCC_ClockConfig+0x1c8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d109      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e073      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c6:	4b3d      	ldr	r3, [pc, #244]	@ (80022bc <HAL_RCC_ClockConfig+0x1c8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e06b      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021d6:	4b39      	ldr	r3, [pc, #228]	@ (80022bc <HAL_RCC_ClockConfig+0x1c8>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f023 0203 	bic.w	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4936      	ldr	r1, [pc, #216]	@ (80022bc <HAL_RCC_ClockConfig+0x1c8>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021e8:	f7fe ffa2 	bl	8001130 <HAL_GetTick>
 80021ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ee:	e00a      	b.n	8002206 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f0:	f7fe ff9e 	bl	8001130 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021fe:	4293      	cmp	r3, r2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e053      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002206:	4b2d      	ldr	r3, [pc, #180]	@ (80022bc <HAL_RCC_ClockConfig+0x1c8>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 020c 	and.w	r2, r3, #12
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	429a      	cmp	r2, r3
 8002216:	d1eb      	bne.n	80021f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002218:	4b27      	ldr	r3, [pc, #156]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 030f 	and.w	r3, r3, #15
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d210      	bcs.n	8002248 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002226:	4b24      	ldr	r3, [pc, #144]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 020f 	bic.w	r2, r3, #15
 800222e:	4922      	ldr	r1, [pc, #136]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002236:	4b20      	ldr	r3, [pc, #128]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e032      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d008      	beq.n	8002266 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002254:	4b19      	ldr	r3, [pc, #100]	@ (80022bc <HAL_RCC_ClockConfig+0x1c8>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4916      	ldr	r1, [pc, #88]	@ (80022bc <HAL_RCC_ClockConfig+0x1c8>)
 8002262:	4313      	orrs	r3, r2
 8002264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d009      	beq.n	8002286 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002272:	4b12      	ldr	r3, [pc, #72]	@ (80022bc <HAL_RCC_ClockConfig+0x1c8>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	490e      	ldr	r1, [pc, #56]	@ (80022bc <HAL_RCC_ClockConfig+0x1c8>)
 8002282:	4313      	orrs	r3, r2
 8002284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002286:	f000 f821 	bl	80022cc <HAL_RCC_GetSysClockFreq>
 800228a:	4602      	mov	r2, r0
 800228c:	4b0b      	ldr	r3, [pc, #44]	@ (80022bc <HAL_RCC_ClockConfig+0x1c8>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	490a      	ldr	r1, [pc, #40]	@ (80022c0 <HAL_RCC_ClockConfig+0x1cc>)
 8002298:	5ccb      	ldrb	r3, [r1, r3]
 800229a:	fa22 f303 	lsr.w	r3, r2, r3
 800229e:	4a09      	ldr	r2, [pc, #36]	@ (80022c4 <HAL_RCC_ClockConfig+0x1d0>)
 80022a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022a2:	4b09      	ldr	r3, [pc, #36]	@ (80022c8 <HAL_RCC_ClockConfig+0x1d4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe fefe 	bl	80010a8 <HAL_InitTick>

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023c00 	.word	0x40023c00
 80022bc:	40023800 	.word	0x40023800
 80022c0:	08005d1c 	.word	0x08005d1c
 80022c4:	20000000 	.word	0x20000000
 80022c8:	20000004 	.word	0x20000004

080022cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022d0:	b094      	sub	sp, #80	@ 0x50
 80022d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80022d8:	2300      	movs	r3, #0
 80022da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022dc:	2300      	movs	r3, #0
 80022de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022e4:	4b79      	ldr	r3, [pc, #484]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x200>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 030c 	and.w	r3, r3, #12
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d00d      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x40>
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	f200 80e1 	bhi.w	80024b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d002      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x34>
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d003      	beq.n	8002306 <HAL_RCC_GetSysClockFreq+0x3a>
 80022fe:	e0db      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002300:	4b73      	ldr	r3, [pc, #460]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002302:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002304:	e0db      	b.n	80024be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002306:	4b73      	ldr	r3, [pc, #460]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002308:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800230a:	e0d8      	b.n	80024be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800230c:	4b6f      	ldr	r3, [pc, #444]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x200>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002314:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002316:	4b6d      	ldr	r3, [pc, #436]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d063      	beq.n	80023ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002322:	4b6a      	ldr	r3, [pc, #424]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	099b      	lsrs	r3, r3, #6
 8002328:	2200      	movs	r2, #0
 800232a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800232c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800232e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002334:	633b      	str	r3, [r7, #48]	@ 0x30
 8002336:	2300      	movs	r3, #0
 8002338:	637b      	str	r3, [r7, #52]	@ 0x34
 800233a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800233e:	4622      	mov	r2, r4
 8002340:	462b      	mov	r3, r5
 8002342:	f04f 0000 	mov.w	r0, #0
 8002346:	f04f 0100 	mov.w	r1, #0
 800234a:	0159      	lsls	r1, r3, #5
 800234c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002350:	0150      	lsls	r0, r2, #5
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4621      	mov	r1, r4
 8002358:	1a51      	subs	r1, r2, r1
 800235a:	6139      	str	r1, [r7, #16]
 800235c:	4629      	mov	r1, r5
 800235e:	eb63 0301 	sbc.w	r3, r3, r1
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002370:	4659      	mov	r1, fp
 8002372:	018b      	lsls	r3, r1, #6
 8002374:	4651      	mov	r1, sl
 8002376:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800237a:	4651      	mov	r1, sl
 800237c:	018a      	lsls	r2, r1, #6
 800237e:	4651      	mov	r1, sl
 8002380:	ebb2 0801 	subs.w	r8, r2, r1
 8002384:	4659      	mov	r1, fp
 8002386:	eb63 0901 	sbc.w	r9, r3, r1
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002396:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800239a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800239e:	4690      	mov	r8, r2
 80023a0:	4699      	mov	r9, r3
 80023a2:	4623      	mov	r3, r4
 80023a4:	eb18 0303 	adds.w	r3, r8, r3
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	462b      	mov	r3, r5
 80023ac:	eb49 0303 	adc.w	r3, r9, r3
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023be:	4629      	mov	r1, r5
 80023c0:	024b      	lsls	r3, r1, #9
 80023c2:	4621      	mov	r1, r4
 80023c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023c8:	4621      	mov	r1, r4
 80023ca:	024a      	lsls	r2, r1, #9
 80023cc:	4610      	mov	r0, r2
 80023ce:	4619      	mov	r1, r3
 80023d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023d2:	2200      	movs	r2, #0
 80023d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80023dc:	f7fd ff98 	bl	8000310 <__aeabi_uldivmod>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4613      	mov	r3, r2
 80023e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023e8:	e058      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ea:	4b38      	ldr	r3, [pc, #224]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x200>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	099b      	lsrs	r3, r3, #6
 80023f0:	2200      	movs	r2, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	4611      	mov	r1, r2
 80023f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023fa:	623b      	str	r3, [r7, #32]
 80023fc:	2300      	movs	r3, #0
 80023fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002400:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002404:	4642      	mov	r2, r8
 8002406:	464b      	mov	r3, r9
 8002408:	f04f 0000 	mov.w	r0, #0
 800240c:	f04f 0100 	mov.w	r1, #0
 8002410:	0159      	lsls	r1, r3, #5
 8002412:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002416:	0150      	lsls	r0, r2, #5
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4641      	mov	r1, r8
 800241e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002422:	4649      	mov	r1, r9
 8002424:	eb63 0b01 	sbc.w	fp, r3, r1
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002434:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002438:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800243c:	ebb2 040a 	subs.w	r4, r2, sl
 8002440:	eb63 050b 	sbc.w	r5, r3, fp
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	00eb      	lsls	r3, r5, #3
 800244e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002452:	00e2      	lsls	r2, r4, #3
 8002454:	4614      	mov	r4, r2
 8002456:	461d      	mov	r5, r3
 8002458:	4643      	mov	r3, r8
 800245a:	18e3      	adds	r3, r4, r3
 800245c:	603b      	str	r3, [r7, #0]
 800245e:	464b      	mov	r3, r9
 8002460:	eb45 0303 	adc.w	r3, r5, r3
 8002464:	607b      	str	r3, [r7, #4]
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002472:	4629      	mov	r1, r5
 8002474:	028b      	lsls	r3, r1, #10
 8002476:	4621      	mov	r1, r4
 8002478:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800247c:	4621      	mov	r1, r4
 800247e:	028a      	lsls	r2, r1, #10
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002486:	2200      	movs	r2, #0
 8002488:	61bb      	str	r3, [r7, #24]
 800248a:	61fa      	str	r2, [r7, #28]
 800248c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002490:	f7fd ff3e 	bl	8000310 <__aeabi_uldivmod>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4613      	mov	r3, r2
 800249a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800249c:	4b0b      	ldr	r3, [pc, #44]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x200>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	0c1b      	lsrs	r3, r3, #16
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	3301      	adds	r3, #1
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80024ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024b6:	e002      	b.n	80024be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024b8:	4b05      	ldr	r3, [pc, #20]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80024ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3750      	adds	r7, #80	@ 0x50
 80024c4:	46bd      	mov	sp, r7
 80024c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800
 80024d0:	00f42400 	.word	0x00f42400
 80024d4:	007a1200 	.word	0x007a1200

080024d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024dc:	4b03      	ldr	r3, [pc, #12]	@ (80024ec <HAL_RCC_GetHCLKFreq+0x14>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000000 	.word	0x20000000

080024f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024f4:	f7ff fff0 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 80024f8:	4602      	mov	r2, r0
 80024fa:	4b05      	ldr	r3, [pc, #20]	@ (8002510 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	0a9b      	lsrs	r3, r3, #10
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	4903      	ldr	r1, [pc, #12]	@ (8002514 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002506:	5ccb      	ldrb	r3, [r1, r3]
 8002508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800250c:	4618      	mov	r0, r3
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40023800 	.word	0x40023800
 8002514:	08005d2c 	.word	0x08005d2c

08002518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800251c:	f7ff ffdc 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 8002520:	4602      	mov	r2, r0
 8002522:	4b05      	ldr	r3, [pc, #20]	@ (8002538 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	0b5b      	lsrs	r3, r3, #13
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	4903      	ldr	r1, [pc, #12]	@ (800253c <HAL_RCC_GetPCLK2Freq+0x24>)
 800252e:	5ccb      	ldrb	r3, [r1, r3]
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002534:	4618      	mov	r0, r3
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40023800 	.word	0x40023800
 800253c:	08005d2c 	.word	0x08005d2c

08002540 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d012      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002568:	4b69      	ldr	r3, [pc, #420]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	4a68      	ldr	r2, [pc, #416]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002572:	6093      	str	r3, [r2, #8]
 8002574:	4b66      	ldr	r3, [pc, #408]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800257c:	4964      	ldr	r1, [pc, #400]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800258a:	2301      	movs	r3, #1
 800258c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d017      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800259a:	4b5d      	ldr	r3, [pc, #372]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025a0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a8:	4959      	ldr	r1, [pc, #356]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025b8:	d101      	bne.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80025ba:	2301      	movs	r3, #1
 80025bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80025c6:	2301      	movs	r3, #1
 80025c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d017      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025dc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	494a      	ldr	r1, [pc, #296]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025f4:	d101      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002602:	2301      	movs	r3, #1
 8002604:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002612:	2301      	movs	r3, #1
 8002614:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 808b 	beq.w	800273a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002624:	4b3a      	ldr	r3, [pc, #232]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	4a39      	ldr	r2, [pc, #228]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800262a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800262e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002630:	4b37      	ldr	r3, [pc, #220]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800263c:	4b35      	ldr	r3, [pc, #212]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a34      	ldr	r2, [pc, #208]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002642:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002646:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002648:	f7fe fd72 	bl	8001130 <HAL_GetTick>
 800264c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002650:	f7fe fd6e 	bl	8001130 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	@ 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e38f      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002662:	4b2c      	ldr	r3, [pc, #176]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800266e:	4b28      	ldr	r3, [pc, #160]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002676:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d035      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	429a      	cmp	r2, r3
 800268a:	d02e      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800268c:	4b20      	ldr	r3, [pc, #128]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800268e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002690:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002694:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002696:	4b1e      	ldr	r3, [pc, #120]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269a:	4a1d      	ldr	r2, [pc, #116]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80026ae:	4a18      	ldr	r2, [pc, #96]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026b4:	4b16      	ldr	r3, [pc, #88]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d114      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7fe fd36 	bl	8001130 <HAL_GetTick>
 80026c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c6:	e00a      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c8:	f7fe fd32 	bl	8001130 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e351      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026de:	4b0c      	ldr	r3, [pc, #48]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0ee      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026f6:	d111      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80026f8:	4b05      	ldr	r3, [pc, #20]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002704:	4b04      	ldr	r3, [pc, #16]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002706:	400b      	ands	r3, r1
 8002708:	4901      	ldr	r1, [pc, #4]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800270a:	4313      	orrs	r3, r2
 800270c:	608b      	str	r3, [r1, #8]
 800270e:	e00b      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002710:	40023800 	.word	0x40023800
 8002714:	40007000 	.word	0x40007000
 8002718:	0ffffcff 	.word	0x0ffffcff
 800271c:	4bac      	ldr	r3, [pc, #688]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	4aab      	ldr	r2, [pc, #684]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002722:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002726:	6093      	str	r3, [r2, #8]
 8002728:	4ba9      	ldr	r3, [pc, #676]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800272a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002734:	49a6      	ldr	r1, [pc, #664]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002736:	4313      	orrs	r3, r2
 8002738:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b00      	cmp	r3, #0
 8002744:	d010      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002746:	4ba2      	ldr	r3, [pc, #648]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002748:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800274c:	4aa0      	ldr	r2, [pc, #640]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800274e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002752:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002756:	4b9e      	ldr	r3, [pc, #632]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002758:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002760:	499b      	ldr	r1, [pc, #620]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00a      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002774:	4b96      	ldr	r3, [pc, #600]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800277a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002782:	4993      	ldr	r1, [pc, #588]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002796:	4b8e      	ldr	r3, [pc, #568]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800279c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027a4:	498a      	ldr	r1, [pc, #552]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00a      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027b8:	4b85      	ldr	r3, [pc, #532]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027c6:	4982      	ldr	r1, [pc, #520]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027da:	4b7d      	ldr	r3, [pc, #500]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e8:	4979      	ldr	r1, [pc, #484]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00a      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027fc:	4b74      	ldr	r3, [pc, #464]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002802:	f023 0203 	bic.w	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280a:	4971      	ldr	r1, [pc, #452]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00a      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800281e:	4b6c      	ldr	r3, [pc, #432]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002824:	f023 020c 	bic.w	r2, r3, #12
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800282c:	4968      	ldr	r1, [pc, #416]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00a      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002840:	4b63      	ldr	r3, [pc, #396]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002846:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800284e:	4960      	ldr	r1, [pc, #384]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002862:	4b5b      	ldr	r3, [pc, #364]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002868:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002870:	4957      	ldr	r1, [pc, #348]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002884:	4b52      	ldr	r3, [pc, #328]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002892:	494f      	ldr	r1, [pc, #316]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80028a6:	4b4a      	ldr	r3, [pc, #296]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b4:	4946      	ldr	r1, [pc, #280]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80028c8:	4b41      	ldr	r3, [pc, #260]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d6:	493e      	ldr	r1, [pc, #248]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80028ea:	4b39      	ldr	r3, [pc, #228]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f8:	4935      	ldr	r1, [pc, #212]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800290c:	4b30      	ldr	r3, [pc, #192]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800290e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002912:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800291a:	492d      	ldr	r1, [pc, #180]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d011      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800292e:	4b28      	ldr	r3, [pc, #160]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002934:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800293c:	4924      	ldr	r1, [pc, #144]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002948:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800294c:	d101      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800294e:	2301      	movs	r3, #1
 8002950:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800295e:	2301      	movs	r3, #1
 8002960:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800296e:	4b18      	ldr	r3, [pc, #96]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002974:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800297c:	4914      	ldr	r1, [pc, #80]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00b      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002990:	4b0f      	ldr	r3, [pc, #60]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002996:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029a0:	490b      	ldr	r1, [pc, #44]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00f      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80029b4:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ba:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029c4:	4902      	ldr	r1, [pc, #8]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80029cc:	e002      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00b      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029e0:	4b8a      	ldr	r3, [pc, #552]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f0:	4986      	ldr	r1, [pc, #536]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00b      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002a04:	4b81      	ldr	r3, [pc, #516]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a0a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a14:	497d      	ldr	r1, [pc, #500]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d006      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 80d6 	beq.w	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a30:	4b76      	ldr	r3, [pc, #472]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a75      	ldr	r2, [pc, #468]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a3c:	f7fe fb78 	bl	8001130 <HAL_GetTick>
 8002a40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a44:	f7fe fb74 	bl	8001130 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	@ 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e195      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a56:	4b6d      	ldr	r3, [pc, #436]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d021      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d11d      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a76:	4b65      	ldr	r3, [pc, #404]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a84:	4b61      	ldr	r3, [pc, #388]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a8a:	0e1b      	lsrs	r3, r3, #24
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	019a      	lsls	r2, r3, #6
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	041b      	lsls	r3, r3, #16
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	061b      	lsls	r3, r3, #24
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	071b      	lsls	r3, r3, #28
 8002aaa:	4958      	ldr	r1, [pc, #352]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d004      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ac6:	d00a      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d02e      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002adc:	d129      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ade:	4b4b      	ldr	r3, [pc, #300]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ae4:	0c1b      	lsrs	r3, r3, #16
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002aec:	4b47      	ldr	r3, [pc, #284]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002af2:	0f1b      	lsrs	r3, r3, #28
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	019a      	lsls	r2, r3, #6
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	041b      	lsls	r3, r3, #16
 8002b04:	431a      	orrs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	061b      	lsls	r3, r3, #24
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	071b      	lsls	r3, r3, #28
 8002b12:	493e      	ldr	r1, [pc, #248]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b1a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b20:	f023 021f 	bic.w	r2, r3, #31
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	4938      	ldr	r1, [pc, #224]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01d      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b3e:	4b33      	ldr	r3, [pc, #204]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b44:	0e1b      	lsrs	r3, r3, #24
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b52:	0f1b      	lsrs	r3, r3, #28
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	019a      	lsls	r2, r3, #6
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	041b      	lsls	r3, r3, #16
 8002b66:	431a      	orrs	r2, r3
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	061b      	lsls	r3, r3, #24
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	071b      	lsls	r3, r3, #28
 8002b72:	4926      	ldr	r1, [pc, #152]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d011      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	019a      	lsls	r2, r3, #6
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	041b      	lsls	r3, r3, #16
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	061b      	lsls	r3, r3, #24
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	071b      	lsls	r3, r3, #28
 8002ba2:	491a      	ldr	r1, [pc, #104]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002baa:	4b18      	ldr	r3, [pc, #96]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a17      	ldr	r2, [pc, #92]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bb0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002bb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bb6:	f7fe fabb 	bl	8001130 <HAL_GetTick>
 8002bba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bbe:	f7fe fab7 	bl	8001130 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b64      	cmp	r3, #100	@ 0x64
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e0d8      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	f040 80ce 	bne.w	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002be4:	4b09      	ldr	r3, [pc, #36]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a08      	ldr	r2, [pc, #32]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf0:	f7fe fa9e 	bl	8001130 <HAL_GetTick>
 8002bf4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bf6:	e00b      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bf8:	f7fe fa9a 	bl	8001130 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	@ 0x64
 8002c04:	d904      	bls.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e0bb      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c10:	4b5e      	ldr	r3, [pc, #376]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c1c:	d0ec      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d009      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d02e      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d12a      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c46:	4b51      	ldr	r3, [pc, #324]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c4c:	0c1b      	lsrs	r3, r3, #16
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c54:	4b4d      	ldr	r3, [pc, #308]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c5a:	0f1b      	lsrs	r3, r3, #28
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	019a      	lsls	r2, r3, #6
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	041b      	lsls	r3, r3, #16
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	061b      	lsls	r3, r3, #24
 8002c74:	431a      	orrs	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	071b      	lsls	r3, r3, #28
 8002c7a:	4944      	ldr	r1, [pc, #272]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c82:	4b42      	ldr	r3, [pc, #264]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c88:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c90:	3b01      	subs	r3, #1
 8002c92:	021b      	lsls	r3, r3, #8
 8002c94:	493d      	ldr	r1, [pc, #244]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d022      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cb0:	d11d      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cb2:	4b36      	ldr	r3, [pc, #216]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb8:	0e1b      	lsrs	r3, r3, #24
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cc0:	4b32      	ldr	r3, [pc, #200]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc6:	0f1b      	lsrs	r3, r3, #28
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	019a      	lsls	r2, r3, #6
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	041b      	lsls	r3, r3, #16
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	061b      	lsls	r3, r3, #24
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	071b      	lsls	r3, r3, #28
 8002ce6:	4929      	ldr	r1, [pc, #164]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d028      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cfa:	4b24      	ldr	r3, [pc, #144]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d00:	0e1b      	lsrs	r3, r3, #24
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d08:	4b20      	ldr	r3, [pc, #128]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d0e:	0c1b      	lsrs	r3, r3, #16
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	019a      	lsls	r2, r3, #6
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	041b      	lsls	r3, r3, #16
 8002d20:	431a      	orrs	r2, r3
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	061b      	lsls	r3, r3, #24
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	071b      	lsls	r3, r3, #28
 8002d2e:	4917      	ldr	r1, [pc, #92]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002d36:	4b15      	ldr	r3, [pc, #84]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d44:	4911      	ldr	r1, [pc, #68]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a0e      	ldr	r2, [pc, #56]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d58:	f7fe f9ea 	bl	8001130 <HAL_GetTick>
 8002d5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d60:	f7fe f9e6 	bl	8001130 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	@ 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e007      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d72:	4b06      	ldr	r3, [pc, #24]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d7e:	d1ef      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3720      	adds	r7, #32
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023800 	.word	0x40023800

08002d90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e040      	b.n	8002e24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d106      	bne.n	8002db8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fd ff72 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2224      	movs	r2, #36	@ 0x24
 8002dbc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0201 	bic.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 feca 	bl	8003b70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fc63 	bl	80036a8 <UART_SetConfig>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e01b      	b.n	8002e24 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002dfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 ff49 	bl	8003cb4 <UART_CheckIdleState>
 8002e22:	4603      	mov	r3, r0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08a      	sub	sp, #40	@ 0x28
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	d177      	bne.n	8002f34 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <HAL_UART_Transmit+0x24>
 8002e4a:	88fb      	ldrh	r3, [r7, #6]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e070      	b.n	8002f36 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2221      	movs	r2, #33	@ 0x21
 8002e60:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e62:	f7fe f965 	bl	8001130 <HAL_GetTick>
 8002e66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	88fa      	ldrh	r2, [r7, #6]
 8002e6c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	88fa      	ldrh	r2, [r7, #6]
 8002e74:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e80:	d108      	bne.n	8002e94 <HAL_UART_Transmit+0x68>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d104      	bne.n	8002e94 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	e003      	b.n	8002e9c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e9c:	e02f      	b.n	8002efe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2180      	movs	r1, #128	@ 0x80
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 ffab 	bl	8003e04 <UART_WaitOnFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d004      	beq.n	8002ebe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e03b      	b.n	8002f36 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10b      	bne.n	8002edc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ed2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	3302      	adds	r3, #2
 8002ed8:	61bb      	str	r3, [r7, #24]
 8002eda:	e007      	b.n	8002eec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	781a      	ldrb	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1c9      	bne.n	8002e9e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2200      	movs	r2, #0
 8002f12:	2140      	movs	r1, #64	@ 0x40
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 ff75 	bl	8003e04 <UART_WaitOnFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d004      	beq.n	8002f2a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e005      	b.n	8002f36 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	e000      	b.n	8002f36 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002f34:	2302      	movs	r3, #2
  }
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3720      	adds	r7, #32
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b08b      	sub	sp, #44	@ 0x2c
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	d147      	bne.n	8002fe6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <HAL_UART_Transmit_IT+0x22>
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e040      	b.n	8002fe8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	88fa      	ldrh	r2, [r7, #6]
 8002f70:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	88fa      	ldrh	r2, [r7, #6]
 8002f78:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2221      	movs	r2, #33	@ 0x21
 8002f8e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f98:	d107      	bne.n	8002faa <HAL_UART_Transmit_IT+0x6a>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d103      	bne.n	8002faa <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4a13      	ldr	r2, [pc, #76]	@ (8002ff4 <HAL_UART_Transmit_IT+0xb4>)
 8002fa6:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002fa8:	e002      	b.n	8002fb0 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4a12      	ldr	r2, [pc, #72]	@ (8002ff8 <HAL_UART_Transmit_IT+0xb8>)
 8002fae:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	e853 3f00 	ldrex	r3, [r3]
 8002fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fce:	623b      	str	r3, [r7, #32]
 8002fd0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd2:	69f9      	ldr	r1, [r7, #28]
 8002fd4:	6a3a      	ldr	r2, [r7, #32]
 8002fd6:	e841 2300 	strex	r3, r2, [r1]
 8002fda:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1e6      	bne.n	8002fb0 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e000      	b.n	8002fe8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002fe6:	2302      	movs	r3, #2
  }
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	372c      	adds	r7, #44	@ 0x2c
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	08004217 	.word	0x08004217
 8002ff8:	08004161 	.word	0x08004161

08002ffc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08a      	sub	sp, #40	@ 0x28
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	4613      	mov	r3, r2
 8003008:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003010:	2b20      	cmp	r3, #32
 8003012:	d132      	bne.n	800307a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <HAL_UART_Receive_IT+0x24>
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e02b      	b.n	800307c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d018      	beq.n	800306a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	e853 3f00 	ldrex	r3, [r3]
 8003044:	613b      	str	r3, [r7, #16]
   return(result);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800304c:	627b      	str	r3, [r7, #36]	@ 0x24
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003056:	623b      	str	r3, [r7, #32]
 8003058:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305a:	69f9      	ldr	r1, [r7, #28]
 800305c:	6a3a      	ldr	r2, [r7, #32]
 800305e:	e841 2300 	strex	r3, r2, [r1]
 8003062:	61bb      	str	r3, [r7, #24]
   return(result);
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1e6      	bne.n	8003038 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800306a:	88fb      	ldrh	r3, [r7, #6]
 800306c:	461a      	mov	r2, r3
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 ff35 	bl	8003ee0 <UART_Start_Receive_IT>
 8003076:	4603      	mov	r3, r0
 8003078:	e000      	b.n	800307c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800307a:	2302      	movs	r3, #2
  }
}
 800307c:	4618      	mov	r0, r3
 800307e:	3728      	adds	r7, #40	@ 0x28
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b0ba      	sub	sp, #232	@ 0xe8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80030aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80030ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80030b2:	4013      	ands	r3, r2
 80030b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80030b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d115      	bne.n	80030ec <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80030c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00f      	beq.n	80030ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d009      	beq.n	80030ec <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 82ac 	beq.w	800363a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	4798      	blx	r3
      }
      return;
 80030ea:	e2a6      	b.n	800363a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80030ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 8117 	beq.w	8003324 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80030f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003102:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003106:	4b85      	ldr	r3, [pc, #532]	@ (800331c <HAL_UART_IRQHandler+0x298>)
 8003108:	4013      	ands	r3, r2
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 810a 	beq.w	8003324 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d011      	beq.n	8003140 <HAL_UART_IRQHandler+0xbc>
 800311c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00b      	beq.n	8003140 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2201      	movs	r2, #1
 800312e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003136:	f043 0201 	orr.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d011      	beq.n	8003170 <HAL_UART_IRQHandler+0xec>
 800314c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00b      	beq.n	8003170 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2202      	movs	r2, #2
 800315e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003166:	f043 0204 	orr.w	r2, r3, #4
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d011      	beq.n	80031a0 <HAL_UART_IRQHandler+0x11c>
 800317c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00b      	beq.n	80031a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2204      	movs	r2, #4
 800318e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003196:	f043 0202 	orr.w	r2, r3, #2
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d017      	beq.n	80031dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d105      	bne.n	80031c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80031b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00b      	beq.n	80031dc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2208      	movs	r2, #8
 80031ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031d2:	f043 0208 	orr.w	r2, r3, #8
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80031dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d012      	beq.n	800320e <HAL_UART_IRQHandler+0x18a>
 80031e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00c      	beq.n	800320e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80031fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003204:	f043 0220 	orr.w	r2, r3, #32
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 8212 	beq.w	800363e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800321a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800321e:	f003 0320 	and.w	r3, r3, #32
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00d      	beq.n	8003242 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003248:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003256:	2b40      	cmp	r3, #64	@ 0x40
 8003258:	d005      	beq.n	8003266 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800325a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800325e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003262:	2b00      	cmp	r3, #0
 8003264:	d04f      	beq.n	8003306 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 ff00 	bl	800406c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003276:	2b40      	cmp	r3, #64	@ 0x40
 8003278:	d141      	bne.n	80032fe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3308      	adds	r3, #8
 8003280:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003284:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003288:	e853 3f00 	ldrex	r3, [r3]
 800328c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003290:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003294:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003298:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3308      	adds	r3, #8
 80032a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032b6:	e841 2300 	strex	r3, r2, [r1]
 80032ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1d9      	bne.n	800327a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d013      	beq.n	80032f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032d2:	4a13      	ldr	r2, [pc, #76]	@ (8003320 <HAL_UART_IRQHandler+0x29c>)
 80032d4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fe f8d9 	bl	8001492 <HAL_DMA_Abort_IT>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d017      	beq.n	8003316 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80032f0:	4610      	mov	r0, r2
 80032f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f4:	e00f      	b.n	8003316 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f9b6 	bl	8003668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032fc:	e00b      	b.n	8003316 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f9b2 	bl	8003668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003304:	e007      	b.n	8003316 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f9ae 	bl	8003668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003314:	e193      	b.n	800363e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003316:	bf00      	nop
    return;
 8003318:	e191      	b.n	800363e <HAL_UART_IRQHandler+0x5ba>
 800331a:	bf00      	nop
 800331c:	04000120 	.word	0x04000120
 8003320:	08004135 	.word	0x08004135

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003328:	2b01      	cmp	r3, #1
 800332a:	f040 814c 	bne.w	80035c6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800332e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 8145 	beq.w	80035c6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800333c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 813e 	beq.w	80035c6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2210      	movs	r2, #16
 8003350:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800335c:	2b40      	cmp	r3, #64	@ 0x40
 800335e:	f040 80b6 	bne.w	80034ce <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800336e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 8165 	beq.w	8003642 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800337e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003382:	429a      	cmp	r2, r3
 8003384:	f080 815d 	bcs.w	8003642 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800338e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800339c:	f000 8086 	beq.w	80034ac <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033ac:	e853 3f00 	ldrex	r3, [r3]
 80033b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	461a      	mov	r2, r3
 80033c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80033ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80033ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80033d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80033da:	e841 2300 	strex	r3, r2, [r1]
 80033de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80033e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1da      	bne.n	80033a0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3308      	adds	r3, #8
 80033f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033f4:	e853 3f00 	ldrex	r3, [r3]
 80033f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80033fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033fc:	f023 0301 	bic.w	r3, r3, #1
 8003400:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3308      	adds	r3, #8
 800340a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800340e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003412:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003414:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003416:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800341a:	e841 2300 	strex	r3, r2, [r1]
 800341e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003420:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1e1      	bne.n	80033ea <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3308      	adds	r3, #8
 800342c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003430:	e853 3f00 	ldrex	r3, [r3]
 8003434:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003436:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003438:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800343c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3308      	adds	r3, #8
 8003446:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800344a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800344c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003450:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003452:	e841 2300 	strex	r3, r2, [r1]
 8003456:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003458:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1e3      	bne.n	8003426 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2220      	movs	r2, #32
 8003462:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003474:	e853 3f00 	ldrex	r3, [r3]
 8003478:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800347a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800347c:	f023 0310 	bic.w	r3, r3, #16
 8003480:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800348e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003490:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003492:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003494:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003496:	e841 2300 	strex	r3, r2, [r1]
 800349a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800349c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1e4      	bne.n	800346c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fd ff83 	bl	80013b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80034be:	b29b      	uxth	r3, r3
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	4619      	mov	r1, r3
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f8d8 	bl	800367c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034cc:	e0b9      	b.n	8003642 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80034da:	b29b      	uxth	r3, r3
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 80ab 	beq.w	8003646 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80034f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 80a6 	beq.w	8003646 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003502:	e853 3f00 	ldrex	r3, [r3]
 8003506:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800350a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800350e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800351c:	647b      	str	r3, [r7, #68]	@ 0x44
 800351e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003520:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003522:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003524:	e841 2300 	strex	r3, r2, [r1]
 8003528:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800352a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1e4      	bne.n	80034fa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3308      	adds	r3, #8
 8003536:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353a:	e853 3f00 	ldrex	r3, [r3]
 800353e:	623b      	str	r3, [r7, #32]
   return(result);
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	f023 0301 	bic.w	r3, r3, #1
 8003546:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3308      	adds	r3, #8
 8003550:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003554:	633a      	str	r2, [r7, #48]	@ 0x30
 8003556:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003558:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800355a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800355c:	e841 2300 	strex	r3, r2, [r1]
 8003560:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e3      	bne.n	8003530 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2220      	movs	r2, #32
 800356c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	e853 3f00 	ldrex	r3, [r3]
 8003588:	60fb      	str	r3, [r7, #12]
   return(result);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f023 0310 	bic.w	r3, r3, #16
 8003590:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	461a      	mov	r2, r3
 800359a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800359e:	61fb      	str	r3, [r7, #28]
 80035a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a2:	69b9      	ldr	r1, [r7, #24]
 80035a4:	69fa      	ldr	r2, [r7, #28]
 80035a6:	e841 2300 	strex	r3, r2, [r1]
 80035aa:	617b      	str	r3, [r7, #20]
   return(result);
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1e4      	bne.n	800357c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2202      	movs	r2, #2
 80035b6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035bc:	4619      	mov	r1, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f85c 	bl	800367c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035c4:	e03f      	b.n	8003646 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80035c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00e      	beq.n	80035f0 <HAL_UART_IRQHandler+0x56c>
 80035d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d008      	beq.n	80035f0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80035e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f853 	bl	8003694 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035ee:	e02d      	b.n	800364c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80035f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00e      	beq.n	800361a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80035fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01c      	beq.n	800364a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	4798      	blx	r3
    }
    return;
 8003618:	e017      	b.n	800364a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800361a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800361e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d012      	beq.n	800364c <HAL_UART_IRQHandler+0x5c8>
 8003626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800362a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00c      	beq.n	800364c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fe4f 	bl	80042d6 <UART_EndTransmit_IT>
    return;
 8003638:	e008      	b.n	800364c <HAL_UART_IRQHandler+0x5c8>
      return;
 800363a:	bf00      	nop
 800363c:	e006      	b.n	800364c <HAL_UART_IRQHandler+0x5c8>
    return;
 800363e:	bf00      	nop
 8003640:	e004      	b.n	800364c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003642:	bf00      	nop
 8003644:	e002      	b.n	800364c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003646:	bf00      	nop
 8003648:	e000      	b.n	800364c <HAL_UART_IRQHandler+0x5c8>
    return;
 800364a:	bf00      	nop
  }

}
 800364c:	37e8      	adds	r7, #232	@ 0xe8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop

08003654 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	4ba6      	ldr	r3, [pc, #664]	@ (800396c <UART_SetConfig+0x2c4>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	6979      	ldr	r1, [r7, #20]
 80036dc:	430b      	orrs	r3, r1
 80036de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	430a      	orrs	r2, r1
 8003718:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a94      	ldr	r2, [pc, #592]	@ (8003970 <UART_SetConfig+0x2c8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d120      	bne.n	8003766 <UART_SetConfig+0xbe>
 8003724:	4b93      	ldr	r3, [pc, #588]	@ (8003974 <UART_SetConfig+0x2cc>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	2b03      	cmp	r3, #3
 8003730:	d816      	bhi.n	8003760 <UART_SetConfig+0xb8>
 8003732:	a201      	add	r2, pc, #4	@ (adr r2, 8003738 <UART_SetConfig+0x90>)
 8003734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003738:	08003749 	.word	0x08003749
 800373c:	08003755 	.word	0x08003755
 8003740:	0800374f 	.word	0x0800374f
 8003744:	0800375b 	.word	0x0800375b
 8003748:	2301      	movs	r3, #1
 800374a:	77fb      	strb	r3, [r7, #31]
 800374c:	e150      	b.n	80039f0 <UART_SetConfig+0x348>
 800374e:	2302      	movs	r3, #2
 8003750:	77fb      	strb	r3, [r7, #31]
 8003752:	e14d      	b.n	80039f0 <UART_SetConfig+0x348>
 8003754:	2304      	movs	r3, #4
 8003756:	77fb      	strb	r3, [r7, #31]
 8003758:	e14a      	b.n	80039f0 <UART_SetConfig+0x348>
 800375a:	2308      	movs	r3, #8
 800375c:	77fb      	strb	r3, [r7, #31]
 800375e:	e147      	b.n	80039f0 <UART_SetConfig+0x348>
 8003760:	2310      	movs	r3, #16
 8003762:	77fb      	strb	r3, [r7, #31]
 8003764:	e144      	b.n	80039f0 <UART_SetConfig+0x348>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a83      	ldr	r2, [pc, #524]	@ (8003978 <UART_SetConfig+0x2d0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d132      	bne.n	80037d6 <UART_SetConfig+0x12e>
 8003770:	4b80      	ldr	r3, [pc, #512]	@ (8003974 <UART_SetConfig+0x2cc>)
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	2b0c      	cmp	r3, #12
 800377c:	d828      	bhi.n	80037d0 <UART_SetConfig+0x128>
 800377e:	a201      	add	r2, pc, #4	@ (adr r2, 8003784 <UART_SetConfig+0xdc>)
 8003780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003784:	080037b9 	.word	0x080037b9
 8003788:	080037d1 	.word	0x080037d1
 800378c:	080037d1 	.word	0x080037d1
 8003790:	080037d1 	.word	0x080037d1
 8003794:	080037c5 	.word	0x080037c5
 8003798:	080037d1 	.word	0x080037d1
 800379c:	080037d1 	.word	0x080037d1
 80037a0:	080037d1 	.word	0x080037d1
 80037a4:	080037bf 	.word	0x080037bf
 80037a8:	080037d1 	.word	0x080037d1
 80037ac:	080037d1 	.word	0x080037d1
 80037b0:	080037d1 	.word	0x080037d1
 80037b4:	080037cb 	.word	0x080037cb
 80037b8:	2300      	movs	r3, #0
 80037ba:	77fb      	strb	r3, [r7, #31]
 80037bc:	e118      	b.n	80039f0 <UART_SetConfig+0x348>
 80037be:	2302      	movs	r3, #2
 80037c0:	77fb      	strb	r3, [r7, #31]
 80037c2:	e115      	b.n	80039f0 <UART_SetConfig+0x348>
 80037c4:	2304      	movs	r3, #4
 80037c6:	77fb      	strb	r3, [r7, #31]
 80037c8:	e112      	b.n	80039f0 <UART_SetConfig+0x348>
 80037ca:	2308      	movs	r3, #8
 80037cc:	77fb      	strb	r3, [r7, #31]
 80037ce:	e10f      	b.n	80039f0 <UART_SetConfig+0x348>
 80037d0:	2310      	movs	r3, #16
 80037d2:	77fb      	strb	r3, [r7, #31]
 80037d4:	e10c      	b.n	80039f0 <UART_SetConfig+0x348>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a68      	ldr	r2, [pc, #416]	@ (800397c <UART_SetConfig+0x2d4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d120      	bne.n	8003822 <UART_SetConfig+0x17a>
 80037e0:	4b64      	ldr	r3, [pc, #400]	@ (8003974 <UART_SetConfig+0x2cc>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80037ea:	2b30      	cmp	r3, #48	@ 0x30
 80037ec:	d013      	beq.n	8003816 <UART_SetConfig+0x16e>
 80037ee:	2b30      	cmp	r3, #48	@ 0x30
 80037f0:	d814      	bhi.n	800381c <UART_SetConfig+0x174>
 80037f2:	2b20      	cmp	r3, #32
 80037f4:	d009      	beq.n	800380a <UART_SetConfig+0x162>
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d810      	bhi.n	800381c <UART_SetConfig+0x174>
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <UART_SetConfig+0x15c>
 80037fe:	2b10      	cmp	r3, #16
 8003800:	d006      	beq.n	8003810 <UART_SetConfig+0x168>
 8003802:	e00b      	b.n	800381c <UART_SetConfig+0x174>
 8003804:	2300      	movs	r3, #0
 8003806:	77fb      	strb	r3, [r7, #31]
 8003808:	e0f2      	b.n	80039f0 <UART_SetConfig+0x348>
 800380a:	2302      	movs	r3, #2
 800380c:	77fb      	strb	r3, [r7, #31]
 800380e:	e0ef      	b.n	80039f0 <UART_SetConfig+0x348>
 8003810:	2304      	movs	r3, #4
 8003812:	77fb      	strb	r3, [r7, #31]
 8003814:	e0ec      	b.n	80039f0 <UART_SetConfig+0x348>
 8003816:	2308      	movs	r3, #8
 8003818:	77fb      	strb	r3, [r7, #31]
 800381a:	e0e9      	b.n	80039f0 <UART_SetConfig+0x348>
 800381c:	2310      	movs	r3, #16
 800381e:	77fb      	strb	r3, [r7, #31]
 8003820:	e0e6      	b.n	80039f0 <UART_SetConfig+0x348>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a56      	ldr	r2, [pc, #344]	@ (8003980 <UART_SetConfig+0x2d8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d120      	bne.n	800386e <UART_SetConfig+0x1c6>
 800382c:	4b51      	ldr	r3, [pc, #324]	@ (8003974 <UART_SetConfig+0x2cc>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003832:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003836:	2bc0      	cmp	r3, #192	@ 0xc0
 8003838:	d013      	beq.n	8003862 <UART_SetConfig+0x1ba>
 800383a:	2bc0      	cmp	r3, #192	@ 0xc0
 800383c:	d814      	bhi.n	8003868 <UART_SetConfig+0x1c0>
 800383e:	2b80      	cmp	r3, #128	@ 0x80
 8003840:	d009      	beq.n	8003856 <UART_SetConfig+0x1ae>
 8003842:	2b80      	cmp	r3, #128	@ 0x80
 8003844:	d810      	bhi.n	8003868 <UART_SetConfig+0x1c0>
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <UART_SetConfig+0x1a8>
 800384a:	2b40      	cmp	r3, #64	@ 0x40
 800384c:	d006      	beq.n	800385c <UART_SetConfig+0x1b4>
 800384e:	e00b      	b.n	8003868 <UART_SetConfig+0x1c0>
 8003850:	2300      	movs	r3, #0
 8003852:	77fb      	strb	r3, [r7, #31]
 8003854:	e0cc      	b.n	80039f0 <UART_SetConfig+0x348>
 8003856:	2302      	movs	r3, #2
 8003858:	77fb      	strb	r3, [r7, #31]
 800385a:	e0c9      	b.n	80039f0 <UART_SetConfig+0x348>
 800385c:	2304      	movs	r3, #4
 800385e:	77fb      	strb	r3, [r7, #31]
 8003860:	e0c6      	b.n	80039f0 <UART_SetConfig+0x348>
 8003862:	2308      	movs	r3, #8
 8003864:	77fb      	strb	r3, [r7, #31]
 8003866:	e0c3      	b.n	80039f0 <UART_SetConfig+0x348>
 8003868:	2310      	movs	r3, #16
 800386a:	77fb      	strb	r3, [r7, #31]
 800386c:	e0c0      	b.n	80039f0 <UART_SetConfig+0x348>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a44      	ldr	r2, [pc, #272]	@ (8003984 <UART_SetConfig+0x2dc>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d125      	bne.n	80038c4 <UART_SetConfig+0x21c>
 8003878:	4b3e      	ldr	r3, [pc, #248]	@ (8003974 <UART_SetConfig+0x2cc>)
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003882:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003886:	d017      	beq.n	80038b8 <UART_SetConfig+0x210>
 8003888:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800388c:	d817      	bhi.n	80038be <UART_SetConfig+0x216>
 800388e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003892:	d00b      	beq.n	80038ac <UART_SetConfig+0x204>
 8003894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003898:	d811      	bhi.n	80038be <UART_SetConfig+0x216>
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <UART_SetConfig+0x1fe>
 800389e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038a2:	d006      	beq.n	80038b2 <UART_SetConfig+0x20a>
 80038a4:	e00b      	b.n	80038be <UART_SetConfig+0x216>
 80038a6:	2300      	movs	r3, #0
 80038a8:	77fb      	strb	r3, [r7, #31]
 80038aa:	e0a1      	b.n	80039f0 <UART_SetConfig+0x348>
 80038ac:	2302      	movs	r3, #2
 80038ae:	77fb      	strb	r3, [r7, #31]
 80038b0:	e09e      	b.n	80039f0 <UART_SetConfig+0x348>
 80038b2:	2304      	movs	r3, #4
 80038b4:	77fb      	strb	r3, [r7, #31]
 80038b6:	e09b      	b.n	80039f0 <UART_SetConfig+0x348>
 80038b8:	2308      	movs	r3, #8
 80038ba:	77fb      	strb	r3, [r7, #31]
 80038bc:	e098      	b.n	80039f0 <UART_SetConfig+0x348>
 80038be:	2310      	movs	r3, #16
 80038c0:	77fb      	strb	r3, [r7, #31]
 80038c2:	e095      	b.n	80039f0 <UART_SetConfig+0x348>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a2f      	ldr	r2, [pc, #188]	@ (8003988 <UART_SetConfig+0x2e0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d125      	bne.n	800391a <UART_SetConfig+0x272>
 80038ce:	4b29      	ldr	r3, [pc, #164]	@ (8003974 <UART_SetConfig+0x2cc>)
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80038d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038dc:	d017      	beq.n	800390e <UART_SetConfig+0x266>
 80038de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038e2:	d817      	bhi.n	8003914 <UART_SetConfig+0x26c>
 80038e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038e8:	d00b      	beq.n	8003902 <UART_SetConfig+0x25a>
 80038ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038ee:	d811      	bhi.n	8003914 <UART_SetConfig+0x26c>
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <UART_SetConfig+0x254>
 80038f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038f8:	d006      	beq.n	8003908 <UART_SetConfig+0x260>
 80038fa:	e00b      	b.n	8003914 <UART_SetConfig+0x26c>
 80038fc:	2301      	movs	r3, #1
 80038fe:	77fb      	strb	r3, [r7, #31]
 8003900:	e076      	b.n	80039f0 <UART_SetConfig+0x348>
 8003902:	2302      	movs	r3, #2
 8003904:	77fb      	strb	r3, [r7, #31]
 8003906:	e073      	b.n	80039f0 <UART_SetConfig+0x348>
 8003908:	2304      	movs	r3, #4
 800390a:	77fb      	strb	r3, [r7, #31]
 800390c:	e070      	b.n	80039f0 <UART_SetConfig+0x348>
 800390e:	2308      	movs	r3, #8
 8003910:	77fb      	strb	r3, [r7, #31]
 8003912:	e06d      	b.n	80039f0 <UART_SetConfig+0x348>
 8003914:	2310      	movs	r3, #16
 8003916:	77fb      	strb	r3, [r7, #31]
 8003918:	e06a      	b.n	80039f0 <UART_SetConfig+0x348>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a1b      	ldr	r2, [pc, #108]	@ (800398c <UART_SetConfig+0x2e4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d138      	bne.n	8003996 <UART_SetConfig+0x2ee>
 8003924:	4b13      	ldr	r3, [pc, #76]	@ (8003974 <UART_SetConfig+0x2cc>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800392a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800392e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003932:	d017      	beq.n	8003964 <UART_SetConfig+0x2bc>
 8003934:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003938:	d82a      	bhi.n	8003990 <UART_SetConfig+0x2e8>
 800393a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800393e:	d00b      	beq.n	8003958 <UART_SetConfig+0x2b0>
 8003940:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003944:	d824      	bhi.n	8003990 <UART_SetConfig+0x2e8>
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <UART_SetConfig+0x2aa>
 800394a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800394e:	d006      	beq.n	800395e <UART_SetConfig+0x2b6>
 8003950:	e01e      	b.n	8003990 <UART_SetConfig+0x2e8>
 8003952:	2300      	movs	r3, #0
 8003954:	77fb      	strb	r3, [r7, #31]
 8003956:	e04b      	b.n	80039f0 <UART_SetConfig+0x348>
 8003958:	2302      	movs	r3, #2
 800395a:	77fb      	strb	r3, [r7, #31]
 800395c:	e048      	b.n	80039f0 <UART_SetConfig+0x348>
 800395e:	2304      	movs	r3, #4
 8003960:	77fb      	strb	r3, [r7, #31]
 8003962:	e045      	b.n	80039f0 <UART_SetConfig+0x348>
 8003964:	2308      	movs	r3, #8
 8003966:	77fb      	strb	r3, [r7, #31]
 8003968:	e042      	b.n	80039f0 <UART_SetConfig+0x348>
 800396a:	bf00      	nop
 800396c:	efff69f3 	.word	0xefff69f3
 8003970:	40011000 	.word	0x40011000
 8003974:	40023800 	.word	0x40023800
 8003978:	40004400 	.word	0x40004400
 800397c:	40004800 	.word	0x40004800
 8003980:	40004c00 	.word	0x40004c00
 8003984:	40005000 	.word	0x40005000
 8003988:	40011400 	.word	0x40011400
 800398c:	40007800 	.word	0x40007800
 8003990:	2310      	movs	r3, #16
 8003992:	77fb      	strb	r3, [r7, #31]
 8003994:	e02c      	b.n	80039f0 <UART_SetConfig+0x348>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a72      	ldr	r2, [pc, #456]	@ (8003b64 <UART_SetConfig+0x4bc>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d125      	bne.n	80039ec <UART_SetConfig+0x344>
 80039a0:	4b71      	ldr	r3, [pc, #452]	@ (8003b68 <UART_SetConfig+0x4c0>)
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80039aa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80039ae:	d017      	beq.n	80039e0 <UART_SetConfig+0x338>
 80039b0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80039b4:	d817      	bhi.n	80039e6 <UART_SetConfig+0x33e>
 80039b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039ba:	d00b      	beq.n	80039d4 <UART_SetConfig+0x32c>
 80039bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039c0:	d811      	bhi.n	80039e6 <UART_SetConfig+0x33e>
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <UART_SetConfig+0x326>
 80039c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039ca:	d006      	beq.n	80039da <UART_SetConfig+0x332>
 80039cc:	e00b      	b.n	80039e6 <UART_SetConfig+0x33e>
 80039ce:	2300      	movs	r3, #0
 80039d0:	77fb      	strb	r3, [r7, #31]
 80039d2:	e00d      	b.n	80039f0 <UART_SetConfig+0x348>
 80039d4:	2302      	movs	r3, #2
 80039d6:	77fb      	strb	r3, [r7, #31]
 80039d8:	e00a      	b.n	80039f0 <UART_SetConfig+0x348>
 80039da:	2304      	movs	r3, #4
 80039dc:	77fb      	strb	r3, [r7, #31]
 80039de:	e007      	b.n	80039f0 <UART_SetConfig+0x348>
 80039e0:	2308      	movs	r3, #8
 80039e2:	77fb      	strb	r3, [r7, #31]
 80039e4:	e004      	b.n	80039f0 <UART_SetConfig+0x348>
 80039e6:	2310      	movs	r3, #16
 80039e8:	77fb      	strb	r3, [r7, #31]
 80039ea:	e001      	b.n	80039f0 <UART_SetConfig+0x348>
 80039ec:	2310      	movs	r3, #16
 80039ee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039f8:	d15b      	bne.n	8003ab2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80039fa:	7ffb      	ldrb	r3, [r7, #31]
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d828      	bhi.n	8003a52 <UART_SetConfig+0x3aa>
 8003a00:	a201      	add	r2, pc, #4	@ (adr r2, 8003a08 <UART_SetConfig+0x360>)
 8003a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a06:	bf00      	nop
 8003a08:	08003a2d 	.word	0x08003a2d
 8003a0c:	08003a35 	.word	0x08003a35
 8003a10:	08003a3d 	.word	0x08003a3d
 8003a14:	08003a53 	.word	0x08003a53
 8003a18:	08003a43 	.word	0x08003a43
 8003a1c:	08003a53 	.word	0x08003a53
 8003a20:	08003a53 	.word	0x08003a53
 8003a24:	08003a53 	.word	0x08003a53
 8003a28:	08003a4b 	.word	0x08003a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a2c:	f7fe fd60 	bl	80024f0 <HAL_RCC_GetPCLK1Freq>
 8003a30:	61b8      	str	r0, [r7, #24]
        break;
 8003a32:	e013      	b.n	8003a5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a34:	f7fe fd70 	bl	8002518 <HAL_RCC_GetPCLK2Freq>
 8003a38:	61b8      	str	r0, [r7, #24]
        break;
 8003a3a:	e00f      	b.n	8003a5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a3c:	4b4b      	ldr	r3, [pc, #300]	@ (8003b6c <UART_SetConfig+0x4c4>)
 8003a3e:	61bb      	str	r3, [r7, #24]
        break;
 8003a40:	e00c      	b.n	8003a5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a42:	f7fe fc43 	bl	80022cc <HAL_RCC_GetSysClockFreq>
 8003a46:	61b8      	str	r0, [r7, #24]
        break;
 8003a48:	e008      	b.n	8003a5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a4e:	61bb      	str	r3, [r7, #24]
        break;
 8003a50:	e004      	b.n	8003a5c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	77bb      	strb	r3, [r7, #30]
        break;
 8003a5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d074      	beq.n	8003b4c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	005a      	lsls	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	085b      	lsrs	r3, r3, #1
 8003a6c:	441a      	add	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	2b0f      	cmp	r3, #15
 8003a7c:	d916      	bls.n	8003aac <UART_SetConfig+0x404>
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a84:	d212      	bcs.n	8003aac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	f023 030f 	bic.w	r3, r3, #15
 8003a8e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	085b      	lsrs	r3, r3, #1
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	89fb      	ldrh	r3, [r7, #14]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	89fa      	ldrh	r2, [r7, #14]
 8003aa8:	60da      	str	r2, [r3, #12]
 8003aaa:	e04f      	b.n	8003b4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	77bb      	strb	r3, [r7, #30]
 8003ab0:	e04c      	b.n	8003b4c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ab2:	7ffb      	ldrb	r3, [r7, #31]
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d828      	bhi.n	8003b0a <UART_SetConfig+0x462>
 8003ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac0 <UART_SetConfig+0x418>)
 8003aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abe:	bf00      	nop
 8003ac0:	08003ae5 	.word	0x08003ae5
 8003ac4:	08003aed 	.word	0x08003aed
 8003ac8:	08003af5 	.word	0x08003af5
 8003acc:	08003b0b 	.word	0x08003b0b
 8003ad0:	08003afb 	.word	0x08003afb
 8003ad4:	08003b0b 	.word	0x08003b0b
 8003ad8:	08003b0b 	.word	0x08003b0b
 8003adc:	08003b0b 	.word	0x08003b0b
 8003ae0:	08003b03 	.word	0x08003b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ae4:	f7fe fd04 	bl	80024f0 <HAL_RCC_GetPCLK1Freq>
 8003ae8:	61b8      	str	r0, [r7, #24]
        break;
 8003aea:	e013      	b.n	8003b14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aec:	f7fe fd14 	bl	8002518 <HAL_RCC_GetPCLK2Freq>
 8003af0:	61b8      	str	r0, [r7, #24]
        break;
 8003af2:	e00f      	b.n	8003b14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003af4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b6c <UART_SetConfig+0x4c4>)
 8003af6:	61bb      	str	r3, [r7, #24]
        break;
 8003af8:	e00c      	b.n	8003b14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003afa:	f7fe fbe7 	bl	80022cc <HAL_RCC_GetSysClockFreq>
 8003afe:	61b8      	str	r0, [r7, #24]
        break;
 8003b00:	e008      	b.n	8003b14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b06:	61bb      	str	r3, [r7, #24]
        break;
 8003b08:	e004      	b.n	8003b14 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	77bb      	strb	r3, [r7, #30]
        break;
 8003b12:	bf00      	nop
    }

    if (pclk != 0U)
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d018      	beq.n	8003b4c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	085a      	lsrs	r2, r3, #1
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	441a      	add	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b0f      	cmp	r3, #15
 8003b32:	d909      	bls.n	8003b48 <UART_SetConfig+0x4a0>
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b3a:	d205      	bcs.n	8003b48 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60da      	str	r2, [r3, #12]
 8003b46:	e001      	b.n	8003b4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b58:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40007c00 	.word	0x40007c00
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	00f42400 	.word	0x00f42400

08003b70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d01a      	beq.n	8003c86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c6e:	d10a      	bne.n	8003c86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	605a      	str	r2, [r3, #4]
  }
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b098      	sub	sp, #96	@ 0x60
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cc4:	f7fd fa34 	bl	8001130 <HAL_GetTick>
 8003cc8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d12e      	bne.n	8003d36 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f88c 	bl	8003e04 <UART_WaitOnFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d021      	beq.n	8003d36 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cfa:	e853 3f00 	ldrex	r3, [r3]
 8003cfe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d06:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d10:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d12:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d18:	e841 2300 	strex	r3, r2, [r1]
 8003d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1e6      	bne.n	8003cf2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e062      	b.n	8003dfc <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d149      	bne.n	8003dd8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f856 	bl	8003e04 <UART_WaitOnFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d03c      	beq.n	8003dd8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d66:	e853 3f00 	ldrex	r3, [r3]
 8003d6a:	623b      	str	r3, [r7, #32]
   return(result);
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e6      	bne.n	8003d5e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3308      	adds	r3, #8
 8003d96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	e853 3f00 	ldrex	r3, [r3]
 8003d9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0301 	bic.w	r3, r3, #1
 8003da6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3308      	adds	r3, #8
 8003dae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003db0:	61fa      	str	r2, [r7, #28]
 8003db2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db4:	69b9      	ldr	r1, [r7, #24]
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	e841 2300 	strex	r3, r2, [r1]
 8003dbc:	617b      	str	r3, [r7, #20]
   return(result);
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1e5      	bne.n	8003d90 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e011      	b.n	8003dfc <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3758      	adds	r7, #88	@ 0x58
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e14:	e04f      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e1c:	d04b      	beq.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e1e:	f7fd f987 	bl	8001130 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d302      	bcc.n	8003e34 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e04e      	b.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d037      	beq.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b80      	cmp	r3, #128	@ 0x80
 8003e4a:	d034      	beq.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2b40      	cmp	r3, #64	@ 0x40
 8003e50:	d031      	beq.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d110      	bne.n	8003e82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2208      	movs	r2, #8
 8003e66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 f8ff 	bl	800406c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2208      	movs	r2, #8
 8003e72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e029      	b.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e90:	d111      	bne.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f8e5 	bl	800406c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e00f      	b.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	bf0c      	ite	eq
 8003ec6:	2301      	moveq	r3, #1
 8003ec8:	2300      	movne	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	461a      	mov	r2, r3
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d0a0      	beq.n	8003e16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b097      	sub	sp, #92	@ 0x5c
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	4613      	mov	r3, r2
 8003eec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	88fa      	ldrh	r2, [r7, #6]
 8003ef8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	88fa      	ldrh	r2, [r7, #6]
 8003f00:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f12:	d10e      	bne.n	8003f32 <UART_Start_Receive_IT+0x52>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d105      	bne.n	8003f28 <UART_Start_Receive_IT+0x48>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003f22:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f26:	e02d      	b.n	8003f84 <UART_Start_Receive_IT+0xa4>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	22ff      	movs	r2, #255	@ 0xff
 8003f2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f30:	e028      	b.n	8003f84 <UART_Start_Receive_IT+0xa4>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10d      	bne.n	8003f56 <UART_Start_Receive_IT+0x76>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d104      	bne.n	8003f4c <UART_Start_Receive_IT+0x6c>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	22ff      	movs	r2, #255	@ 0xff
 8003f46:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f4a:	e01b      	b.n	8003f84 <UART_Start_Receive_IT+0xa4>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	227f      	movs	r2, #127	@ 0x7f
 8003f50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f54:	e016      	b.n	8003f84 <UART_Start_Receive_IT+0xa4>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f5e:	d10d      	bne.n	8003f7c <UART_Start_Receive_IT+0x9c>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d104      	bne.n	8003f72 <UART_Start_Receive_IT+0x92>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	227f      	movs	r2, #127	@ 0x7f
 8003f6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f70:	e008      	b.n	8003f84 <UART_Start_Receive_IT+0xa4>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	223f      	movs	r2, #63	@ 0x3f
 8003f76:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f7a:	e003      	b.n	8003f84 <UART_Start_Receive_IT+0xa4>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2222      	movs	r2, #34	@ 0x22
 8003f90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3308      	adds	r3, #8
 8003f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f9e:	e853 3f00 	ldrex	r3, [r3]
 8003fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3308      	adds	r3, #8
 8003fb2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003fb4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003fb6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003fba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fbc:	e841 2300 	strex	r3, r2, [r1]
 8003fc0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1e5      	bne.n	8003f94 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fd0:	d107      	bne.n	8003fe2 <UART_Start_Receive_IT+0x102>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d103      	bne.n	8003fe2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4a21      	ldr	r2, [pc, #132]	@ (8004064 <UART_Start_Receive_IT+0x184>)
 8003fde:	669a      	str	r2, [r3, #104]	@ 0x68
 8003fe0:	e002      	b.n	8003fe8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4a20      	ldr	r2, [pc, #128]	@ (8004068 <UART_Start_Receive_IT+0x188>)
 8003fe6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d019      	beq.n	8004024 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004000:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004004:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800400e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004010:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004014:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800401c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e6      	bne.n	8003ff0 <UART_Start_Receive_IT+0x110>
 8004022:	e018      	b.n	8004056 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	613b      	str	r3, [r7, #16]
   return(result);
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f043 0320 	orr.w	r3, r3, #32
 8004038:	653b      	str	r3, [r7, #80]	@ 0x50
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004042:	623b      	str	r3, [r7, #32]
 8004044:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	69f9      	ldr	r1, [r7, #28]
 8004048:	6a3a      	ldr	r2, [r7, #32]
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e6      	bne.n	8004024 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	375c      	adds	r7, #92	@ 0x5c
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	080044d3 	.word	0x080044d3
 8004068:	0800432b 	.word	0x0800432b

0800406c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800406c:	b480      	push	{r7}
 800406e:	b095      	sub	sp, #84	@ 0x54
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800407c:	e853 3f00 	ldrex	r3, [r3]
 8004080:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004084:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004088:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004092:	643b      	str	r3, [r7, #64]	@ 0x40
 8004094:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004096:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004098:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800409a:	e841 2300 	strex	r3, r2, [r1]
 800409e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1e6      	bne.n	8004074 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3308      	adds	r3, #8
 80040ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	e853 3f00 	ldrex	r3, [r3]
 80040b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	f023 0301 	bic.w	r3, r3, #1
 80040bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3308      	adds	r3, #8
 80040c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040ce:	e841 2300 	strex	r3, r2, [r1]
 80040d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e5      	bne.n	80040a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d118      	bne.n	8004114 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	e853 3f00 	ldrex	r3, [r3]
 80040ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f023 0310 	bic.w	r3, r3, #16
 80040f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004100:	61bb      	str	r3, [r7, #24]
 8004102:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004104:	6979      	ldr	r1, [r7, #20]
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	e841 2300 	strex	r3, r2, [r1]
 800410c:	613b      	str	r3, [r7, #16]
   return(result);
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1e6      	bne.n	80040e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2220      	movs	r2, #32
 8004118:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004128:	bf00      	nop
 800412a:	3754      	adds	r7, #84	@ 0x54
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004140:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f7ff fa88 	bl	8003668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004158:	bf00      	nop
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004160:	b480      	push	{r7}
 8004162:	b08f      	sub	sp, #60	@ 0x3c
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800416c:	2b21      	cmp	r3, #33	@ 0x21
 800416e:	d14c      	bne.n	800420a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004176:	b29b      	uxth	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d132      	bne.n	80041e2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	e853 3f00 	ldrex	r3, [r3]
 8004188:	61fb      	str	r3, [r7, #28]
   return(result);
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004190:	637b      	str	r3, [r7, #52]	@ 0x34
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800419a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800419c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041a2:	e841 2300 	strex	r3, r2, [r1]
 80041a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1e6      	bne.n	800417c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	e853 3f00 	ldrex	r3, [r3]
 80041ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d0:	6979      	ldr	r1, [r7, #20]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	e841 2300 	strex	r3, r2, [r1]
 80041d8:	613b      	str	r3, [r7, #16]
   return(result);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1e6      	bne.n	80041ae <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80041e0:	e013      	b.n	800420a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041e6:	781a      	ldrb	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800420a:	bf00      	nop
 800420c:	373c      	adds	r7, #60	@ 0x3c
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004216:	b480      	push	{r7}
 8004218:	b091      	sub	sp, #68	@ 0x44
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004222:	2b21      	cmp	r3, #33	@ 0x21
 8004224:	d151      	bne.n	80042ca <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d132      	bne.n	8004298 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	623b      	str	r3, [r7, #32]
   return(result);
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004246:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004250:	633b      	str	r3, [r7, #48]	@ 0x30
 8004252:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800425e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e6      	bne.n	8004232 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	60fb      	str	r3, [r7, #12]
   return(result);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004278:	637b      	str	r3, [r7, #52]	@ 0x34
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004282:	61fb      	str	r3, [r7, #28]
 8004284:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	69b9      	ldr	r1, [r7, #24]
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	617b      	str	r3, [r7, #20]
   return(result);
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e6      	bne.n	8004264 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004296:	e018      	b.n	80042ca <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800429c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800429e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042ac:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042b2:	1c9a      	adds	r2, r3, #2
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80042ca:	bf00      	nop
 80042cc:	3744      	adds	r7, #68	@ 0x44
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b088      	sub	sp, #32
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	e853 3f00 	ldrex	r3, [r3]
 80042ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042f2:	61fb      	str	r3, [r7, #28]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	461a      	mov	r2, r3
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	61bb      	str	r3, [r7, #24]
 80042fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004300:	6979      	ldr	r1, [r7, #20]
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	e841 2300 	strex	r3, r2, [r1]
 8004308:	613b      	str	r3, [r7, #16]
   return(result);
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1e6      	bne.n	80042de <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7ff f999 	bl	8003654 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004322:	bf00      	nop
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b09c      	sub	sp, #112	@ 0x70
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004338:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004342:	2b22      	cmp	r3, #34	@ 0x22
 8004344:	f040 80b9 	bne.w	80044ba <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004352:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004356:	b2d9      	uxtb	r1, r3
 8004358:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800435c:	b2da      	uxtb	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004362:	400a      	ands	r2, r1
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800438a:	b29b      	uxth	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	f040 809c 	bne.w	80044ca <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800439a:	e853 3f00 	ldrex	r3, [r3]
 800439e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80043a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043b2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043b8:	e841 2300 	strex	r3, r2, [r1]
 80043bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e6      	bne.n	8004392 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3308      	adds	r3, #8
 80043ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ce:	e853 3f00 	ldrex	r3, [r3]
 80043d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043d6:	f023 0301 	bic.w	r3, r3, #1
 80043da:	667b      	str	r3, [r7, #100]	@ 0x64
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3308      	adds	r3, #8
 80043e2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80043e4:	647a      	str	r2, [r7, #68]	@ 0x44
 80043e6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043ec:	e841 2300 	strex	r3, r2, [r1]
 80043f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1e5      	bne.n	80043c4 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d018      	beq.n	800444c <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004422:	e853 3f00 	ldrex	r3, [r3]
 8004426:	623b      	str	r3, [r7, #32]
   return(result);
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800442e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004438:	633b      	str	r3, [r7, #48]	@ 0x30
 800443a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800443e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004440:	e841 2300 	strex	r3, r2, [r1]
 8004444:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1e6      	bne.n	800441a <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004450:	2b01      	cmp	r3, #1
 8004452:	d12e      	bne.n	80044b2 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	e853 3f00 	ldrex	r3, [r3]
 8004466:	60fb      	str	r3, [r7, #12]
   return(result);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0310 	bic.w	r3, r3, #16
 800446e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004478:	61fb      	str	r3, [r7, #28]
 800447a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447c:	69b9      	ldr	r1, [r7, #24]
 800447e:	69fa      	ldr	r2, [r7, #28]
 8004480:	e841 2300 	strex	r3, r2, [r1]
 8004484:	617b      	str	r3, [r7, #20]
   return(result);
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1e6      	bne.n	800445a <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f003 0310 	and.w	r3, r3, #16
 8004496:	2b10      	cmp	r3, #16
 8004498:	d103      	bne.n	80044a2 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2210      	movs	r2, #16
 80044a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80044a8:	4619      	mov	r1, r3
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7ff f8e6 	bl	800367c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044b0:	e00b      	b.n	80044ca <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fc fb96 	bl	8000be4 <HAL_UART_RxCpltCallback>
}
 80044b8:	e007      	b.n	80044ca <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699a      	ldr	r2, [r3, #24]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 0208 	orr.w	r2, r2, #8
 80044c8:	619a      	str	r2, [r3, #24]
}
 80044ca:	bf00      	nop
 80044cc:	3770      	adds	r7, #112	@ 0x70
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b09c      	sub	sp, #112	@ 0x70
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80044e0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044ea:	2b22      	cmp	r3, #34	@ 0x22
 80044ec:	f040 80b9 	bne.w	8004662 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004500:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004504:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004508:	4013      	ands	r3, r2
 800450a:	b29a      	uxth	r2, r3
 800450c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800450e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004514:	1c9a      	adds	r2, r3, #2
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004520:	b29b      	uxth	r3, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	b29a      	uxth	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004532:	b29b      	uxth	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	f040 809c 	bne.w	8004672 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004542:	e853 3f00 	ldrex	r3, [r3]
 8004546:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004548:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800454a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800454e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	461a      	mov	r2, r3
 8004556:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004558:	657b      	str	r3, [r7, #84]	@ 0x54
 800455a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800455e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004560:	e841 2300 	strex	r3, r2, [r1]
 8004564:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004566:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1e6      	bne.n	800453a <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3308      	adds	r3, #8
 8004572:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800457c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457e:	f023 0301 	bic.w	r3, r3, #1
 8004582:	663b      	str	r3, [r7, #96]	@ 0x60
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3308      	adds	r3, #8
 800458a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800458c:	643a      	str	r2, [r7, #64]	@ 0x40
 800458e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004590:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004592:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004594:	e841 2300 	strex	r3, r2, [r1]
 8004598:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800459a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1e5      	bne.n	800456c <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d018      	beq.n	80045f4 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	e853 3f00 	ldrex	r3, [r3]
 80045ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80045d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045e2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045e8:	e841 2300 	strex	r3, r2, [r1]
 80045ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1e6      	bne.n	80045c2 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d12e      	bne.n	800465a <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	e853 3f00 	ldrex	r3, [r3]
 800460e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f023 0310 	bic.w	r3, r3, #16
 8004616:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	461a      	mov	r2, r3
 800461e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	6979      	ldr	r1, [r7, #20]
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	e841 2300 	strex	r3, r2, [r1]
 800462c:	613b      	str	r3, [r7, #16]
   return(result);
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e6      	bne.n	8004602 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	2b10      	cmp	r3, #16
 8004640:	d103      	bne.n	800464a <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2210      	movs	r2, #16
 8004648:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004650:	4619      	mov	r1, r3
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff f812 	bl	800367c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004658:	e00b      	b.n	8004672 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fc fac2 	bl	8000be4 <HAL_UART_RxCpltCallback>
}
 8004660:	e007      	b.n	8004672 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	699a      	ldr	r2, [r3, #24]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f042 0208 	orr.w	r2, r2, #8
 8004670:	619a      	str	r2, [r3, #24]
}
 8004672:	bf00      	nop
 8004674:	3770      	adds	r7, #112	@ 0x70
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800467c:	b084      	sub	sp, #16
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	f107 001c 	add.w	r0, r7, #28
 800468a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800468e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004692:	2b01      	cmp	r3, #1
 8004694:	d121      	bne.n	80046da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	4b21      	ldr	r3, [pc, #132]	@ (800472c <USB_CoreInit+0xb0>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d105      	bne.n	80046ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fa92 	bl	8004bf8 <USB_CoreReset>
 80046d4:	4603      	mov	r3, r0
 80046d6:	73fb      	strb	r3, [r7, #15]
 80046d8:	e010      	b.n	80046fc <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fa86 	bl	8004bf8 <USB_CoreReset>
 80046ec:	4603      	mov	r3, r0
 80046ee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80046fc:	7fbb      	ldrb	r3, [r7, #30]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d10b      	bne.n	800471a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f043 0206 	orr.w	r2, r3, #6
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f043 0220 	orr.w	r2, r3, #32
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800471a:	7bfb      	ldrb	r3, [r7, #15]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004726:	b004      	add	sp, #16
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	ffbdffbf 	.word	0xffbdffbf

08004730 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f023 0201 	bic.w	r2, r3, #1
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b084      	sub	sp, #16
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
 800475a:	460b      	mov	r3, r1
 800475c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800476e:	78fb      	ldrb	r3, [r7, #3]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d115      	bne.n	80047a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004780:	200a      	movs	r0, #10
 8004782:	f7fc fce1 	bl	8001148 <HAL_Delay>
      ms += 10U;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	330a      	adds	r3, #10
 800478a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 fa25 	bl	8004bdc <USB_GetMode>
 8004792:	4603      	mov	r3, r0
 8004794:	2b01      	cmp	r3, #1
 8004796:	d01e      	beq.n	80047d6 <USB_SetCurrentMode+0x84>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2bc7      	cmp	r3, #199	@ 0xc7
 800479c:	d9f0      	bls.n	8004780 <USB_SetCurrentMode+0x2e>
 800479e:	e01a      	b.n	80047d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d115      	bne.n	80047d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80047b2:	200a      	movs	r0, #10
 80047b4:	f7fc fcc8 	bl	8001148 <HAL_Delay>
      ms += 10U;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	330a      	adds	r3, #10
 80047bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fa0c 	bl	8004bdc <USB_GetMode>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d005      	beq.n	80047d6 <USB_SetCurrentMode+0x84>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2bc7      	cmp	r3, #199	@ 0xc7
 80047ce:	d9f0      	bls.n	80047b2 <USB_SetCurrentMode+0x60>
 80047d0:	e001      	b.n	80047d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e005      	b.n	80047e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2bc8      	cmp	r3, #200	@ 0xc8
 80047da:	d101      	bne.n	80047e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047ec:	b084      	sub	sp, #16
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b086      	sub	sp, #24
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80047fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004806:	2300      	movs	r3, #0
 8004808:	613b      	str	r3, [r7, #16]
 800480a:	e009      	b.n	8004820 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	3340      	adds	r3, #64	@ 0x40
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	2200      	movs	r2, #0
 8004818:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	3301      	adds	r3, #1
 800481e:	613b      	str	r3, [r7, #16]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	2b0e      	cmp	r3, #14
 8004824:	d9f2      	bls.n	800480c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004826:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800482a:	2b00      	cmp	r3, #0
 800482c:	d11c      	bne.n	8004868 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800483c:	f043 0302 	orr.w	r3, r3, #2
 8004840:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004846:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	e005      	b.n	8004874 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800487a:	461a      	mov	r2, r3
 800487c:	2300      	movs	r3, #0
 800487e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004880:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004884:	2b01      	cmp	r3, #1
 8004886:	d10d      	bne.n	80048a4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004888:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800488c:	2b00      	cmp	r3, #0
 800488e:	d104      	bne.n	800489a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004890:	2100      	movs	r1, #0
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f968 	bl	8004b68 <USB_SetDevSpeed>
 8004898:	e008      	b.n	80048ac <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800489a:	2101      	movs	r1, #1
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f963 	bl	8004b68 <USB_SetDevSpeed>
 80048a2:	e003      	b.n	80048ac <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048a4:	2103      	movs	r1, #3
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f95e 	bl	8004b68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048ac:	2110      	movs	r1, #16
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f8fa 	bl	8004aa8 <USB_FlushTxFifo>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f924 	bl	8004b0c <USB_FlushRxFifo>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048d4:	461a      	mov	r2, r3
 80048d6:	2300      	movs	r3, #0
 80048d8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048e0:	461a      	mov	r2, r3
 80048e2:	2300      	movs	r3, #0
 80048e4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ec:	461a      	mov	r2, r3
 80048ee:	2300      	movs	r3, #0
 80048f0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048f2:	2300      	movs	r3, #0
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	e043      	b.n	8004980 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800490a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800490e:	d118      	bne.n	8004942 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10a      	bne.n	800492c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004922:	461a      	mov	r2, r3
 8004924:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004928:	6013      	str	r3, [r2, #0]
 800492a:	e013      	b.n	8004954 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004938:	461a      	mov	r2, r3
 800493a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	e008      	b.n	8004954 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800494e:	461a      	mov	r2, r3
 8004950:	2300      	movs	r3, #0
 8004952:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004960:	461a      	mov	r2, r3
 8004962:	2300      	movs	r3, #0
 8004964:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004972:	461a      	mov	r2, r3
 8004974:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004978:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	3301      	adds	r3, #1
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004984:	461a      	mov	r2, r3
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	4293      	cmp	r3, r2
 800498a:	d3b5      	bcc.n	80048f8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800498c:	2300      	movs	r3, #0
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	e043      	b.n	8004a1a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049a8:	d118      	bne.n	80049dc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049bc:	461a      	mov	r2, r3
 80049be:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	e013      	b.n	80049ee <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	015a      	lsls	r2, r3, #5
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4413      	add	r3, r2
 80049ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049d2:	461a      	mov	r2, r3
 80049d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	e008      	b.n	80049ee <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e8:	461a      	mov	r2, r3
 80049ea:	2300      	movs	r3, #0
 80049ec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049fa:	461a      	mov	r2, r3
 80049fc:	2300      	movs	r3, #0
 80049fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	3301      	adds	r3, #1
 8004a18:	613b      	str	r3, [r7, #16]
 8004a1a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004a1e:	461a      	mov	r2, r3
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d3b5      	bcc.n	8004992 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a38:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004a46:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a48:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	f043 0210 	orr.w	r2, r3, #16
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699a      	ldr	r2, [r3, #24]
 8004a60:	4b0f      	ldr	r3, [pc, #60]	@ (8004aa0 <USB_DevInit+0x2b4>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a68:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	f043 0208 	orr.w	r2, r3, #8
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a7c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d105      	bne.n	8004a90 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699a      	ldr	r2, [r3, #24]
 8004a88:	4b06      	ldr	r3, [pc, #24]	@ (8004aa4 <USB_DevInit+0x2b8>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a9c:	b004      	add	sp, #16
 8004a9e:	4770      	bx	lr
 8004aa0:	803c3800 	.word	0x803c3800
 8004aa4:	40000004 	.word	0x40000004

08004aa8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ac2:	d901      	bls.n	8004ac8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e01b      	b.n	8004b00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	daf2      	bge.n	8004ab6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	019b      	lsls	r3, r3, #6
 8004ad8:	f043 0220 	orr.w	r2, r3, #32
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004aec:	d901      	bls.n	8004af2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e006      	b.n	8004b00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f003 0320 	and.w	r3, r3, #32
 8004afa:	2b20      	cmp	r3, #32
 8004afc:	d0f0      	beq.n	8004ae0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b14:	2300      	movs	r3, #0
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b24:	d901      	bls.n	8004b2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e018      	b.n	8004b5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	daf2      	bge.n	8004b18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2210      	movs	r2, #16
 8004b3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b48:	d901      	bls.n	8004b4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e006      	b.n	8004b5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f003 0310 	and.w	r3, r3, #16
 8004b56:	2b10      	cmp	r3, #16
 8004b58:	d0f0      	beq.n	8004b3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	68f9      	ldr	r1, [r7, #12]
 8004b84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b085      	sub	sp, #20
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004bb4:	f023 0303 	bic.w	r3, r3, #3
 8004bb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bc8:	f043 0302 	orr.w	r3, r3, #2
 8004bcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	f003 0301 	and.w	r3, r3, #1
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3301      	adds	r3, #1
 8004c08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c10:	d901      	bls.n	8004c16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e01b      	b.n	8004c4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	daf2      	bge.n	8004c04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f043 0201 	orr.w	r2, r3, #1
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	3301      	adds	r3, #1
 8004c32:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c3a:	d901      	bls.n	8004c40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e006      	b.n	8004c4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d0f0      	beq.n	8004c2e <USB_CoreReset+0x36>

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <_fgets_r>:
 8004c5a:	2a01      	cmp	r2, #1
 8004c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c60:	4681      	mov	r9, r0
 8004c62:	460e      	mov	r6, r1
 8004c64:	4615      	mov	r5, r2
 8004c66:	461c      	mov	r4, r3
 8004c68:	dd21      	ble.n	8004cae <_fgets_r+0x54>
 8004c6a:	b118      	cbz	r0, 8004c74 <_fgets_r+0x1a>
 8004c6c:	6a03      	ldr	r3, [r0, #32]
 8004c6e:	b90b      	cbnz	r3, 8004c74 <_fgets_r+0x1a>
 8004c70:	f000 f8f0 	bl	8004e54 <__sinit>
 8004c74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c76:	07db      	lsls	r3, r3, #31
 8004c78:	d405      	bmi.n	8004c86 <_fgets_r+0x2c>
 8004c7a:	89a3      	ldrh	r3, [r4, #12]
 8004c7c:	059f      	lsls	r7, r3, #22
 8004c7e:	d402      	bmi.n	8004c86 <_fgets_r+0x2c>
 8004c80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c82:	f000 fa7c 	bl	800517e <__retarget_lock_acquire_recursive>
 8004c86:	3d01      	subs	r5, #1
 8004c88:	4637      	mov	r7, r6
 8004c8a:	6863      	ldr	r3, [r4, #4]
 8004c8c:	b99b      	cbnz	r3, 8004cb6 <_fgets_r+0x5c>
 8004c8e:	4621      	mov	r1, r4
 8004c90:	4648      	mov	r0, r9
 8004c92:	f000 f923 	bl	8004edc <__srefill_r>
 8004c96:	b168      	cbz	r0, 8004cb4 <_fgets_r+0x5a>
 8004c98:	42b7      	cmp	r7, r6
 8004c9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c9c:	d139      	bne.n	8004d12 <_fgets_r+0xb8>
 8004c9e:	07d8      	lsls	r0, r3, #31
 8004ca0:	d405      	bmi.n	8004cae <_fgets_r+0x54>
 8004ca2:	89a3      	ldrh	r3, [r4, #12]
 8004ca4:	0599      	lsls	r1, r3, #22
 8004ca6:	d402      	bmi.n	8004cae <_fgets_r+0x54>
 8004ca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004caa:	f000 fa69 	bl	8005180 <__retarget_lock_release_recursive>
 8004cae:	2000      	movs	r0, #0
 8004cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb4:	6863      	ldr	r3, [r4, #4]
 8004cb6:	f8d4 a000 	ldr.w	sl, [r4]
 8004cba:	42ab      	cmp	r3, r5
 8004cbc:	bf28      	it	cs
 8004cbe:	462b      	movcs	r3, r5
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	210a      	movs	r1, #10
 8004cc4:	4650      	mov	r0, sl
 8004cc6:	4698      	mov	r8, r3
 8004cc8:	f7fb faca 	bl	8000260 <memchr>
 8004ccc:	6863      	ldr	r3, [r4, #4]
 8004cce:	b188      	cbz	r0, 8004cf4 <_fgets_r+0x9a>
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	eba0 050a 	sub.w	r5, r0, sl
 8004cd6:	1b5b      	subs	r3, r3, r5
 8004cd8:	e9c4 0300 	strd	r0, r3, [r4]
 8004cdc:	462a      	mov	r2, r5
 8004cde:	4651      	mov	r1, sl
 8004ce0:	4638      	mov	r0, r7
 8004ce2:	f000 fa56 	bl	8005192 <memcpy>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	557b      	strb	r3, [r7, r5]
 8004cea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004cec:	07da      	lsls	r2, r3, #31
 8004cee:	d513      	bpl.n	8004d18 <_fgets_r+0xbe>
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	e7dd      	b.n	8004cb0 <_fgets_r+0x56>
 8004cf4:	eba3 0308 	sub.w	r3, r3, r8
 8004cf8:	6063      	str	r3, [r4, #4]
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	4443      	add	r3, r8
 8004cfe:	4638      	mov	r0, r7
 8004d00:	6023      	str	r3, [r4, #0]
 8004d02:	4642      	mov	r2, r8
 8004d04:	4651      	mov	r1, sl
 8004d06:	f000 fa44 	bl	8005192 <memcpy>
 8004d0a:	ebb5 0508 	subs.w	r5, r5, r8
 8004d0e:	4447      	add	r7, r8
 8004d10:	d1bb      	bne.n	8004c8a <_fgets_r+0x30>
 8004d12:	2300      	movs	r3, #0
 8004d14:	703b      	strb	r3, [r7, #0]
 8004d16:	e7e8      	b.n	8004cea <_fgets_r+0x90>
 8004d18:	89a3      	ldrh	r3, [r4, #12]
 8004d1a:	059b      	lsls	r3, r3, #22
 8004d1c:	d4e8      	bmi.n	8004cf0 <_fgets_r+0x96>
 8004d1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d20:	f000 fa2e 	bl	8005180 <__retarget_lock_release_recursive>
 8004d24:	e7e4      	b.n	8004cf0 <_fgets_r+0x96>
	...

08004d28 <fgets>:
 8004d28:	4613      	mov	r3, r2
 8004d2a:	460a      	mov	r2, r1
 8004d2c:	4601      	mov	r1, r0
 8004d2e:	4802      	ldr	r0, [pc, #8]	@ (8004d38 <fgets+0x10>)
 8004d30:	6800      	ldr	r0, [r0, #0]
 8004d32:	f7ff bf92 	b.w	8004c5a <_fgets_r>
 8004d36:	bf00      	nop
 8004d38:	20000018 	.word	0x20000018

08004d3c <std>:
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	b510      	push	{r4, lr}
 8004d40:	4604      	mov	r4, r0
 8004d42:	e9c0 3300 	strd	r3, r3, [r0]
 8004d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d4a:	6083      	str	r3, [r0, #8]
 8004d4c:	8181      	strh	r1, [r0, #12]
 8004d4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004d50:	81c2      	strh	r2, [r0, #14]
 8004d52:	6183      	str	r3, [r0, #24]
 8004d54:	4619      	mov	r1, r3
 8004d56:	2208      	movs	r2, #8
 8004d58:	305c      	adds	r0, #92	@ 0x5c
 8004d5a:	f000 f996 	bl	800508a <memset>
 8004d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d94 <std+0x58>)
 8004d60:	6263      	str	r3, [r4, #36]	@ 0x24
 8004d62:	4b0d      	ldr	r3, [pc, #52]	@ (8004d98 <std+0x5c>)
 8004d64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004d66:	4b0d      	ldr	r3, [pc, #52]	@ (8004d9c <std+0x60>)
 8004d68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004da0 <std+0x64>)
 8004d6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004da4 <std+0x68>)
 8004d70:	6224      	str	r4, [r4, #32]
 8004d72:	429c      	cmp	r4, r3
 8004d74:	d006      	beq.n	8004d84 <std+0x48>
 8004d76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004d7a:	4294      	cmp	r4, r2
 8004d7c:	d002      	beq.n	8004d84 <std+0x48>
 8004d7e:	33d0      	adds	r3, #208	@ 0xd0
 8004d80:	429c      	cmp	r4, r3
 8004d82:	d105      	bne.n	8004d90 <std+0x54>
 8004d84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d8c:	f000 b9f6 	b.w	800517c <__retarget_lock_init_recursive>
 8004d90:	bd10      	pop	{r4, pc}
 8004d92:	bf00      	nop
 8004d94:	08005005 	.word	0x08005005
 8004d98:	08005027 	.word	0x08005027
 8004d9c:	0800505f 	.word	0x0800505f
 8004da0:	08005083 	.word	0x08005083
 8004da4:	200007b4 	.word	0x200007b4

08004da8 <stdio_exit_handler>:
 8004da8:	4a02      	ldr	r2, [pc, #8]	@ (8004db4 <stdio_exit_handler+0xc>)
 8004daa:	4903      	ldr	r1, [pc, #12]	@ (8004db8 <stdio_exit_handler+0x10>)
 8004dac:	4803      	ldr	r0, [pc, #12]	@ (8004dbc <stdio_exit_handler+0x14>)
 8004dae:	f000 b869 	b.w	8004e84 <_fwalk_sglue>
 8004db2:	bf00      	nop
 8004db4:	2000000c 	.word	0x2000000c
 8004db8:	08005a75 	.word	0x08005a75
 8004dbc:	2000001c 	.word	0x2000001c

08004dc0 <cleanup_stdio>:
 8004dc0:	6841      	ldr	r1, [r0, #4]
 8004dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8004df4 <cleanup_stdio+0x34>)
 8004dc4:	4299      	cmp	r1, r3
 8004dc6:	b510      	push	{r4, lr}
 8004dc8:	4604      	mov	r4, r0
 8004dca:	d001      	beq.n	8004dd0 <cleanup_stdio+0x10>
 8004dcc:	f000 fe52 	bl	8005a74 <_fflush_r>
 8004dd0:	68a1      	ldr	r1, [r4, #8]
 8004dd2:	4b09      	ldr	r3, [pc, #36]	@ (8004df8 <cleanup_stdio+0x38>)
 8004dd4:	4299      	cmp	r1, r3
 8004dd6:	d002      	beq.n	8004dde <cleanup_stdio+0x1e>
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f000 fe4b 	bl	8005a74 <_fflush_r>
 8004dde:	68e1      	ldr	r1, [r4, #12]
 8004de0:	4b06      	ldr	r3, [pc, #24]	@ (8004dfc <cleanup_stdio+0x3c>)
 8004de2:	4299      	cmp	r1, r3
 8004de4:	d004      	beq.n	8004df0 <cleanup_stdio+0x30>
 8004de6:	4620      	mov	r0, r4
 8004de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dec:	f000 be42 	b.w	8005a74 <_fflush_r>
 8004df0:	bd10      	pop	{r4, pc}
 8004df2:	bf00      	nop
 8004df4:	200007b4 	.word	0x200007b4
 8004df8:	2000081c 	.word	0x2000081c
 8004dfc:	20000884 	.word	0x20000884

08004e00 <global_stdio_init.part.0>:
 8004e00:	b510      	push	{r4, lr}
 8004e02:	4b0b      	ldr	r3, [pc, #44]	@ (8004e30 <global_stdio_init.part.0+0x30>)
 8004e04:	4c0b      	ldr	r4, [pc, #44]	@ (8004e34 <global_stdio_init.part.0+0x34>)
 8004e06:	4a0c      	ldr	r2, [pc, #48]	@ (8004e38 <global_stdio_init.part.0+0x38>)
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2104      	movs	r1, #4
 8004e10:	f7ff ff94 	bl	8004d3c <std>
 8004e14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e18:	2201      	movs	r2, #1
 8004e1a:	2109      	movs	r1, #9
 8004e1c:	f7ff ff8e 	bl	8004d3c <std>
 8004e20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e24:	2202      	movs	r2, #2
 8004e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e2a:	2112      	movs	r1, #18
 8004e2c:	f7ff bf86 	b.w	8004d3c <std>
 8004e30:	200008ec 	.word	0x200008ec
 8004e34:	200007b4 	.word	0x200007b4
 8004e38:	08004da9 	.word	0x08004da9

08004e3c <__sfp_lock_acquire>:
 8004e3c:	4801      	ldr	r0, [pc, #4]	@ (8004e44 <__sfp_lock_acquire+0x8>)
 8004e3e:	f000 b99e 	b.w	800517e <__retarget_lock_acquire_recursive>
 8004e42:	bf00      	nop
 8004e44:	200008f5 	.word	0x200008f5

08004e48 <__sfp_lock_release>:
 8004e48:	4801      	ldr	r0, [pc, #4]	@ (8004e50 <__sfp_lock_release+0x8>)
 8004e4a:	f000 b999 	b.w	8005180 <__retarget_lock_release_recursive>
 8004e4e:	bf00      	nop
 8004e50:	200008f5 	.word	0x200008f5

08004e54 <__sinit>:
 8004e54:	b510      	push	{r4, lr}
 8004e56:	4604      	mov	r4, r0
 8004e58:	f7ff fff0 	bl	8004e3c <__sfp_lock_acquire>
 8004e5c:	6a23      	ldr	r3, [r4, #32]
 8004e5e:	b11b      	cbz	r3, 8004e68 <__sinit+0x14>
 8004e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e64:	f7ff bff0 	b.w	8004e48 <__sfp_lock_release>
 8004e68:	4b04      	ldr	r3, [pc, #16]	@ (8004e7c <__sinit+0x28>)
 8004e6a:	6223      	str	r3, [r4, #32]
 8004e6c:	4b04      	ldr	r3, [pc, #16]	@ (8004e80 <__sinit+0x2c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1f5      	bne.n	8004e60 <__sinit+0xc>
 8004e74:	f7ff ffc4 	bl	8004e00 <global_stdio_init.part.0>
 8004e78:	e7f2      	b.n	8004e60 <__sinit+0xc>
 8004e7a:	bf00      	nop
 8004e7c:	08004dc1 	.word	0x08004dc1
 8004e80:	200008ec 	.word	0x200008ec

08004e84 <_fwalk_sglue>:
 8004e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e88:	4607      	mov	r7, r0
 8004e8a:	4688      	mov	r8, r1
 8004e8c:	4614      	mov	r4, r2
 8004e8e:	2600      	movs	r6, #0
 8004e90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e94:	f1b9 0901 	subs.w	r9, r9, #1
 8004e98:	d505      	bpl.n	8004ea6 <_fwalk_sglue+0x22>
 8004e9a:	6824      	ldr	r4, [r4, #0]
 8004e9c:	2c00      	cmp	r4, #0
 8004e9e:	d1f7      	bne.n	8004e90 <_fwalk_sglue+0xc>
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ea6:	89ab      	ldrh	r3, [r5, #12]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d907      	bls.n	8004ebc <_fwalk_sglue+0x38>
 8004eac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	d003      	beq.n	8004ebc <_fwalk_sglue+0x38>
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	4638      	mov	r0, r7
 8004eb8:	47c0      	blx	r8
 8004eba:	4306      	orrs	r6, r0
 8004ebc:	3568      	adds	r5, #104	@ 0x68
 8004ebe:	e7e9      	b.n	8004e94 <_fwalk_sglue+0x10>

08004ec0 <lflush>:
 8004ec0:	898b      	ldrh	r3, [r1, #12]
 8004ec2:	f003 0309 	and.w	r3, r3, #9
 8004ec6:	2b09      	cmp	r3, #9
 8004ec8:	d103      	bne.n	8004ed2 <lflush+0x12>
 8004eca:	4b03      	ldr	r3, [pc, #12]	@ (8004ed8 <lflush+0x18>)
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	f000 bdd1 	b.w	8005a74 <_fflush_r>
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	20000018 	.word	0x20000018

08004edc <__srefill_r>:
 8004edc:	b570      	push	{r4, r5, r6, lr}
 8004ede:	460c      	mov	r4, r1
 8004ee0:	4605      	mov	r5, r0
 8004ee2:	b118      	cbz	r0, 8004eec <__srefill_r+0x10>
 8004ee4:	6a03      	ldr	r3, [r0, #32]
 8004ee6:	b90b      	cbnz	r3, 8004eec <__srefill_r+0x10>
 8004ee8:	f7ff ffb4 	bl	8004e54 <__sinit>
 8004eec:	2300      	movs	r3, #0
 8004eee:	6063      	str	r3, [r4, #4]
 8004ef0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ef4:	069e      	lsls	r6, r3, #26
 8004ef6:	d408      	bmi.n	8004f0a <__srefill_r+0x2e>
 8004ef8:	0758      	lsls	r0, r3, #29
 8004efa:	d445      	bmi.n	8004f88 <__srefill_r+0xac>
 8004efc:	06d9      	lsls	r1, r3, #27
 8004efe:	d407      	bmi.n	8004f10 <__srefill_r+0x34>
 8004f00:	2209      	movs	r2, #9
 8004f02:	602a      	str	r2, [r5, #0]
 8004f04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f08:	81a3      	strh	r3, [r4, #12]
 8004f0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f0e:	bd70      	pop	{r4, r5, r6, pc}
 8004f10:	071a      	lsls	r2, r3, #28
 8004f12:	d50b      	bpl.n	8004f2c <__srefill_r+0x50>
 8004f14:	4621      	mov	r1, r4
 8004f16:	4628      	mov	r0, r5
 8004f18:	f000 fdac 	bl	8005a74 <_fflush_r>
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	d1f4      	bne.n	8004f0a <__srefill_r+0x2e>
 8004f20:	89a3      	ldrh	r3, [r4, #12]
 8004f22:	60a0      	str	r0, [r4, #8]
 8004f24:	f023 0308 	bic.w	r3, r3, #8
 8004f28:	81a3      	strh	r3, [r4, #12]
 8004f2a:	61a0      	str	r0, [r4, #24]
 8004f2c:	89a3      	ldrh	r3, [r4, #12]
 8004f2e:	f043 0304 	orr.w	r3, r3, #4
 8004f32:	81a3      	strh	r3, [r4, #12]
 8004f34:	6923      	ldr	r3, [r4, #16]
 8004f36:	b91b      	cbnz	r3, 8004f40 <__srefill_r+0x64>
 8004f38:	4621      	mov	r1, r4
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	f000 fde8 	bl	8005b10 <__smakebuf_r>
 8004f40:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8004f44:	07b3      	lsls	r3, r6, #30
 8004f46:	d00f      	beq.n	8004f68 <__srefill_r+0x8c>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8004fb8 <__srefill_r+0xdc>)
 8004f4c:	491b      	ldr	r1, [pc, #108]	@ (8004fbc <__srefill_r+0xe0>)
 8004f4e:	481c      	ldr	r0, [pc, #112]	@ (8004fc0 <__srefill_r+0xe4>)
 8004f50:	81a3      	strh	r3, [r4, #12]
 8004f52:	f7ff ff97 	bl	8004e84 <_fwalk_sglue>
 8004f56:	81a6      	strh	r6, [r4, #12]
 8004f58:	f006 0609 	and.w	r6, r6, #9
 8004f5c:	2e09      	cmp	r6, #9
 8004f5e:	d103      	bne.n	8004f68 <__srefill_r+0x8c>
 8004f60:	4621      	mov	r1, r4
 8004f62:	4628      	mov	r0, r5
 8004f64:	f000 fd02 	bl	800596c <__sflush_r>
 8004f68:	6922      	ldr	r2, [r4, #16]
 8004f6a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8004f6c:	6963      	ldr	r3, [r4, #20]
 8004f6e:	6a21      	ldr	r1, [r4, #32]
 8004f70:	6022      	str	r2, [r4, #0]
 8004f72:	4628      	mov	r0, r5
 8004f74:	47b0      	blx	r6
 8004f76:	2800      	cmp	r0, #0
 8004f78:	6060      	str	r0, [r4, #4]
 8004f7a:	dc17      	bgt.n	8004fac <__srefill_r+0xd0>
 8004f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f80:	d116      	bne.n	8004fb0 <__srefill_r+0xd4>
 8004f82:	f043 0320 	orr.w	r3, r3, #32
 8004f86:	e7bf      	b.n	8004f08 <__srefill_r+0x2c>
 8004f88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f8a:	2900      	cmp	r1, #0
 8004f8c:	d0d2      	beq.n	8004f34 <__srefill_r+0x58>
 8004f8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f92:	4299      	cmp	r1, r3
 8004f94:	d002      	beq.n	8004f9c <__srefill_r+0xc0>
 8004f96:	4628      	mov	r0, r5
 8004f98:	f000 f90a 	bl	80051b0 <_free_r>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004fa0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004fa2:	6063      	str	r3, [r4, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0c5      	beq.n	8004f34 <__srefill_r+0x58>
 8004fa8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004faa:	6023      	str	r3, [r4, #0]
 8004fac:	2000      	movs	r0, #0
 8004fae:	e7ae      	b.n	8004f0e <__srefill_r+0x32>
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	6062      	str	r2, [r4, #4]
 8004fb4:	e7a6      	b.n	8004f04 <__srefill_r+0x28>
 8004fb6:	bf00      	nop
 8004fb8:	2000000c 	.word	0x2000000c
 8004fbc:	08004ec1 	.word	0x08004ec1
 8004fc0:	2000001c 	.word	0x2000001c

08004fc4 <siprintf>:
 8004fc4:	b40e      	push	{r1, r2, r3}
 8004fc6:	b500      	push	{lr}
 8004fc8:	b09c      	sub	sp, #112	@ 0x70
 8004fca:	ab1d      	add	r3, sp, #116	@ 0x74
 8004fcc:	9002      	str	r0, [sp, #8]
 8004fce:	9006      	str	r0, [sp, #24]
 8004fd0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004fd4:	4809      	ldr	r0, [pc, #36]	@ (8004ffc <siprintf+0x38>)
 8004fd6:	9107      	str	r1, [sp, #28]
 8004fd8:	9104      	str	r1, [sp, #16]
 8004fda:	4909      	ldr	r1, [pc, #36]	@ (8005000 <siprintf+0x3c>)
 8004fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fe0:	9105      	str	r1, [sp, #20]
 8004fe2:	6800      	ldr	r0, [r0, #0]
 8004fe4:	9301      	str	r3, [sp, #4]
 8004fe6:	a902      	add	r1, sp, #8
 8004fe8:	f000 fa36 	bl	8005458 <_svfiprintf_r>
 8004fec:	9b02      	ldr	r3, [sp, #8]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	b01c      	add	sp, #112	@ 0x70
 8004ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ff8:	b003      	add	sp, #12
 8004ffa:	4770      	bx	lr
 8004ffc:	20000018 	.word	0x20000018
 8005000:	ffff0208 	.word	0xffff0208

08005004 <__sread>:
 8005004:	b510      	push	{r4, lr}
 8005006:	460c      	mov	r4, r1
 8005008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800500c:	f000 f868 	bl	80050e0 <_read_r>
 8005010:	2800      	cmp	r0, #0
 8005012:	bfab      	itete	ge
 8005014:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005016:	89a3      	ldrhlt	r3, [r4, #12]
 8005018:	181b      	addge	r3, r3, r0
 800501a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800501e:	bfac      	ite	ge
 8005020:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005022:	81a3      	strhlt	r3, [r4, #12]
 8005024:	bd10      	pop	{r4, pc}

08005026 <__swrite>:
 8005026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800502a:	461f      	mov	r7, r3
 800502c:	898b      	ldrh	r3, [r1, #12]
 800502e:	05db      	lsls	r3, r3, #23
 8005030:	4605      	mov	r5, r0
 8005032:	460c      	mov	r4, r1
 8005034:	4616      	mov	r6, r2
 8005036:	d505      	bpl.n	8005044 <__swrite+0x1e>
 8005038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800503c:	2302      	movs	r3, #2
 800503e:	2200      	movs	r2, #0
 8005040:	f000 f83c 	bl	80050bc <_lseek_r>
 8005044:	89a3      	ldrh	r3, [r4, #12]
 8005046:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800504a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800504e:	81a3      	strh	r3, [r4, #12]
 8005050:	4632      	mov	r2, r6
 8005052:	463b      	mov	r3, r7
 8005054:	4628      	mov	r0, r5
 8005056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800505a:	f000 b853 	b.w	8005104 <_write_r>

0800505e <__sseek>:
 800505e:	b510      	push	{r4, lr}
 8005060:	460c      	mov	r4, r1
 8005062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005066:	f000 f829 	bl	80050bc <_lseek_r>
 800506a:	1c43      	adds	r3, r0, #1
 800506c:	89a3      	ldrh	r3, [r4, #12]
 800506e:	bf15      	itete	ne
 8005070:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005072:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005076:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800507a:	81a3      	strheq	r3, [r4, #12]
 800507c:	bf18      	it	ne
 800507e:	81a3      	strhne	r3, [r4, #12]
 8005080:	bd10      	pop	{r4, pc}

08005082 <__sclose>:
 8005082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005086:	f000 b809 	b.w	800509c <_close_r>

0800508a <memset>:
 800508a:	4402      	add	r2, r0
 800508c:	4603      	mov	r3, r0
 800508e:	4293      	cmp	r3, r2
 8005090:	d100      	bne.n	8005094 <memset+0xa>
 8005092:	4770      	bx	lr
 8005094:	f803 1b01 	strb.w	r1, [r3], #1
 8005098:	e7f9      	b.n	800508e <memset+0x4>
	...

0800509c <_close_r>:
 800509c:	b538      	push	{r3, r4, r5, lr}
 800509e:	4d06      	ldr	r5, [pc, #24]	@ (80050b8 <_close_r+0x1c>)
 80050a0:	2300      	movs	r3, #0
 80050a2:	4604      	mov	r4, r0
 80050a4:	4608      	mov	r0, r1
 80050a6:	602b      	str	r3, [r5, #0]
 80050a8:	f7fb ff4b 	bl	8000f42 <_close>
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	d102      	bne.n	80050b6 <_close_r+0x1a>
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	b103      	cbz	r3, 80050b6 <_close_r+0x1a>
 80050b4:	6023      	str	r3, [r4, #0]
 80050b6:	bd38      	pop	{r3, r4, r5, pc}
 80050b8:	200008f0 	.word	0x200008f0

080050bc <_lseek_r>:
 80050bc:	b538      	push	{r3, r4, r5, lr}
 80050be:	4d07      	ldr	r5, [pc, #28]	@ (80050dc <_lseek_r+0x20>)
 80050c0:	4604      	mov	r4, r0
 80050c2:	4608      	mov	r0, r1
 80050c4:	4611      	mov	r1, r2
 80050c6:	2200      	movs	r2, #0
 80050c8:	602a      	str	r2, [r5, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	f7fb ff60 	bl	8000f90 <_lseek>
 80050d0:	1c43      	adds	r3, r0, #1
 80050d2:	d102      	bne.n	80050da <_lseek_r+0x1e>
 80050d4:	682b      	ldr	r3, [r5, #0]
 80050d6:	b103      	cbz	r3, 80050da <_lseek_r+0x1e>
 80050d8:	6023      	str	r3, [r4, #0]
 80050da:	bd38      	pop	{r3, r4, r5, pc}
 80050dc:	200008f0 	.word	0x200008f0

080050e0 <_read_r>:
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	4d07      	ldr	r5, [pc, #28]	@ (8005100 <_read_r+0x20>)
 80050e4:	4604      	mov	r4, r0
 80050e6:	4608      	mov	r0, r1
 80050e8:	4611      	mov	r1, r2
 80050ea:	2200      	movs	r2, #0
 80050ec:	602a      	str	r2, [r5, #0]
 80050ee:	461a      	mov	r2, r3
 80050f0:	f7fb feee 	bl	8000ed0 <_read>
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d102      	bne.n	80050fe <_read_r+0x1e>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	b103      	cbz	r3, 80050fe <_read_r+0x1e>
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	bd38      	pop	{r3, r4, r5, pc}
 8005100:	200008f0 	.word	0x200008f0

08005104 <_write_r>:
 8005104:	b538      	push	{r3, r4, r5, lr}
 8005106:	4d07      	ldr	r5, [pc, #28]	@ (8005124 <_write_r+0x20>)
 8005108:	4604      	mov	r4, r0
 800510a:	4608      	mov	r0, r1
 800510c:	4611      	mov	r1, r2
 800510e:	2200      	movs	r2, #0
 8005110:	602a      	str	r2, [r5, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	f7fb fef9 	bl	8000f0a <_write>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	d102      	bne.n	8005122 <_write_r+0x1e>
 800511c:	682b      	ldr	r3, [r5, #0]
 800511e:	b103      	cbz	r3, 8005122 <_write_r+0x1e>
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	bd38      	pop	{r3, r4, r5, pc}
 8005124:	200008f0 	.word	0x200008f0

08005128 <__errno>:
 8005128:	4b01      	ldr	r3, [pc, #4]	@ (8005130 <__errno+0x8>)
 800512a:	6818      	ldr	r0, [r3, #0]
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	20000018 	.word	0x20000018

08005134 <__libc_init_array>:
 8005134:	b570      	push	{r4, r5, r6, lr}
 8005136:	4d0d      	ldr	r5, [pc, #52]	@ (800516c <__libc_init_array+0x38>)
 8005138:	4c0d      	ldr	r4, [pc, #52]	@ (8005170 <__libc_init_array+0x3c>)
 800513a:	1b64      	subs	r4, r4, r5
 800513c:	10a4      	asrs	r4, r4, #2
 800513e:	2600      	movs	r6, #0
 8005140:	42a6      	cmp	r6, r4
 8005142:	d109      	bne.n	8005158 <__libc_init_array+0x24>
 8005144:	4d0b      	ldr	r5, [pc, #44]	@ (8005174 <__libc_init_array+0x40>)
 8005146:	4c0c      	ldr	r4, [pc, #48]	@ (8005178 <__libc_init_array+0x44>)
 8005148:	f000 fda0 	bl	8005c8c <_init>
 800514c:	1b64      	subs	r4, r4, r5
 800514e:	10a4      	asrs	r4, r4, #2
 8005150:	2600      	movs	r6, #0
 8005152:	42a6      	cmp	r6, r4
 8005154:	d105      	bne.n	8005162 <__libc_init_array+0x2e>
 8005156:	bd70      	pop	{r4, r5, r6, pc}
 8005158:	f855 3b04 	ldr.w	r3, [r5], #4
 800515c:	4798      	blx	r3
 800515e:	3601      	adds	r6, #1
 8005160:	e7ee      	b.n	8005140 <__libc_init_array+0xc>
 8005162:	f855 3b04 	ldr.w	r3, [r5], #4
 8005166:	4798      	blx	r3
 8005168:	3601      	adds	r6, #1
 800516a:	e7f2      	b.n	8005152 <__libc_init_array+0x1e>
 800516c:	08005d70 	.word	0x08005d70
 8005170:	08005d70 	.word	0x08005d70
 8005174:	08005d70 	.word	0x08005d70
 8005178:	08005d74 	.word	0x08005d74

0800517c <__retarget_lock_init_recursive>:
 800517c:	4770      	bx	lr

0800517e <__retarget_lock_acquire_recursive>:
 800517e:	4770      	bx	lr

08005180 <__retarget_lock_release_recursive>:
 8005180:	4770      	bx	lr

08005182 <strcpy>:
 8005182:	4603      	mov	r3, r0
 8005184:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005188:	f803 2b01 	strb.w	r2, [r3], #1
 800518c:	2a00      	cmp	r2, #0
 800518e:	d1f9      	bne.n	8005184 <strcpy+0x2>
 8005190:	4770      	bx	lr

08005192 <memcpy>:
 8005192:	440a      	add	r2, r1
 8005194:	4291      	cmp	r1, r2
 8005196:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800519a:	d100      	bne.n	800519e <memcpy+0xc>
 800519c:	4770      	bx	lr
 800519e:	b510      	push	{r4, lr}
 80051a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051a8:	4291      	cmp	r1, r2
 80051aa:	d1f9      	bne.n	80051a0 <memcpy+0xe>
 80051ac:	bd10      	pop	{r4, pc}
	...

080051b0 <_free_r>:
 80051b0:	b538      	push	{r3, r4, r5, lr}
 80051b2:	4605      	mov	r5, r0
 80051b4:	2900      	cmp	r1, #0
 80051b6:	d041      	beq.n	800523c <_free_r+0x8c>
 80051b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051bc:	1f0c      	subs	r4, r1, #4
 80051be:	2b00      	cmp	r3, #0
 80051c0:	bfb8      	it	lt
 80051c2:	18e4      	addlt	r4, r4, r3
 80051c4:	f000 f8e0 	bl	8005388 <__malloc_lock>
 80051c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005240 <_free_r+0x90>)
 80051ca:	6813      	ldr	r3, [r2, #0]
 80051cc:	b933      	cbnz	r3, 80051dc <_free_r+0x2c>
 80051ce:	6063      	str	r3, [r4, #4]
 80051d0:	6014      	str	r4, [r2, #0]
 80051d2:	4628      	mov	r0, r5
 80051d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051d8:	f000 b8dc 	b.w	8005394 <__malloc_unlock>
 80051dc:	42a3      	cmp	r3, r4
 80051de:	d908      	bls.n	80051f2 <_free_r+0x42>
 80051e0:	6820      	ldr	r0, [r4, #0]
 80051e2:	1821      	adds	r1, r4, r0
 80051e4:	428b      	cmp	r3, r1
 80051e6:	bf01      	itttt	eq
 80051e8:	6819      	ldreq	r1, [r3, #0]
 80051ea:	685b      	ldreq	r3, [r3, #4]
 80051ec:	1809      	addeq	r1, r1, r0
 80051ee:	6021      	streq	r1, [r4, #0]
 80051f0:	e7ed      	b.n	80051ce <_free_r+0x1e>
 80051f2:	461a      	mov	r2, r3
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	b10b      	cbz	r3, 80051fc <_free_r+0x4c>
 80051f8:	42a3      	cmp	r3, r4
 80051fa:	d9fa      	bls.n	80051f2 <_free_r+0x42>
 80051fc:	6811      	ldr	r1, [r2, #0]
 80051fe:	1850      	adds	r0, r2, r1
 8005200:	42a0      	cmp	r0, r4
 8005202:	d10b      	bne.n	800521c <_free_r+0x6c>
 8005204:	6820      	ldr	r0, [r4, #0]
 8005206:	4401      	add	r1, r0
 8005208:	1850      	adds	r0, r2, r1
 800520a:	4283      	cmp	r3, r0
 800520c:	6011      	str	r1, [r2, #0]
 800520e:	d1e0      	bne.n	80051d2 <_free_r+0x22>
 8005210:	6818      	ldr	r0, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	6053      	str	r3, [r2, #4]
 8005216:	4408      	add	r0, r1
 8005218:	6010      	str	r0, [r2, #0]
 800521a:	e7da      	b.n	80051d2 <_free_r+0x22>
 800521c:	d902      	bls.n	8005224 <_free_r+0x74>
 800521e:	230c      	movs	r3, #12
 8005220:	602b      	str	r3, [r5, #0]
 8005222:	e7d6      	b.n	80051d2 <_free_r+0x22>
 8005224:	6820      	ldr	r0, [r4, #0]
 8005226:	1821      	adds	r1, r4, r0
 8005228:	428b      	cmp	r3, r1
 800522a:	bf04      	itt	eq
 800522c:	6819      	ldreq	r1, [r3, #0]
 800522e:	685b      	ldreq	r3, [r3, #4]
 8005230:	6063      	str	r3, [r4, #4]
 8005232:	bf04      	itt	eq
 8005234:	1809      	addeq	r1, r1, r0
 8005236:	6021      	streq	r1, [r4, #0]
 8005238:	6054      	str	r4, [r2, #4]
 800523a:	e7ca      	b.n	80051d2 <_free_r+0x22>
 800523c:	bd38      	pop	{r3, r4, r5, pc}
 800523e:	bf00      	nop
 8005240:	200008fc 	.word	0x200008fc

08005244 <sbrk_aligned>:
 8005244:	b570      	push	{r4, r5, r6, lr}
 8005246:	4e0f      	ldr	r6, [pc, #60]	@ (8005284 <sbrk_aligned+0x40>)
 8005248:	460c      	mov	r4, r1
 800524a:	6831      	ldr	r1, [r6, #0]
 800524c:	4605      	mov	r5, r0
 800524e:	b911      	cbnz	r1, 8005256 <sbrk_aligned+0x12>
 8005250:	f000 fcd6 	bl	8005c00 <_sbrk_r>
 8005254:	6030      	str	r0, [r6, #0]
 8005256:	4621      	mov	r1, r4
 8005258:	4628      	mov	r0, r5
 800525a:	f000 fcd1 	bl	8005c00 <_sbrk_r>
 800525e:	1c43      	adds	r3, r0, #1
 8005260:	d103      	bne.n	800526a <sbrk_aligned+0x26>
 8005262:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005266:	4620      	mov	r0, r4
 8005268:	bd70      	pop	{r4, r5, r6, pc}
 800526a:	1cc4      	adds	r4, r0, #3
 800526c:	f024 0403 	bic.w	r4, r4, #3
 8005270:	42a0      	cmp	r0, r4
 8005272:	d0f8      	beq.n	8005266 <sbrk_aligned+0x22>
 8005274:	1a21      	subs	r1, r4, r0
 8005276:	4628      	mov	r0, r5
 8005278:	f000 fcc2 	bl	8005c00 <_sbrk_r>
 800527c:	3001      	adds	r0, #1
 800527e:	d1f2      	bne.n	8005266 <sbrk_aligned+0x22>
 8005280:	e7ef      	b.n	8005262 <sbrk_aligned+0x1e>
 8005282:	bf00      	nop
 8005284:	200008f8 	.word	0x200008f8

08005288 <_malloc_r>:
 8005288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800528c:	1ccd      	adds	r5, r1, #3
 800528e:	f025 0503 	bic.w	r5, r5, #3
 8005292:	3508      	adds	r5, #8
 8005294:	2d0c      	cmp	r5, #12
 8005296:	bf38      	it	cc
 8005298:	250c      	movcc	r5, #12
 800529a:	2d00      	cmp	r5, #0
 800529c:	4606      	mov	r6, r0
 800529e:	db01      	blt.n	80052a4 <_malloc_r+0x1c>
 80052a0:	42a9      	cmp	r1, r5
 80052a2:	d904      	bls.n	80052ae <_malloc_r+0x26>
 80052a4:	230c      	movs	r3, #12
 80052a6:	6033      	str	r3, [r6, #0]
 80052a8:	2000      	movs	r0, #0
 80052aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005384 <_malloc_r+0xfc>
 80052b2:	f000 f869 	bl	8005388 <__malloc_lock>
 80052b6:	f8d8 3000 	ldr.w	r3, [r8]
 80052ba:	461c      	mov	r4, r3
 80052bc:	bb44      	cbnz	r4, 8005310 <_malloc_r+0x88>
 80052be:	4629      	mov	r1, r5
 80052c0:	4630      	mov	r0, r6
 80052c2:	f7ff ffbf 	bl	8005244 <sbrk_aligned>
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	4604      	mov	r4, r0
 80052ca:	d158      	bne.n	800537e <_malloc_r+0xf6>
 80052cc:	f8d8 4000 	ldr.w	r4, [r8]
 80052d0:	4627      	mov	r7, r4
 80052d2:	2f00      	cmp	r7, #0
 80052d4:	d143      	bne.n	800535e <_malloc_r+0xd6>
 80052d6:	2c00      	cmp	r4, #0
 80052d8:	d04b      	beq.n	8005372 <_malloc_r+0xea>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	4639      	mov	r1, r7
 80052de:	4630      	mov	r0, r6
 80052e0:	eb04 0903 	add.w	r9, r4, r3
 80052e4:	f000 fc8c 	bl	8005c00 <_sbrk_r>
 80052e8:	4581      	cmp	r9, r0
 80052ea:	d142      	bne.n	8005372 <_malloc_r+0xea>
 80052ec:	6821      	ldr	r1, [r4, #0]
 80052ee:	1a6d      	subs	r5, r5, r1
 80052f0:	4629      	mov	r1, r5
 80052f2:	4630      	mov	r0, r6
 80052f4:	f7ff ffa6 	bl	8005244 <sbrk_aligned>
 80052f8:	3001      	adds	r0, #1
 80052fa:	d03a      	beq.n	8005372 <_malloc_r+0xea>
 80052fc:	6823      	ldr	r3, [r4, #0]
 80052fe:	442b      	add	r3, r5
 8005300:	6023      	str	r3, [r4, #0]
 8005302:	f8d8 3000 	ldr.w	r3, [r8]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	bb62      	cbnz	r2, 8005364 <_malloc_r+0xdc>
 800530a:	f8c8 7000 	str.w	r7, [r8]
 800530e:	e00f      	b.n	8005330 <_malloc_r+0xa8>
 8005310:	6822      	ldr	r2, [r4, #0]
 8005312:	1b52      	subs	r2, r2, r5
 8005314:	d420      	bmi.n	8005358 <_malloc_r+0xd0>
 8005316:	2a0b      	cmp	r2, #11
 8005318:	d917      	bls.n	800534a <_malloc_r+0xc2>
 800531a:	1961      	adds	r1, r4, r5
 800531c:	42a3      	cmp	r3, r4
 800531e:	6025      	str	r5, [r4, #0]
 8005320:	bf18      	it	ne
 8005322:	6059      	strne	r1, [r3, #4]
 8005324:	6863      	ldr	r3, [r4, #4]
 8005326:	bf08      	it	eq
 8005328:	f8c8 1000 	streq.w	r1, [r8]
 800532c:	5162      	str	r2, [r4, r5]
 800532e:	604b      	str	r3, [r1, #4]
 8005330:	4630      	mov	r0, r6
 8005332:	f000 f82f 	bl	8005394 <__malloc_unlock>
 8005336:	f104 000b 	add.w	r0, r4, #11
 800533a:	1d23      	adds	r3, r4, #4
 800533c:	f020 0007 	bic.w	r0, r0, #7
 8005340:	1ac2      	subs	r2, r0, r3
 8005342:	bf1c      	itt	ne
 8005344:	1a1b      	subne	r3, r3, r0
 8005346:	50a3      	strne	r3, [r4, r2]
 8005348:	e7af      	b.n	80052aa <_malloc_r+0x22>
 800534a:	6862      	ldr	r2, [r4, #4]
 800534c:	42a3      	cmp	r3, r4
 800534e:	bf0c      	ite	eq
 8005350:	f8c8 2000 	streq.w	r2, [r8]
 8005354:	605a      	strne	r2, [r3, #4]
 8005356:	e7eb      	b.n	8005330 <_malloc_r+0xa8>
 8005358:	4623      	mov	r3, r4
 800535a:	6864      	ldr	r4, [r4, #4]
 800535c:	e7ae      	b.n	80052bc <_malloc_r+0x34>
 800535e:	463c      	mov	r4, r7
 8005360:	687f      	ldr	r7, [r7, #4]
 8005362:	e7b6      	b.n	80052d2 <_malloc_r+0x4a>
 8005364:	461a      	mov	r2, r3
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	42a3      	cmp	r3, r4
 800536a:	d1fb      	bne.n	8005364 <_malloc_r+0xdc>
 800536c:	2300      	movs	r3, #0
 800536e:	6053      	str	r3, [r2, #4]
 8005370:	e7de      	b.n	8005330 <_malloc_r+0xa8>
 8005372:	230c      	movs	r3, #12
 8005374:	6033      	str	r3, [r6, #0]
 8005376:	4630      	mov	r0, r6
 8005378:	f000 f80c 	bl	8005394 <__malloc_unlock>
 800537c:	e794      	b.n	80052a8 <_malloc_r+0x20>
 800537e:	6005      	str	r5, [r0, #0]
 8005380:	e7d6      	b.n	8005330 <_malloc_r+0xa8>
 8005382:	bf00      	nop
 8005384:	200008fc 	.word	0x200008fc

08005388 <__malloc_lock>:
 8005388:	4801      	ldr	r0, [pc, #4]	@ (8005390 <__malloc_lock+0x8>)
 800538a:	f7ff bef8 	b.w	800517e <__retarget_lock_acquire_recursive>
 800538e:	bf00      	nop
 8005390:	200008f4 	.word	0x200008f4

08005394 <__malloc_unlock>:
 8005394:	4801      	ldr	r0, [pc, #4]	@ (800539c <__malloc_unlock+0x8>)
 8005396:	f7ff bef3 	b.w	8005180 <__retarget_lock_release_recursive>
 800539a:	bf00      	nop
 800539c:	200008f4 	.word	0x200008f4

080053a0 <__ssputs_r>:
 80053a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053a4:	688e      	ldr	r6, [r1, #8]
 80053a6:	461f      	mov	r7, r3
 80053a8:	42be      	cmp	r6, r7
 80053aa:	680b      	ldr	r3, [r1, #0]
 80053ac:	4682      	mov	sl, r0
 80053ae:	460c      	mov	r4, r1
 80053b0:	4690      	mov	r8, r2
 80053b2:	d82d      	bhi.n	8005410 <__ssputs_r+0x70>
 80053b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80053b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80053bc:	d026      	beq.n	800540c <__ssputs_r+0x6c>
 80053be:	6965      	ldr	r5, [r4, #20]
 80053c0:	6909      	ldr	r1, [r1, #16]
 80053c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053c6:	eba3 0901 	sub.w	r9, r3, r1
 80053ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053ce:	1c7b      	adds	r3, r7, #1
 80053d0:	444b      	add	r3, r9
 80053d2:	106d      	asrs	r5, r5, #1
 80053d4:	429d      	cmp	r5, r3
 80053d6:	bf38      	it	cc
 80053d8:	461d      	movcc	r5, r3
 80053da:	0553      	lsls	r3, r2, #21
 80053dc:	d527      	bpl.n	800542e <__ssputs_r+0x8e>
 80053de:	4629      	mov	r1, r5
 80053e0:	f7ff ff52 	bl	8005288 <_malloc_r>
 80053e4:	4606      	mov	r6, r0
 80053e6:	b360      	cbz	r0, 8005442 <__ssputs_r+0xa2>
 80053e8:	6921      	ldr	r1, [r4, #16]
 80053ea:	464a      	mov	r2, r9
 80053ec:	f7ff fed1 	bl	8005192 <memcpy>
 80053f0:	89a3      	ldrh	r3, [r4, #12]
 80053f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80053f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053fa:	81a3      	strh	r3, [r4, #12]
 80053fc:	6126      	str	r6, [r4, #16]
 80053fe:	6165      	str	r5, [r4, #20]
 8005400:	444e      	add	r6, r9
 8005402:	eba5 0509 	sub.w	r5, r5, r9
 8005406:	6026      	str	r6, [r4, #0]
 8005408:	60a5      	str	r5, [r4, #8]
 800540a:	463e      	mov	r6, r7
 800540c:	42be      	cmp	r6, r7
 800540e:	d900      	bls.n	8005412 <__ssputs_r+0x72>
 8005410:	463e      	mov	r6, r7
 8005412:	6820      	ldr	r0, [r4, #0]
 8005414:	4632      	mov	r2, r6
 8005416:	4641      	mov	r1, r8
 8005418:	f000 fbb6 	bl	8005b88 <memmove>
 800541c:	68a3      	ldr	r3, [r4, #8]
 800541e:	1b9b      	subs	r3, r3, r6
 8005420:	60a3      	str	r3, [r4, #8]
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	4433      	add	r3, r6
 8005426:	6023      	str	r3, [r4, #0]
 8005428:	2000      	movs	r0, #0
 800542a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800542e:	462a      	mov	r2, r5
 8005430:	f000 fbf6 	bl	8005c20 <_realloc_r>
 8005434:	4606      	mov	r6, r0
 8005436:	2800      	cmp	r0, #0
 8005438:	d1e0      	bne.n	80053fc <__ssputs_r+0x5c>
 800543a:	6921      	ldr	r1, [r4, #16]
 800543c:	4650      	mov	r0, sl
 800543e:	f7ff feb7 	bl	80051b0 <_free_r>
 8005442:	230c      	movs	r3, #12
 8005444:	f8ca 3000 	str.w	r3, [sl]
 8005448:	89a3      	ldrh	r3, [r4, #12]
 800544a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800544e:	81a3      	strh	r3, [r4, #12]
 8005450:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005454:	e7e9      	b.n	800542a <__ssputs_r+0x8a>
	...

08005458 <_svfiprintf_r>:
 8005458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545c:	4698      	mov	r8, r3
 800545e:	898b      	ldrh	r3, [r1, #12]
 8005460:	061b      	lsls	r3, r3, #24
 8005462:	b09d      	sub	sp, #116	@ 0x74
 8005464:	4607      	mov	r7, r0
 8005466:	460d      	mov	r5, r1
 8005468:	4614      	mov	r4, r2
 800546a:	d510      	bpl.n	800548e <_svfiprintf_r+0x36>
 800546c:	690b      	ldr	r3, [r1, #16]
 800546e:	b973      	cbnz	r3, 800548e <_svfiprintf_r+0x36>
 8005470:	2140      	movs	r1, #64	@ 0x40
 8005472:	f7ff ff09 	bl	8005288 <_malloc_r>
 8005476:	6028      	str	r0, [r5, #0]
 8005478:	6128      	str	r0, [r5, #16]
 800547a:	b930      	cbnz	r0, 800548a <_svfiprintf_r+0x32>
 800547c:	230c      	movs	r3, #12
 800547e:	603b      	str	r3, [r7, #0]
 8005480:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005484:	b01d      	add	sp, #116	@ 0x74
 8005486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800548a:	2340      	movs	r3, #64	@ 0x40
 800548c:	616b      	str	r3, [r5, #20]
 800548e:	2300      	movs	r3, #0
 8005490:	9309      	str	r3, [sp, #36]	@ 0x24
 8005492:	2320      	movs	r3, #32
 8005494:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005498:	f8cd 800c 	str.w	r8, [sp, #12]
 800549c:	2330      	movs	r3, #48	@ 0x30
 800549e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800563c <_svfiprintf_r+0x1e4>
 80054a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80054a6:	f04f 0901 	mov.w	r9, #1
 80054aa:	4623      	mov	r3, r4
 80054ac:	469a      	mov	sl, r3
 80054ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054b2:	b10a      	cbz	r2, 80054b8 <_svfiprintf_r+0x60>
 80054b4:	2a25      	cmp	r2, #37	@ 0x25
 80054b6:	d1f9      	bne.n	80054ac <_svfiprintf_r+0x54>
 80054b8:	ebba 0b04 	subs.w	fp, sl, r4
 80054bc:	d00b      	beq.n	80054d6 <_svfiprintf_r+0x7e>
 80054be:	465b      	mov	r3, fp
 80054c0:	4622      	mov	r2, r4
 80054c2:	4629      	mov	r1, r5
 80054c4:	4638      	mov	r0, r7
 80054c6:	f7ff ff6b 	bl	80053a0 <__ssputs_r>
 80054ca:	3001      	adds	r0, #1
 80054cc:	f000 80a7 	beq.w	800561e <_svfiprintf_r+0x1c6>
 80054d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054d2:	445a      	add	r2, fp
 80054d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80054d6:	f89a 3000 	ldrb.w	r3, [sl]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 809f 	beq.w	800561e <_svfiprintf_r+0x1c6>
 80054e0:	2300      	movs	r3, #0
 80054e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80054e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054ea:	f10a 0a01 	add.w	sl, sl, #1
 80054ee:	9304      	str	r3, [sp, #16]
 80054f0:	9307      	str	r3, [sp, #28]
 80054f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80054f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80054f8:	4654      	mov	r4, sl
 80054fa:	2205      	movs	r2, #5
 80054fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005500:	484e      	ldr	r0, [pc, #312]	@ (800563c <_svfiprintf_r+0x1e4>)
 8005502:	f7fa fead 	bl	8000260 <memchr>
 8005506:	9a04      	ldr	r2, [sp, #16]
 8005508:	b9d8      	cbnz	r0, 8005542 <_svfiprintf_r+0xea>
 800550a:	06d0      	lsls	r0, r2, #27
 800550c:	bf44      	itt	mi
 800550e:	2320      	movmi	r3, #32
 8005510:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005514:	0711      	lsls	r1, r2, #28
 8005516:	bf44      	itt	mi
 8005518:	232b      	movmi	r3, #43	@ 0x2b
 800551a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800551e:	f89a 3000 	ldrb.w	r3, [sl]
 8005522:	2b2a      	cmp	r3, #42	@ 0x2a
 8005524:	d015      	beq.n	8005552 <_svfiprintf_r+0xfa>
 8005526:	9a07      	ldr	r2, [sp, #28]
 8005528:	4654      	mov	r4, sl
 800552a:	2000      	movs	r0, #0
 800552c:	f04f 0c0a 	mov.w	ip, #10
 8005530:	4621      	mov	r1, r4
 8005532:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005536:	3b30      	subs	r3, #48	@ 0x30
 8005538:	2b09      	cmp	r3, #9
 800553a:	d94b      	bls.n	80055d4 <_svfiprintf_r+0x17c>
 800553c:	b1b0      	cbz	r0, 800556c <_svfiprintf_r+0x114>
 800553e:	9207      	str	r2, [sp, #28]
 8005540:	e014      	b.n	800556c <_svfiprintf_r+0x114>
 8005542:	eba0 0308 	sub.w	r3, r0, r8
 8005546:	fa09 f303 	lsl.w	r3, r9, r3
 800554a:	4313      	orrs	r3, r2
 800554c:	9304      	str	r3, [sp, #16]
 800554e:	46a2      	mov	sl, r4
 8005550:	e7d2      	b.n	80054f8 <_svfiprintf_r+0xa0>
 8005552:	9b03      	ldr	r3, [sp, #12]
 8005554:	1d19      	adds	r1, r3, #4
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	9103      	str	r1, [sp, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	bfbb      	ittet	lt
 800555e:	425b      	neglt	r3, r3
 8005560:	f042 0202 	orrlt.w	r2, r2, #2
 8005564:	9307      	strge	r3, [sp, #28]
 8005566:	9307      	strlt	r3, [sp, #28]
 8005568:	bfb8      	it	lt
 800556a:	9204      	strlt	r2, [sp, #16]
 800556c:	7823      	ldrb	r3, [r4, #0]
 800556e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005570:	d10a      	bne.n	8005588 <_svfiprintf_r+0x130>
 8005572:	7863      	ldrb	r3, [r4, #1]
 8005574:	2b2a      	cmp	r3, #42	@ 0x2a
 8005576:	d132      	bne.n	80055de <_svfiprintf_r+0x186>
 8005578:	9b03      	ldr	r3, [sp, #12]
 800557a:	1d1a      	adds	r2, r3, #4
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	9203      	str	r2, [sp, #12]
 8005580:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005584:	3402      	adds	r4, #2
 8005586:	9305      	str	r3, [sp, #20]
 8005588:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800564c <_svfiprintf_r+0x1f4>
 800558c:	7821      	ldrb	r1, [r4, #0]
 800558e:	2203      	movs	r2, #3
 8005590:	4650      	mov	r0, sl
 8005592:	f7fa fe65 	bl	8000260 <memchr>
 8005596:	b138      	cbz	r0, 80055a8 <_svfiprintf_r+0x150>
 8005598:	9b04      	ldr	r3, [sp, #16]
 800559a:	eba0 000a 	sub.w	r0, r0, sl
 800559e:	2240      	movs	r2, #64	@ 0x40
 80055a0:	4082      	lsls	r2, r0
 80055a2:	4313      	orrs	r3, r2
 80055a4:	3401      	adds	r4, #1
 80055a6:	9304      	str	r3, [sp, #16]
 80055a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ac:	4824      	ldr	r0, [pc, #144]	@ (8005640 <_svfiprintf_r+0x1e8>)
 80055ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80055b2:	2206      	movs	r2, #6
 80055b4:	f7fa fe54 	bl	8000260 <memchr>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d036      	beq.n	800562a <_svfiprintf_r+0x1d2>
 80055bc:	4b21      	ldr	r3, [pc, #132]	@ (8005644 <_svfiprintf_r+0x1ec>)
 80055be:	bb1b      	cbnz	r3, 8005608 <_svfiprintf_r+0x1b0>
 80055c0:	9b03      	ldr	r3, [sp, #12]
 80055c2:	3307      	adds	r3, #7
 80055c4:	f023 0307 	bic.w	r3, r3, #7
 80055c8:	3308      	adds	r3, #8
 80055ca:	9303      	str	r3, [sp, #12]
 80055cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055ce:	4433      	add	r3, r6
 80055d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80055d2:	e76a      	b.n	80054aa <_svfiprintf_r+0x52>
 80055d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80055d8:	460c      	mov	r4, r1
 80055da:	2001      	movs	r0, #1
 80055dc:	e7a8      	b.n	8005530 <_svfiprintf_r+0xd8>
 80055de:	2300      	movs	r3, #0
 80055e0:	3401      	adds	r4, #1
 80055e2:	9305      	str	r3, [sp, #20]
 80055e4:	4619      	mov	r1, r3
 80055e6:	f04f 0c0a 	mov.w	ip, #10
 80055ea:	4620      	mov	r0, r4
 80055ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055f0:	3a30      	subs	r2, #48	@ 0x30
 80055f2:	2a09      	cmp	r2, #9
 80055f4:	d903      	bls.n	80055fe <_svfiprintf_r+0x1a6>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0c6      	beq.n	8005588 <_svfiprintf_r+0x130>
 80055fa:	9105      	str	r1, [sp, #20]
 80055fc:	e7c4      	b.n	8005588 <_svfiprintf_r+0x130>
 80055fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005602:	4604      	mov	r4, r0
 8005604:	2301      	movs	r3, #1
 8005606:	e7f0      	b.n	80055ea <_svfiprintf_r+0x192>
 8005608:	ab03      	add	r3, sp, #12
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	462a      	mov	r2, r5
 800560e:	4b0e      	ldr	r3, [pc, #56]	@ (8005648 <_svfiprintf_r+0x1f0>)
 8005610:	a904      	add	r1, sp, #16
 8005612:	4638      	mov	r0, r7
 8005614:	f3af 8000 	nop.w
 8005618:	1c42      	adds	r2, r0, #1
 800561a:	4606      	mov	r6, r0
 800561c:	d1d6      	bne.n	80055cc <_svfiprintf_r+0x174>
 800561e:	89ab      	ldrh	r3, [r5, #12]
 8005620:	065b      	lsls	r3, r3, #25
 8005622:	f53f af2d 	bmi.w	8005480 <_svfiprintf_r+0x28>
 8005626:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005628:	e72c      	b.n	8005484 <_svfiprintf_r+0x2c>
 800562a:	ab03      	add	r3, sp, #12
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	462a      	mov	r2, r5
 8005630:	4b05      	ldr	r3, [pc, #20]	@ (8005648 <_svfiprintf_r+0x1f0>)
 8005632:	a904      	add	r1, sp, #16
 8005634:	4638      	mov	r0, r7
 8005636:	f000 f879 	bl	800572c <_printf_i>
 800563a:	e7ed      	b.n	8005618 <_svfiprintf_r+0x1c0>
 800563c:	08005d34 	.word	0x08005d34
 8005640:	08005d3e 	.word	0x08005d3e
 8005644:	00000000 	.word	0x00000000
 8005648:	080053a1 	.word	0x080053a1
 800564c:	08005d3a 	.word	0x08005d3a

08005650 <_printf_common>:
 8005650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005654:	4616      	mov	r6, r2
 8005656:	4698      	mov	r8, r3
 8005658:	688a      	ldr	r2, [r1, #8]
 800565a:	690b      	ldr	r3, [r1, #16]
 800565c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005660:	4293      	cmp	r3, r2
 8005662:	bfb8      	it	lt
 8005664:	4613      	movlt	r3, r2
 8005666:	6033      	str	r3, [r6, #0]
 8005668:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800566c:	4607      	mov	r7, r0
 800566e:	460c      	mov	r4, r1
 8005670:	b10a      	cbz	r2, 8005676 <_printf_common+0x26>
 8005672:	3301      	adds	r3, #1
 8005674:	6033      	str	r3, [r6, #0]
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	0699      	lsls	r1, r3, #26
 800567a:	bf42      	ittt	mi
 800567c:	6833      	ldrmi	r3, [r6, #0]
 800567e:	3302      	addmi	r3, #2
 8005680:	6033      	strmi	r3, [r6, #0]
 8005682:	6825      	ldr	r5, [r4, #0]
 8005684:	f015 0506 	ands.w	r5, r5, #6
 8005688:	d106      	bne.n	8005698 <_printf_common+0x48>
 800568a:	f104 0a19 	add.w	sl, r4, #25
 800568e:	68e3      	ldr	r3, [r4, #12]
 8005690:	6832      	ldr	r2, [r6, #0]
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	42ab      	cmp	r3, r5
 8005696:	dc26      	bgt.n	80056e6 <_printf_common+0x96>
 8005698:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800569c:	6822      	ldr	r2, [r4, #0]
 800569e:	3b00      	subs	r3, #0
 80056a0:	bf18      	it	ne
 80056a2:	2301      	movne	r3, #1
 80056a4:	0692      	lsls	r2, r2, #26
 80056a6:	d42b      	bmi.n	8005700 <_printf_common+0xb0>
 80056a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80056ac:	4641      	mov	r1, r8
 80056ae:	4638      	mov	r0, r7
 80056b0:	47c8      	blx	r9
 80056b2:	3001      	adds	r0, #1
 80056b4:	d01e      	beq.n	80056f4 <_printf_common+0xa4>
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	6922      	ldr	r2, [r4, #16]
 80056ba:	f003 0306 	and.w	r3, r3, #6
 80056be:	2b04      	cmp	r3, #4
 80056c0:	bf02      	ittt	eq
 80056c2:	68e5      	ldreq	r5, [r4, #12]
 80056c4:	6833      	ldreq	r3, [r6, #0]
 80056c6:	1aed      	subeq	r5, r5, r3
 80056c8:	68a3      	ldr	r3, [r4, #8]
 80056ca:	bf0c      	ite	eq
 80056cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056d0:	2500      	movne	r5, #0
 80056d2:	4293      	cmp	r3, r2
 80056d4:	bfc4      	itt	gt
 80056d6:	1a9b      	subgt	r3, r3, r2
 80056d8:	18ed      	addgt	r5, r5, r3
 80056da:	2600      	movs	r6, #0
 80056dc:	341a      	adds	r4, #26
 80056de:	42b5      	cmp	r5, r6
 80056e0:	d11a      	bne.n	8005718 <_printf_common+0xc8>
 80056e2:	2000      	movs	r0, #0
 80056e4:	e008      	b.n	80056f8 <_printf_common+0xa8>
 80056e6:	2301      	movs	r3, #1
 80056e8:	4652      	mov	r2, sl
 80056ea:	4641      	mov	r1, r8
 80056ec:	4638      	mov	r0, r7
 80056ee:	47c8      	blx	r9
 80056f0:	3001      	adds	r0, #1
 80056f2:	d103      	bne.n	80056fc <_printf_common+0xac>
 80056f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056fc:	3501      	adds	r5, #1
 80056fe:	e7c6      	b.n	800568e <_printf_common+0x3e>
 8005700:	18e1      	adds	r1, r4, r3
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	2030      	movs	r0, #48	@ 0x30
 8005706:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800570a:	4422      	add	r2, r4
 800570c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005710:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005714:	3302      	adds	r3, #2
 8005716:	e7c7      	b.n	80056a8 <_printf_common+0x58>
 8005718:	2301      	movs	r3, #1
 800571a:	4622      	mov	r2, r4
 800571c:	4641      	mov	r1, r8
 800571e:	4638      	mov	r0, r7
 8005720:	47c8      	blx	r9
 8005722:	3001      	adds	r0, #1
 8005724:	d0e6      	beq.n	80056f4 <_printf_common+0xa4>
 8005726:	3601      	adds	r6, #1
 8005728:	e7d9      	b.n	80056de <_printf_common+0x8e>
	...

0800572c <_printf_i>:
 800572c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005730:	7e0f      	ldrb	r7, [r1, #24]
 8005732:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005734:	2f78      	cmp	r7, #120	@ 0x78
 8005736:	4691      	mov	r9, r2
 8005738:	4680      	mov	r8, r0
 800573a:	460c      	mov	r4, r1
 800573c:	469a      	mov	sl, r3
 800573e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005742:	d807      	bhi.n	8005754 <_printf_i+0x28>
 8005744:	2f62      	cmp	r7, #98	@ 0x62
 8005746:	d80a      	bhi.n	800575e <_printf_i+0x32>
 8005748:	2f00      	cmp	r7, #0
 800574a:	f000 80d2 	beq.w	80058f2 <_printf_i+0x1c6>
 800574e:	2f58      	cmp	r7, #88	@ 0x58
 8005750:	f000 80b9 	beq.w	80058c6 <_printf_i+0x19a>
 8005754:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005758:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800575c:	e03a      	b.n	80057d4 <_printf_i+0xa8>
 800575e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005762:	2b15      	cmp	r3, #21
 8005764:	d8f6      	bhi.n	8005754 <_printf_i+0x28>
 8005766:	a101      	add	r1, pc, #4	@ (adr r1, 800576c <_printf_i+0x40>)
 8005768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800576c:	080057c5 	.word	0x080057c5
 8005770:	080057d9 	.word	0x080057d9
 8005774:	08005755 	.word	0x08005755
 8005778:	08005755 	.word	0x08005755
 800577c:	08005755 	.word	0x08005755
 8005780:	08005755 	.word	0x08005755
 8005784:	080057d9 	.word	0x080057d9
 8005788:	08005755 	.word	0x08005755
 800578c:	08005755 	.word	0x08005755
 8005790:	08005755 	.word	0x08005755
 8005794:	08005755 	.word	0x08005755
 8005798:	080058d9 	.word	0x080058d9
 800579c:	08005803 	.word	0x08005803
 80057a0:	08005893 	.word	0x08005893
 80057a4:	08005755 	.word	0x08005755
 80057a8:	08005755 	.word	0x08005755
 80057ac:	080058fb 	.word	0x080058fb
 80057b0:	08005755 	.word	0x08005755
 80057b4:	08005803 	.word	0x08005803
 80057b8:	08005755 	.word	0x08005755
 80057bc:	08005755 	.word	0x08005755
 80057c0:	0800589b 	.word	0x0800589b
 80057c4:	6833      	ldr	r3, [r6, #0]
 80057c6:	1d1a      	adds	r2, r3, #4
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6032      	str	r2, [r6, #0]
 80057cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80057d4:	2301      	movs	r3, #1
 80057d6:	e09d      	b.n	8005914 <_printf_i+0x1e8>
 80057d8:	6833      	ldr	r3, [r6, #0]
 80057da:	6820      	ldr	r0, [r4, #0]
 80057dc:	1d19      	adds	r1, r3, #4
 80057de:	6031      	str	r1, [r6, #0]
 80057e0:	0606      	lsls	r6, r0, #24
 80057e2:	d501      	bpl.n	80057e8 <_printf_i+0xbc>
 80057e4:	681d      	ldr	r5, [r3, #0]
 80057e6:	e003      	b.n	80057f0 <_printf_i+0xc4>
 80057e8:	0645      	lsls	r5, r0, #25
 80057ea:	d5fb      	bpl.n	80057e4 <_printf_i+0xb8>
 80057ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80057f0:	2d00      	cmp	r5, #0
 80057f2:	da03      	bge.n	80057fc <_printf_i+0xd0>
 80057f4:	232d      	movs	r3, #45	@ 0x2d
 80057f6:	426d      	negs	r5, r5
 80057f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057fc:	4859      	ldr	r0, [pc, #356]	@ (8005964 <_printf_i+0x238>)
 80057fe:	230a      	movs	r3, #10
 8005800:	e011      	b.n	8005826 <_printf_i+0xfa>
 8005802:	6821      	ldr	r1, [r4, #0]
 8005804:	6833      	ldr	r3, [r6, #0]
 8005806:	0608      	lsls	r0, r1, #24
 8005808:	f853 5b04 	ldr.w	r5, [r3], #4
 800580c:	d402      	bmi.n	8005814 <_printf_i+0xe8>
 800580e:	0649      	lsls	r1, r1, #25
 8005810:	bf48      	it	mi
 8005812:	b2ad      	uxthmi	r5, r5
 8005814:	2f6f      	cmp	r7, #111	@ 0x6f
 8005816:	4853      	ldr	r0, [pc, #332]	@ (8005964 <_printf_i+0x238>)
 8005818:	6033      	str	r3, [r6, #0]
 800581a:	bf14      	ite	ne
 800581c:	230a      	movne	r3, #10
 800581e:	2308      	moveq	r3, #8
 8005820:	2100      	movs	r1, #0
 8005822:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005826:	6866      	ldr	r6, [r4, #4]
 8005828:	60a6      	str	r6, [r4, #8]
 800582a:	2e00      	cmp	r6, #0
 800582c:	bfa2      	ittt	ge
 800582e:	6821      	ldrge	r1, [r4, #0]
 8005830:	f021 0104 	bicge.w	r1, r1, #4
 8005834:	6021      	strge	r1, [r4, #0]
 8005836:	b90d      	cbnz	r5, 800583c <_printf_i+0x110>
 8005838:	2e00      	cmp	r6, #0
 800583a:	d04b      	beq.n	80058d4 <_printf_i+0x1a8>
 800583c:	4616      	mov	r6, r2
 800583e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005842:	fb03 5711 	mls	r7, r3, r1, r5
 8005846:	5dc7      	ldrb	r7, [r0, r7]
 8005848:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800584c:	462f      	mov	r7, r5
 800584e:	42bb      	cmp	r3, r7
 8005850:	460d      	mov	r5, r1
 8005852:	d9f4      	bls.n	800583e <_printf_i+0x112>
 8005854:	2b08      	cmp	r3, #8
 8005856:	d10b      	bne.n	8005870 <_printf_i+0x144>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	07df      	lsls	r7, r3, #31
 800585c:	d508      	bpl.n	8005870 <_printf_i+0x144>
 800585e:	6923      	ldr	r3, [r4, #16]
 8005860:	6861      	ldr	r1, [r4, #4]
 8005862:	4299      	cmp	r1, r3
 8005864:	bfde      	ittt	le
 8005866:	2330      	movle	r3, #48	@ 0x30
 8005868:	f806 3c01 	strble.w	r3, [r6, #-1]
 800586c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005870:	1b92      	subs	r2, r2, r6
 8005872:	6122      	str	r2, [r4, #16]
 8005874:	f8cd a000 	str.w	sl, [sp]
 8005878:	464b      	mov	r3, r9
 800587a:	aa03      	add	r2, sp, #12
 800587c:	4621      	mov	r1, r4
 800587e:	4640      	mov	r0, r8
 8005880:	f7ff fee6 	bl	8005650 <_printf_common>
 8005884:	3001      	adds	r0, #1
 8005886:	d14a      	bne.n	800591e <_printf_i+0x1f2>
 8005888:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800588c:	b004      	add	sp, #16
 800588e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	f043 0320 	orr.w	r3, r3, #32
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	4833      	ldr	r0, [pc, #204]	@ (8005968 <_printf_i+0x23c>)
 800589c:	2778      	movs	r7, #120	@ 0x78
 800589e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	6831      	ldr	r1, [r6, #0]
 80058a6:	061f      	lsls	r7, r3, #24
 80058a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80058ac:	d402      	bmi.n	80058b4 <_printf_i+0x188>
 80058ae:	065f      	lsls	r7, r3, #25
 80058b0:	bf48      	it	mi
 80058b2:	b2ad      	uxthmi	r5, r5
 80058b4:	6031      	str	r1, [r6, #0]
 80058b6:	07d9      	lsls	r1, r3, #31
 80058b8:	bf44      	itt	mi
 80058ba:	f043 0320 	orrmi.w	r3, r3, #32
 80058be:	6023      	strmi	r3, [r4, #0]
 80058c0:	b11d      	cbz	r5, 80058ca <_printf_i+0x19e>
 80058c2:	2310      	movs	r3, #16
 80058c4:	e7ac      	b.n	8005820 <_printf_i+0xf4>
 80058c6:	4827      	ldr	r0, [pc, #156]	@ (8005964 <_printf_i+0x238>)
 80058c8:	e7e9      	b.n	800589e <_printf_i+0x172>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	f023 0320 	bic.w	r3, r3, #32
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	e7f6      	b.n	80058c2 <_printf_i+0x196>
 80058d4:	4616      	mov	r6, r2
 80058d6:	e7bd      	b.n	8005854 <_printf_i+0x128>
 80058d8:	6833      	ldr	r3, [r6, #0]
 80058da:	6825      	ldr	r5, [r4, #0]
 80058dc:	6961      	ldr	r1, [r4, #20]
 80058de:	1d18      	adds	r0, r3, #4
 80058e0:	6030      	str	r0, [r6, #0]
 80058e2:	062e      	lsls	r6, r5, #24
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	d501      	bpl.n	80058ec <_printf_i+0x1c0>
 80058e8:	6019      	str	r1, [r3, #0]
 80058ea:	e002      	b.n	80058f2 <_printf_i+0x1c6>
 80058ec:	0668      	lsls	r0, r5, #25
 80058ee:	d5fb      	bpl.n	80058e8 <_printf_i+0x1bc>
 80058f0:	8019      	strh	r1, [r3, #0]
 80058f2:	2300      	movs	r3, #0
 80058f4:	6123      	str	r3, [r4, #16]
 80058f6:	4616      	mov	r6, r2
 80058f8:	e7bc      	b.n	8005874 <_printf_i+0x148>
 80058fa:	6833      	ldr	r3, [r6, #0]
 80058fc:	1d1a      	adds	r2, r3, #4
 80058fe:	6032      	str	r2, [r6, #0]
 8005900:	681e      	ldr	r6, [r3, #0]
 8005902:	6862      	ldr	r2, [r4, #4]
 8005904:	2100      	movs	r1, #0
 8005906:	4630      	mov	r0, r6
 8005908:	f7fa fcaa 	bl	8000260 <memchr>
 800590c:	b108      	cbz	r0, 8005912 <_printf_i+0x1e6>
 800590e:	1b80      	subs	r0, r0, r6
 8005910:	6060      	str	r0, [r4, #4]
 8005912:	6863      	ldr	r3, [r4, #4]
 8005914:	6123      	str	r3, [r4, #16]
 8005916:	2300      	movs	r3, #0
 8005918:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800591c:	e7aa      	b.n	8005874 <_printf_i+0x148>
 800591e:	6923      	ldr	r3, [r4, #16]
 8005920:	4632      	mov	r2, r6
 8005922:	4649      	mov	r1, r9
 8005924:	4640      	mov	r0, r8
 8005926:	47d0      	blx	sl
 8005928:	3001      	adds	r0, #1
 800592a:	d0ad      	beq.n	8005888 <_printf_i+0x15c>
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	079b      	lsls	r3, r3, #30
 8005930:	d413      	bmi.n	800595a <_printf_i+0x22e>
 8005932:	68e0      	ldr	r0, [r4, #12]
 8005934:	9b03      	ldr	r3, [sp, #12]
 8005936:	4298      	cmp	r0, r3
 8005938:	bfb8      	it	lt
 800593a:	4618      	movlt	r0, r3
 800593c:	e7a6      	b.n	800588c <_printf_i+0x160>
 800593e:	2301      	movs	r3, #1
 8005940:	4632      	mov	r2, r6
 8005942:	4649      	mov	r1, r9
 8005944:	4640      	mov	r0, r8
 8005946:	47d0      	blx	sl
 8005948:	3001      	adds	r0, #1
 800594a:	d09d      	beq.n	8005888 <_printf_i+0x15c>
 800594c:	3501      	adds	r5, #1
 800594e:	68e3      	ldr	r3, [r4, #12]
 8005950:	9903      	ldr	r1, [sp, #12]
 8005952:	1a5b      	subs	r3, r3, r1
 8005954:	42ab      	cmp	r3, r5
 8005956:	dcf2      	bgt.n	800593e <_printf_i+0x212>
 8005958:	e7eb      	b.n	8005932 <_printf_i+0x206>
 800595a:	2500      	movs	r5, #0
 800595c:	f104 0619 	add.w	r6, r4, #25
 8005960:	e7f5      	b.n	800594e <_printf_i+0x222>
 8005962:	bf00      	nop
 8005964:	08005d45 	.word	0x08005d45
 8005968:	08005d56 	.word	0x08005d56

0800596c <__sflush_r>:
 800596c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005974:	0716      	lsls	r6, r2, #28
 8005976:	4605      	mov	r5, r0
 8005978:	460c      	mov	r4, r1
 800597a:	d454      	bmi.n	8005a26 <__sflush_r+0xba>
 800597c:	684b      	ldr	r3, [r1, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	dc02      	bgt.n	8005988 <__sflush_r+0x1c>
 8005982:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005984:	2b00      	cmp	r3, #0
 8005986:	dd48      	ble.n	8005a1a <__sflush_r+0xae>
 8005988:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800598a:	2e00      	cmp	r6, #0
 800598c:	d045      	beq.n	8005a1a <__sflush_r+0xae>
 800598e:	2300      	movs	r3, #0
 8005990:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005994:	682f      	ldr	r7, [r5, #0]
 8005996:	6a21      	ldr	r1, [r4, #32]
 8005998:	602b      	str	r3, [r5, #0]
 800599a:	d030      	beq.n	80059fe <__sflush_r+0x92>
 800599c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800599e:	89a3      	ldrh	r3, [r4, #12]
 80059a0:	0759      	lsls	r1, r3, #29
 80059a2:	d505      	bpl.n	80059b0 <__sflush_r+0x44>
 80059a4:	6863      	ldr	r3, [r4, #4]
 80059a6:	1ad2      	subs	r2, r2, r3
 80059a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80059aa:	b10b      	cbz	r3, 80059b0 <__sflush_r+0x44>
 80059ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80059ae:	1ad2      	subs	r2, r2, r3
 80059b0:	2300      	movs	r3, #0
 80059b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80059b4:	6a21      	ldr	r1, [r4, #32]
 80059b6:	4628      	mov	r0, r5
 80059b8:	47b0      	blx	r6
 80059ba:	1c43      	adds	r3, r0, #1
 80059bc:	89a3      	ldrh	r3, [r4, #12]
 80059be:	d106      	bne.n	80059ce <__sflush_r+0x62>
 80059c0:	6829      	ldr	r1, [r5, #0]
 80059c2:	291d      	cmp	r1, #29
 80059c4:	d82b      	bhi.n	8005a1e <__sflush_r+0xb2>
 80059c6:	4a2a      	ldr	r2, [pc, #168]	@ (8005a70 <__sflush_r+0x104>)
 80059c8:	410a      	asrs	r2, r1
 80059ca:	07d6      	lsls	r6, r2, #31
 80059cc:	d427      	bmi.n	8005a1e <__sflush_r+0xb2>
 80059ce:	2200      	movs	r2, #0
 80059d0:	6062      	str	r2, [r4, #4]
 80059d2:	04d9      	lsls	r1, r3, #19
 80059d4:	6922      	ldr	r2, [r4, #16]
 80059d6:	6022      	str	r2, [r4, #0]
 80059d8:	d504      	bpl.n	80059e4 <__sflush_r+0x78>
 80059da:	1c42      	adds	r2, r0, #1
 80059dc:	d101      	bne.n	80059e2 <__sflush_r+0x76>
 80059de:	682b      	ldr	r3, [r5, #0]
 80059e0:	b903      	cbnz	r3, 80059e4 <__sflush_r+0x78>
 80059e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80059e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059e6:	602f      	str	r7, [r5, #0]
 80059e8:	b1b9      	cbz	r1, 8005a1a <__sflush_r+0xae>
 80059ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059ee:	4299      	cmp	r1, r3
 80059f0:	d002      	beq.n	80059f8 <__sflush_r+0x8c>
 80059f2:	4628      	mov	r0, r5
 80059f4:	f7ff fbdc 	bl	80051b0 <_free_r>
 80059f8:	2300      	movs	r3, #0
 80059fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80059fc:	e00d      	b.n	8005a1a <__sflush_r+0xae>
 80059fe:	2301      	movs	r3, #1
 8005a00:	4628      	mov	r0, r5
 8005a02:	47b0      	blx	r6
 8005a04:	4602      	mov	r2, r0
 8005a06:	1c50      	adds	r0, r2, #1
 8005a08:	d1c9      	bne.n	800599e <__sflush_r+0x32>
 8005a0a:	682b      	ldr	r3, [r5, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d0c6      	beq.n	800599e <__sflush_r+0x32>
 8005a10:	2b1d      	cmp	r3, #29
 8005a12:	d001      	beq.n	8005a18 <__sflush_r+0xac>
 8005a14:	2b16      	cmp	r3, #22
 8005a16:	d11e      	bne.n	8005a56 <__sflush_r+0xea>
 8005a18:	602f      	str	r7, [r5, #0]
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	e022      	b.n	8005a64 <__sflush_r+0xf8>
 8005a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a22:	b21b      	sxth	r3, r3
 8005a24:	e01b      	b.n	8005a5e <__sflush_r+0xf2>
 8005a26:	690f      	ldr	r7, [r1, #16]
 8005a28:	2f00      	cmp	r7, #0
 8005a2a:	d0f6      	beq.n	8005a1a <__sflush_r+0xae>
 8005a2c:	0793      	lsls	r3, r2, #30
 8005a2e:	680e      	ldr	r6, [r1, #0]
 8005a30:	bf08      	it	eq
 8005a32:	694b      	ldreq	r3, [r1, #20]
 8005a34:	600f      	str	r7, [r1, #0]
 8005a36:	bf18      	it	ne
 8005a38:	2300      	movne	r3, #0
 8005a3a:	eba6 0807 	sub.w	r8, r6, r7
 8005a3e:	608b      	str	r3, [r1, #8]
 8005a40:	f1b8 0f00 	cmp.w	r8, #0
 8005a44:	dde9      	ble.n	8005a1a <__sflush_r+0xae>
 8005a46:	6a21      	ldr	r1, [r4, #32]
 8005a48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005a4a:	4643      	mov	r3, r8
 8005a4c:	463a      	mov	r2, r7
 8005a4e:	4628      	mov	r0, r5
 8005a50:	47b0      	blx	r6
 8005a52:	2800      	cmp	r0, #0
 8005a54:	dc08      	bgt.n	8005a68 <__sflush_r+0xfc>
 8005a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a5e:	81a3      	strh	r3, [r4, #12]
 8005a60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a68:	4407      	add	r7, r0
 8005a6a:	eba8 0800 	sub.w	r8, r8, r0
 8005a6e:	e7e7      	b.n	8005a40 <__sflush_r+0xd4>
 8005a70:	dfbffffe 	.word	0xdfbffffe

08005a74 <_fflush_r>:
 8005a74:	b538      	push	{r3, r4, r5, lr}
 8005a76:	690b      	ldr	r3, [r1, #16]
 8005a78:	4605      	mov	r5, r0
 8005a7a:	460c      	mov	r4, r1
 8005a7c:	b913      	cbnz	r3, 8005a84 <_fflush_r+0x10>
 8005a7e:	2500      	movs	r5, #0
 8005a80:	4628      	mov	r0, r5
 8005a82:	bd38      	pop	{r3, r4, r5, pc}
 8005a84:	b118      	cbz	r0, 8005a8e <_fflush_r+0x1a>
 8005a86:	6a03      	ldr	r3, [r0, #32]
 8005a88:	b90b      	cbnz	r3, 8005a8e <_fflush_r+0x1a>
 8005a8a:	f7ff f9e3 	bl	8004e54 <__sinit>
 8005a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0f3      	beq.n	8005a7e <_fflush_r+0xa>
 8005a96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005a98:	07d0      	lsls	r0, r2, #31
 8005a9a:	d404      	bmi.n	8005aa6 <_fflush_r+0x32>
 8005a9c:	0599      	lsls	r1, r3, #22
 8005a9e:	d402      	bmi.n	8005aa6 <_fflush_r+0x32>
 8005aa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005aa2:	f7ff fb6c 	bl	800517e <__retarget_lock_acquire_recursive>
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	f7ff ff5f 	bl	800596c <__sflush_r>
 8005aae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ab0:	07da      	lsls	r2, r3, #31
 8005ab2:	4605      	mov	r5, r0
 8005ab4:	d4e4      	bmi.n	8005a80 <_fflush_r+0xc>
 8005ab6:	89a3      	ldrh	r3, [r4, #12]
 8005ab8:	059b      	lsls	r3, r3, #22
 8005aba:	d4e1      	bmi.n	8005a80 <_fflush_r+0xc>
 8005abc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005abe:	f7ff fb5f 	bl	8005180 <__retarget_lock_release_recursive>
 8005ac2:	e7dd      	b.n	8005a80 <_fflush_r+0xc>

08005ac4 <__swhatbuf_r>:
 8005ac4:	b570      	push	{r4, r5, r6, lr}
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005acc:	2900      	cmp	r1, #0
 8005ace:	b096      	sub	sp, #88	@ 0x58
 8005ad0:	4615      	mov	r5, r2
 8005ad2:	461e      	mov	r6, r3
 8005ad4:	da0d      	bge.n	8005af2 <__swhatbuf_r+0x2e>
 8005ad6:	89a3      	ldrh	r3, [r4, #12]
 8005ad8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005adc:	f04f 0100 	mov.w	r1, #0
 8005ae0:	bf14      	ite	ne
 8005ae2:	2340      	movne	r3, #64	@ 0x40
 8005ae4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005ae8:	2000      	movs	r0, #0
 8005aea:	6031      	str	r1, [r6, #0]
 8005aec:	602b      	str	r3, [r5, #0]
 8005aee:	b016      	add	sp, #88	@ 0x58
 8005af0:	bd70      	pop	{r4, r5, r6, pc}
 8005af2:	466a      	mov	r2, sp
 8005af4:	f000 f862 	bl	8005bbc <_fstat_r>
 8005af8:	2800      	cmp	r0, #0
 8005afa:	dbec      	blt.n	8005ad6 <__swhatbuf_r+0x12>
 8005afc:	9901      	ldr	r1, [sp, #4]
 8005afe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b06:	4259      	negs	r1, r3
 8005b08:	4159      	adcs	r1, r3
 8005b0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b0e:	e7eb      	b.n	8005ae8 <__swhatbuf_r+0x24>

08005b10 <__smakebuf_r>:
 8005b10:	898b      	ldrh	r3, [r1, #12]
 8005b12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b14:	079d      	lsls	r5, r3, #30
 8005b16:	4606      	mov	r6, r0
 8005b18:	460c      	mov	r4, r1
 8005b1a:	d507      	bpl.n	8005b2c <__smakebuf_r+0x1c>
 8005b1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b20:	6023      	str	r3, [r4, #0]
 8005b22:	6123      	str	r3, [r4, #16]
 8005b24:	2301      	movs	r3, #1
 8005b26:	6163      	str	r3, [r4, #20]
 8005b28:	b003      	add	sp, #12
 8005b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b2c:	ab01      	add	r3, sp, #4
 8005b2e:	466a      	mov	r2, sp
 8005b30:	f7ff ffc8 	bl	8005ac4 <__swhatbuf_r>
 8005b34:	9f00      	ldr	r7, [sp, #0]
 8005b36:	4605      	mov	r5, r0
 8005b38:	4639      	mov	r1, r7
 8005b3a:	4630      	mov	r0, r6
 8005b3c:	f7ff fba4 	bl	8005288 <_malloc_r>
 8005b40:	b948      	cbnz	r0, 8005b56 <__smakebuf_r+0x46>
 8005b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b46:	059a      	lsls	r2, r3, #22
 8005b48:	d4ee      	bmi.n	8005b28 <__smakebuf_r+0x18>
 8005b4a:	f023 0303 	bic.w	r3, r3, #3
 8005b4e:	f043 0302 	orr.w	r3, r3, #2
 8005b52:	81a3      	strh	r3, [r4, #12]
 8005b54:	e7e2      	b.n	8005b1c <__smakebuf_r+0xc>
 8005b56:	89a3      	ldrh	r3, [r4, #12]
 8005b58:	6020      	str	r0, [r4, #0]
 8005b5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b5e:	81a3      	strh	r3, [r4, #12]
 8005b60:	9b01      	ldr	r3, [sp, #4]
 8005b62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005b66:	b15b      	cbz	r3, 8005b80 <__smakebuf_r+0x70>
 8005b68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	f000 f837 	bl	8005be0 <_isatty_r>
 8005b72:	b128      	cbz	r0, 8005b80 <__smakebuf_r+0x70>
 8005b74:	89a3      	ldrh	r3, [r4, #12]
 8005b76:	f023 0303 	bic.w	r3, r3, #3
 8005b7a:	f043 0301 	orr.w	r3, r3, #1
 8005b7e:	81a3      	strh	r3, [r4, #12]
 8005b80:	89a3      	ldrh	r3, [r4, #12]
 8005b82:	431d      	orrs	r5, r3
 8005b84:	81a5      	strh	r5, [r4, #12]
 8005b86:	e7cf      	b.n	8005b28 <__smakebuf_r+0x18>

08005b88 <memmove>:
 8005b88:	4288      	cmp	r0, r1
 8005b8a:	b510      	push	{r4, lr}
 8005b8c:	eb01 0402 	add.w	r4, r1, r2
 8005b90:	d902      	bls.n	8005b98 <memmove+0x10>
 8005b92:	4284      	cmp	r4, r0
 8005b94:	4623      	mov	r3, r4
 8005b96:	d807      	bhi.n	8005ba8 <memmove+0x20>
 8005b98:	1e43      	subs	r3, r0, #1
 8005b9a:	42a1      	cmp	r1, r4
 8005b9c:	d008      	beq.n	8005bb0 <memmove+0x28>
 8005b9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ba2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ba6:	e7f8      	b.n	8005b9a <memmove+0x12>
 8005ba8:	4402      	add	r2, r0
 8005baa:	4601      	mov	r1, r0
 8005bac:	428a      	cmp	r2, r1
 8005bae:	d100      	bne.n	8005bb2 <memmove+0x2a>
 8005bb0:	bd10      	pop	{r4, pc}
 8005bb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bba:	e7f7      	b.n	8005bac <memmove+0x24>

08005bbc <_fstat_r>:
 8005bbc:	b538      	push	{r3, r4, r5, lr}
 8005bbe:	4d07      	ldr	r5, [pc, #28]	@ (8005bdc <_fstat_r+0x20>)
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	4608      	mov	r0, r1
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	602b      	str	r3, [r5, #0]
 8005bca:	f7fb f9c6 	bl	8000f5a <_fstat>
 8005bce:	1c43      	adds	r3, r0, #1
 8005bd0:	d102      	bne.n	8005bd8 <_fstat_r+0x1c>
 8005bd2:	682b      	ldr	r3, [r5, #0]
 8005bd4:	b103      	cbz	r3, 8005bd8 <_fstat_r+0x1c>
 8005bd6:	6023      	str	r3, [r4, #0]
 8005bd8:	bd38      	pop	{r3, r4, r5, pc}
 8005bda:	bf00      	nop
 8005bdc:	200008f0 	.word	0x200008f0

08005be0 <_isatty_r>:
 8005be0:	b538      	push	{r3, r4, r5, lr}
 8005be2:	4d06      	ldr	r5, [pc, #24]	@ (8005bfc <_isatty_r+0x1c>)
 8005be4:	2300      	movs	r3, #0
 8005be6:	4604      	mov	r4, r0
 8005be8:	4608      	mov	r0, r1
 8005bea:	602b      	str	r3, [r5, #0]
 8005bec:	f7fb f9c5 	bl	8000f7a <_isatty>
 8005bf0:	1c43      	adds	r3, r0, #1
 8005bf2:	d102      	bne.n	8005bfa <_isatty_r+0x1a>
 8005bf4:	682b      	ldr	r3, [r5, #0]
 8005bf6:	b103      	cbz	r3, 8005bfa <_isatty_r+0x1a>
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	bd38      	pop	{r3, r4, r5, pc}
 8005bfc:	200008f0 	.word	0x200008f0

08005c00 <_sbrk_r>:
 8005c00:	b538      	push	{r3, r4, r5, lr}
 8005c02:	4d06      	ldr	r5, [pc, #24]	@ (8005c1c <_sbrk_r+0x1c>)
 8005c04:	2300      	movs	r3, #0
 8005c06:	4604      	mov	r4, r0
 8005c08:	4608      	mov	r0, r1
 8005c0a:	602b      	str	r3, [r5, #0]
 8005c0c:	f7fb f9ce 	bl	8000fac <_sbrk>
 8005c10:	1c43      	adds	r3, r0, #1
 8005c12:	d102      	bne.n	8005c1a <_sbrk_r+0x1a>
 8005c14:	682b      	ldr	r3, [r5, #0]
 8005c16:	b103      	cbz	r3, 8005c1a <_sbrk_r+0x1a>
 8005c18:	6023      	str	r3, [r4, #0]
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	200008f0 	.word	0x200008f0

08005c20 <_realloc_r>:
 8005c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c24:	4680      	mov	r8, r0
 8005c26:	4615      	mov	r5, r2
 8005c28:	460c      	mov	r4, r1
 8005c2a:	b921      	cbnz	r1, 8005c36 <_realloc_r+0x16>
 8005c2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c30:	4611      	mov	r1, r2
 8005c32:	f7ff bb29 	b.w	8005288 <_malloc_r>
 8005c36:	b92a      	cbnz	r2, 8005c44 <_realloc_r+0x24>
 8005c38:	f7ff faba 	bl	80051b0 <_free_r>
 8005c3c:	2400      	movs	r4, #0
 8005c3e:	4620      	mov	r0, r4
 8005c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c44:	f000 f81a 	bl	8005c7c <_malloc_usable_size_r>
 8005c48:	4285      	cmp	r5, r0
 8005c4a:	4606      	mov	r6, r0
 8005c4c:	d802      	bhi.n	8005c54 <_realloc_r+0x34>
 8005c4e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005c52:	d8f4      	bhi.n	8005c3e <_realloc_r+0x1e>
 8005c54:	4629      	mov	r1, r5
 8005c56:	4640      	mov	r0, r8
 8005c58:	f7ff fb16 	bl	8005288 <_malloc_r>
 8005c5c:	4607      	mov	r7, r0
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	d0ec      	beq.n	8005c3c <_realloc_r+0x1c>
 8005c62:	42b5      	cmp	r5, r6
 8005c64:	462a      	mov	r2, r5
 8005c66:	4621      	mov	r1, r4
 8005c68:	bf28      	it	cs
 8005c6a:	4632      	movcs	r2, r6
 8005c6c:	f7ff fa91 	bl	8005192 <memcpy>
 8005c70:	4621      	mov	r1, r4
 8005c72:	4640      	mov	r0, r8
 8005c74:	f7ff fa9c 	bl	80051b0 <_free_r>
 8005c78:	463c      	mov	r4, r7
 8005c7a:	e7e0      	b.n	8005c3e <_realloc_r+0x1e>

08005c7c <_malloc_usable_size_r>:
 8005c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c80:	1f18      	subs	r0, r3, #4
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	bfbc      	itt	lt
 8005c86:	580b      	ldrlt	r3, [r1, r0]
 8005c88:	18c0      	addlt	r0, r0, r3
 8005c8a:	4770      	bx	lr

08005c8c <_init>:
 8005c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8e:	bf00      	nop
 8005c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c92:	bc08      	pop	{r3}
 8005c94:	469e      	mov	lr, r3
 8005c96:	4770      	bx	lr

08005c98 <_fini>:
 8005c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9a:	bf00      	nop
 8005c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c9e:	bc08      	pop	{r3}
 8005ca0:	469e      	mov	lr, r3
 8005ca2:	4770      	bx	lr
