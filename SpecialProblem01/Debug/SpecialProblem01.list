
SpecialProblem01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c08  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003e00  08003e00  00004e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e40  08003e40  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e40  08003e40  00004e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e48  08003e48  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e48  08003e48  00004e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e4c  08003e4c  00004e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003e50  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000188d8  2000000c  08003e5c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200188e4  08003e5c  000058e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae3a  00000000  00000000  0000503a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c18  00000000  00000000  0000fe74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  00011a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000062e  00000000  00000000  000122b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ed8  00000000  00000000  000128de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b40f  00000000  00000000  000397b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0f10  00000000  00000000  00044bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135ad5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f60  00000000  00000000  00135b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00137a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003de8 	.word	0x08003de8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003de8 	.word	0x08003de8

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000258:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800025c:	f000 b96a 	b.w	8000534 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	460c      	mov	r4, r1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d14e      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000284:	4694      	mov	ip, r2
 8000286:	458c      	cmp	ip, r1
 8000288:	4686      	mov	lr, r0
 800028a:	fab2 f282 	clz	r2, r2
 800028e:	d962      	bls.n	8000356 <__udivmoddi4+0xde>
 8000290:	b14a      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000292:	f1c2 0320 	rsb	r3, r2, #32
 8000296:	4091      	lsls	r1, r2
 8000298:	fa20 f303 	lsr.w	r3, r0, r3
 800029c:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a0:	4319      	orrs	r1, r3
 80002a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002aa:	fa1f f68c 	uxth.w	r6, ip
 80002ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80002b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b6:	fb07 1114 	mls	r1, r7, r4, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb04 f106 	mul.w	r1, r4, r6
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002ce:	f080 8112 	bcs.w	80004f6 <__udivmoddi4+0x27e>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 810f 	bls.w	80004f6 <__udivmoddi4+0x27e>
 80002d8:	3c02      	subs	r4, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a59      	subs	r1, r3, r1
 80002de:	fa1f f38e 	uxth.w	r3, lr
 80002e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ee:	fb00 f606 	mul.w	r6, r0, r6
 80002f2:	429e      	cmp	r6, r3
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x94>
 80002f6:	eb1c 0303 	adds.w	r3, ip, r3
 80002fa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002fe:	f080 80fc 	bcs.w	80004fa <__udivmoddi4+0x282>
 8000302:	429e      	cmp	r6, r3
 8000304:	f240 80f9 	bls.w	80004fa <__udivmoddi4+0x282>
 8000308:	4463      	add	r3, ip
 800030a:	3802      	subs	r0, #2
 800030c:	1b9b      	subs	r3, r3, r6
 800030e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000312:	2100      	movs	r1, #0
 8000314:	b11d      	cbz	r5, 800031e <__udivmoddi4+0xa6>
 8000316:	40d3      	lsrs	r3, r2
 8000318:	2200      	movs	r2, #0
 800031a:	e9c5 3200 	strd	r3, r2, [r5]
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d905      	bls.n	8000332 <__udivmoddi4+0xba>
 8000326:	b10d      	cbz	r5, 800032c <__udivmoddi4+0xb4>
 8000328:	e9c5 0100 	strd	r0, r1, [r5]
 800032c:	2100      	movs	r1, #0
 800032e:	4608      	mov	r0, r1
 8000330:	e7f5      	b.n	800031e <__udivmoddi4+0xa6>
 8000332:	fab3 f183 	clz	r1, r3
 8000336:	2900      	cmp	r1, #0
 8000338:	d146      	bne.n	80003c8 <__udivmoddi4+0x150>
 800033a:	42a3      	cmp	r3, r4
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xcc>
 800033e:	4290      	cmp	r0, r2
 8000340:	f0c0 80f0 	bcc.w	8000524 <__udivmoddi4+0x2ac>
 8000344:	1a86      	subs	r6, r0, r2
 8000346:	eb64 0303 	sbc.w	r3, r4, r3
 800034a:	2001      	movs	r0, #1
 800034c:	2d00      	cmp	r5, #0
 800034e:	d0e6      	beq.n	800031e <__udivmoddi4+0xa6>
 8000350:	e9c5 6300 	strd	r6, r3, [r5]
 8000354:	e7e3      	b.n	800031e <__udivmoddi4+0xa6>
 8000356:	2a00      	cmp	r2, #0
 8000358:	f040 8090 	bne.w	800047c <__udivmoddi4+0x204>
 800035c:	eba1 040c 	sub.w	r4, r1, ip
 8000360:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000364:	fa1f f78c 	uxth.w	r7, ip
 8000368:	2101      	movs	r1, #1
 800036a:	fbb4 f6f8 	udiv	r6, r4, r8
 800036e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000372:	fb08 4416 	mls	r4, r8, r6, r4
 8000376:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037a:	fb07 f006 	mul.w	r0, r7, r6
 800037e:	4298      	cmp	r0, r3
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x11c>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x11a>
 800038c:	4298      	cmp	r0, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2b4>
 8000392:	4626      	mov	r6, r4
 8000394:	1a1c      	subs	r4, r3, r0
 8000396:	fa1f f38e 	uxth.w	r3, lr
 800039a:	fbb4 f0f8 	udiv	r0, r4, r8
 800039e:	fb08 4410 	mls	r4, r8, r0, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb00 f707 	mul.w	r7, r0, r7
 80003aa:	429f      	cmp	r7, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x148>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x146>
 80003b8:	429f      	cmp	r7, r3
 80003ba:	f200 80b0 	bhi.w	800051e <__udivmoddi4+0x2a6>
 80003be:	4620      	mov	r0, r4
 80003c0:	1bdb      	subs	r3, r3, r7
 80003c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003c6:	e7a5      	b.n	8000314 <__udivmoddi4+0x9c>
 80003c8:	f1c1 0620 	rsb	r6, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 f706 	lsr.w	r7, r2, r6
 80003d2:	431f      	orrs	r7, r3
 80003d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d8:	fa04 f301 	lsl.w	r3, r4, r1
 80003dc:	ea43 030c 	orr.w	r3, r3, ip
 80003e0:	40f4      	lsrs	r4, r6
 80003e2:	fa00 f801 	lsl.w	r8, r0, r1
 80003e6:	0c38      	lsrs	r0, r7, #16
 80003e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ec:	fbb4 fef0 	udiv	lr, r4, r0
 80003f0:	fa1f fc87 	uxth.w	ip, r7
 80003f4:	fb00 441e 	mls	r4, r0, lr, r4
 80003f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000400:	45a1      	cmp	r9, r4
 8000402:	fa02 f201 	lsl.w	r2, r2, r1
 8000406:	d90a      	bls.n	800041e <__udivmoddi4+0x1a6>
 8000408:	193c      	adds	r4, r7, r4
 800040a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800040e:	f080 8084 	bcs.w	800051a <__udivmoddi4+0x2a2>
 8000412:	45a1      	cmp	r9, r4
 8000414:	f240 8081 	bls.w	800051a <__udivmoddi4+0x2a2>
 8000418:	f1ae 0e02 	sub.w	lr, lr, #2
 800041c:	443c      	add	r4, r7
 800041e:	eba4 0409 	sub.w	r4, r4, r9
 8000422:	fa1f f983 	uxth.w	r9, r3
 8000426:	fbb4 f3f0 	udiv	r3, r4, r0
 800042a:	fb00 4413 	mls	r4, r0, r3, r4
 800042e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000432:	fb03 fc0c 	mul.w	ip, r3, ip
 8000436:	45a4      	cmp	ip, r4
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x1d2>
 800043a:	193c      	adds	r4, r7, r4
 800043c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000440:	d267      	bcs.n	8000512 <__udivmoddi4+0x29a>
 8000442:	45a4      	cmp	ip, r4
 8000444:	d965      	bls.n	8000512 <__udivmoddi4+0x29a>
 8000446:	3b02      	subs	r3, #2
 8000448:	443c      	add	r4, r7
 800044a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800044e:	fba0 9302 	umull	r9, r3, r0, r2
 8000452:	eba4 040c 	sub.w	r4, r4, ip
 8000456:	429c      	cmp	r4, r3
 8000458:	46ce      	mov	lr, r9
 800045a:	469c      	mov	ip, r3
 800045c:	d351      	bcc.n	8000502 <__udivmoddi4+0x28a>
 800045e:	d04e      	beq.n	80004fe <__udivmoddi4+0x286>
 8000460:	b155      	cbz	r5, 8000478 <__udivmoddi4+0x200>
 8000462:	ebb8 030e 	subs.w	r3, r8, lr
 8000466:	eb64 040c 	sbc.w	r4, r4, ip
 800046a:	fa04 f606 	lsl.w	r6, r4, r6
 800046e:	40cb      	lsrs	r3, r1
 8000470:	431e      	orrs	r6, r3
 8000472:	40cc      	lsrs	r4, r1
 8000474:	e9c5 6400 	strd	r6, r4, [r5]
 8000478:	2100      	movs	r1, #0
 800047a:	e750      	b.n	800031e <__udivmoddi4+0xa6>
 800047c:	f1c2 0320 	rsb	r3, r2, #32
 8000480:	fa20 f103 	lsr.w	r1, r0, r3
 8000484:	fa0c fc02 	lsl.w	ip, ip, r2
 8000488:	fa24 f303 	lsr.w	r3, r4, r3
 800048c:	4094      	lsls	r4, r2
 800048e:	430c      	orrs	r4, r1
 8000490:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000494:	fa00 fe02 	lsl.w	lr, r0, r2
 8000498:	fa1f f78c 	uxth.w	r7, ip
 800049c:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a0:	fb08 3110 	mls	r1, r8, r0, r3
 80004a4:	0c23      	lsrs	r3, r4, #16
 80004a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004aa:	fb00 f107 	mul.w	r1, r0, r7
 80004ae:	4299      	cmp	r1, r3
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x24c>
 80004b2:	eb1c 0303 	adds.w	r3, ip, r3
 80004b6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004ba:	d22c      	bcs.n	8000516 <__udivmoddi4+0x29e>
 80004bc:	4299      	cmp	r1, r3
 80004be:	d92a      	bls.n	8000516 <__udivmoddi4+0x29e>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	1a5b      	subs	r3, r3, r1
 80004c6:	b2a4      	uxth	r4, r4
 80004c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004cc:	fb08 3311 	mls	r3, r8, r1, r3
 80004d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d4:	fb01 f307 	mul.w	r3, r1, r7
 80004d8:	42a3      	cmp	r3, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x276>
 80004dc:	eb1c 0404 	adds.w	r4, ip, r4
 80004e0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004e4:	d213      	bcs.n	800050e <__udivmoddi4+0x296>
 80004e6:	42a3      	cmp	r3, r4
 80004e8:	d911      	bls.n	800050e <__udivmoddi4+0x296>
 80004ea:	3902      	subs	r1, #2
 80004ec:	4464      	add	r4, ip
 80004ee:	1ae4      	subs	r4, r4, r3
 80004f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004f4:	e739      	b.n	800036a <__udivmoddi4+0xf2>
 80004f6:	4604      	mov	r4, r0
 80004f8:	e6f0      	b.n	80002dc <__udivmoddi4+0x64>
 80004fa:	4608      	mov	r0, r1
 80004fc:	e706      	b.n	800030c <__udivmoddi4+0x94>
 80004fe:	45c8      	cmp	r8, r9
 8000500:	d2ae      	bcs.n	8000460 <__udivmoddi4+0x1e8>
 8000502:	ebb9 0e02 	subs.w	lr, r9, r2
 8000506:	eb63 0c07 	sbc.w	ip, r3, r7
 800050a:	3801      	subs	r0, #1
 800050c:	e7a8      	b.n	8000460 <__udivmoddi4+0x1e8>
 800050e:	4631      	mov	r1, r6
 8000510:	e7ed      	b.n	80004ee <__udivmoddi4+0x276>
 8000512:	4603      	mov	r3, r0
 8000514:	e799      	b.n	800044a <__udivmoddi4+0x1d2>
 8000516:	4630      	mov	r0, r6
 8000518:	e7d4      	b.n	80004c4 <__udivmoddi4+0x24c>
 800051a:	46d6      	mov	lr, sl
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1a6>
 800051e:	4463      	add	r3, ip
 8000520:	3802      	subs	r0, #2
 8000522:	e74d      	b.n	80003c0 <__udivmoddi4+0x148>
 8000524:	4606      	mov	r6, r0
 8000526:	4623      	mov	r3, r4
 8000528:	4608      	mov	r0, r1
 800052a:	e70f      	b.n	800034c <__udivmoddi4+0xd4>
 800052c:	3e02      	subs	r6, #2
 800052e:	4463      	add	r3, ip
 8000530:	e730      	b.n	8000394 <__udivmoddi4+0x11c>
 8000532:	bf00      	nop

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800053e:	4b09      	ldr	r3, [pc, #36]	@ (8000564 <MX_GPIO_Init+0x2c>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	4a08      	ldr	r2, [pc, #32]	@ (8000564 <MX_GPIO_Init+0x2c>)
 8000544:	f043 0308 	orr.w	r3, r3, #8
 8000548:	6313      	str	r3, [r2, #48]	@ 0x30
 800054a:	4b06      	ldr	r3, [pc, #24]	@ (8000564 <MX_GPIO_Init+0x2c>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	f003 0308 	and.w	r3, r3, #8
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

}
 8000556:	bf00      	nop
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40023800 	.word	0x40023800

08000568 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b08a      	sub	sp, #40	@ 0x28
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800056e:	f000 f99b 	bl	80008a8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fb80 	bl	8000c76 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f929 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f7ff ffdd 	bl	8000538 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057e:	f000 fa3f 	bl	8000a00 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000582:	f000 fa6d 	bl	8000a60 <MX_USART3_UART_Init>

  uint8_t greet[] = "Man from U.A.RT.1!\r\nQuit RESS q\r\n";
 8000586:	4b16      	ldr	r3, [pc, #88]	@ (80005e0 <main+0x78>)
 8000588:	1d3c      	adds	r4, r7, #4
 800058a:	461d      	mov	r5, r3
 800058c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000594:	682b      	ldr	r3, [r5, #0]
 8000596:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*) greet, strlen((char*) greet), 100);
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff fe4c 	bl	8000238 <strlen>
 80005a0:	4603      	mov	r3, r0
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	1d39      	adds	r1, r7, #4
 80005a6:	2364      	movs	r3, #100	@ 0x64
 80005a8:	480e      	ldr	r0, [pc, #56]	@ (80005e4 <main+0x7c>)
 80005aa:	f002 f8e3 	bl	8002774 <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart2, &c, 1);
 80005ae:	2201      	movs	r2, #1
 80005b0:	490d      	ldr	r1, [pc, #52]	@ (80005e8 <main+0x80>)
 80005b2:	480e      	ldr	r0, [pc, #56]	@ (80005ec <main+0x84>)
 80005b4:	f002 f967 	bl	8002886 <HAL_UART_Receive_IT>
  if(my_turn && !have_name){
 80005b8:	4b0d      	ldr	r3, [pc, #52]	@ (80005f0 <main+0x88>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d00c      	beq.n	80005da <main+0x72>
 80005c0:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <main+0x8c>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	f083 0301 	eor.w	r3, r3, #1
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d005      	beq.n	80005da <main+0x72>
	  HAL_UART_Receive_IT(&huart3, &c, 1);
 80005ce:	2201      	movs	r2, #1
 80005d0:	4905      	ldr	r1, [pc, #20]	@ (80005e8 <main+0x80>)
 80005d2:	4804      	ldr	r0, [pc, #16]	@ (80005e4 <main+0x7c>)
 80005d4:	f002 f957 	bl	8002886 <HAL_UART_Receive_IT>
  }
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d8:	bf00      	nop
 80005da:	bf00      	nop
 80005dc:	e7fd      	b.n	80005da <main+0x72>
 80005de:	bf00      	nop
 80005e0:	08003e00 	.word	0x08003e00
 80005e4:	20018858 	.word	0x20018858
 80005e8:	200186ca 	.word	0x200186ca
 80005ec:	200187d0 	.word	0x200187d0
 80005f0:	200186cb 	.word	0x200186cb
 80005f4:	200186cc 	.word	0x200186cc

080005f8 <HAL_UART_RxCpltCallback>:
  * @brief System Clock Configuration
  * @retval None
  */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3 && my_turn){
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a64      	ldr	r2, [pc, #400]	@ (8000798 <HAL_UART_RxCpltCallback+0x1a0>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d176      	bne.n	80006f8 <HAL_UART_RxCpltCallback+0x100>
 800060a:	4b64      	ldr	r3, [pc, #400]	@ (800079c <HAL_UART_RxCpltCallback+0x1a4>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d072      	beq.n	80006f8 <HAL_UART_RxCpltCallback+0x100>
		if(!have_name){
 8000612:	4b63      	ldr	r3, [pc, #396]	@ (80007a0 <HAL_UART_RxCpltCallback+0x1a8>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	f083 0301 	eor.w	r3, r3, #1
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	d00a      	beq.n	8000636 <HAL_UART_RxCpltCallback+0x3e>
			username[name_idx++] = c;
 8000620:	4b60      	ldr	r3, [pc, #384]	@ (80007a4 <HAL_UART_RxCpltCallback+0x1ac>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	b2d1      	uxtb	r1, r2
 8000628:	4a5e      	ldr	r2, [pc, #376]	@ (80007a4 <HAL_UART_RxCpltCallback+0x1ac>)
 800062a:	7011      	strb	r1, [r2, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b5e      	ldr	r3, [pc, #376]	@ (80007a8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000630:	7819      	ldrb	r1, [r3, #0]
 8000632:	4b5e      	ldr	r3, [pc, #376]	@ (80007ac <HAL_UART_RxCpltCallback+0x1b4>)
 8000634:	5499      	strb	r1, [r3, r2]
		}
		if(c == '\r'){
 8000636:	4b5c      	ldr	r3, [pc, #368]	@ (80007a8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b0d      	cmp	r3, #13
 800063c:	d147      	bne.n	80006ce <HAL_UART_RxCpltCallback+0xd6>
			if(!have_name){
 800063e:	4b58      	ldr	r3, [pc, #352]	@ (80007a0 <HAL_UART_RxCpltCallback+0x1a8>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	f083 0301 	eor.w	r3, r3, #1
 8000646:	b2db      	uxtb	r3, r3
 8000648:	2b00      	cmp	r3, #0
 800064a:	d016      	beq.n	800067a <HAL_UART_RxCpltCallback+0x82>
//				char cr = '\r';  // Store '\r' in a variable
//				username[name_idx - 1] = '\0';
//			    HAL_UART_Transmit(&huart2, "E", 1, 100);
			    HAL_UART_Transmit(&huart2, (uint8_t*)username, strlen(username), 100);
 800064c:	4857      	ldr	r0, [pc, #348]	@ (80007ac <HAL_UART_RxCpltCallback+0x1b4>)
 800064e:	f7ff fdf3 	bl	8000238 <strlen>
 8000652:	4603      	mov	r3, r0
 8000654:	b29a      	uxth	r2, r3
 8000656:	2364      	movs	r3, #100	@ 0x64
 8000658:	4954      	ldr	r1, [pc, #336]	@ (80007ac <HAL_UART_RxCpltCallback+0x1b4>)
 800065a:	4855      	ldr	r0, [pc, #340]	@ (80007b0 <HAL_UART_RxCpltCallback+0x1b8>)
 800065c:	f002 f88a 	bl	8002774 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, "\r", 1, 100);
 8000660:	2364      	movs	r3, #100	@ 0x64
 8000662:	2201      	movs	r2, #1
 8000664:	4953      	ldr	r1, [pc, #332]	@ (80007b4 <HAL_UART_RxCpltCallback+0x1bc>)
 8000666:	4852      	ldr	r0, [pc, #328]	@ (80007b0 <HAL_UART_RxCpltCallback+0x1b8>)
 8000668:	f002 f884 	bl	8002774 <HAL_UART_Transmit>
//				HAL_UART_Transmit(&huart2, (uint8_t*)username, strlen, 100);
//				HAL_UART_Transmit(&huart2, (uint8_t*)username, strlen(username), 100);
				my_turn = 0;
 800066c:	4b4b      	ldr	r3, [pc, #300]	@ (800079c <HAL_UART_RxCpltCallback+0x1a4>)
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
				have_name = 1;
 8000672:	4b4b      	ldr	r3, [pc, #300]	@ (80007a0 <HAL_UART_RxCpltCallback+0x1a8>)
 8000674:	2201      	movs	r2, #1
 8000676:	701a      	strb	r2, [r3, #0]
 8000678:	e038      	b.n	80006ec <HAL_UART_RxCpltCallback+0xf4>
			} else {
				buffer[idx] = '\0';
 800067a:	4b4f      	ldr	r3, [pc, #316]	@ (80007b8 <HAL_UART_RxCpltCallback+0x1c0>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	461a      	mov	r2, r3
 8000680:	4b4e      	ldr	r3, [pc, #312]	@ (80007bc <HAL_UART_RxCpltCallback+0x1c4>)
 8000682:	2100      	movs	r1, #0
 8000684:	5499      	strb	r1, [r3, r2]
				HAL_UART_Transmit(&huart3, buffer + start_of_text, strlen((char *)(buffer + start_of_text)), 100);
 8000686:	4b4e      	ldr	r3, [pc, #312]	@ (80007c0 <HAL_UART_RxCpltCallback+0x1c8>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	461a      	mov	r2, r3
 800068c:	4b4b      	ldr	r3, [pc, #300]	@ (80007bc <HAL_UART_RxCpltCallback+0x1c4>)
 800068e:	18d4      	adds	r4, r2, r3
 8000690:	4b4b      	ldr	r3, [pc, #300]	@ (80007c0 <HAL_UART_RxCpltCallback+0x1c8>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	461a      	mov	r2, r3
 8000696:	4b49      	ldr	r3, [pc, #292]	@ (80007bc <HAL_UART_RxCpltCallback+0x1c4>)
 8000698:	4413      	add	r3, r2
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff fdcc 	bl	8000238 <strlen>
 80006a0:	4603      	mov	r3, r0
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	2364      	movs	r3, #100	@ 0x64
 80006a6:	4621      	mov	r1, r4
 80006a8:	4846      	ldr	r0, [pc, #280]	@ (80007c4 <HAL_UART_RxCpltCallback+0x1cc>)
 80006aa:	f002 f863 	bl	8002774 <HAL_UART_Transmit>
				start_of_text = idx + 1;
 80006ae:	4b42      	ldr	r3, [pc, #264]	@ (80007b8 <HAL_UART_RxCpltCallback+0x1c0>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	3301      	adds	r3, #1
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4b42      	ldr	r3, [pc, #264]	@ (80007c0 <HAL_UART_RxCpltCallback+0x1c8>)
 80006b8:	701a      	strb	r2, [r3, #0]
				idx++;
 80006ba:	4b3f      	ldr	r3, [pc, #252]	@ (80007b8 <HAL_UART_RxCpltCallback+0x1c0>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b3d      	ldr	r3, [pc, #244]	@ (80007b8 <HAL_UART_RxCpltCallback+0x1c0>)
 80006c4:	701a      	strb	r2, [r3, #0]
				my_turn = 0;
 80006c6:	4b35      	ldr	r3, [pc, #212]	@ (800079c <HAL_UART_RxCpltCallback+0x1a4>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	e00e      	b.n	80006ec <HAL_UART_RxCpltCallback+0xf4>
			}
		} else if(have_name) {
 80006ce:	4b34      	ldr	r3, [pc, #208]	@ (80007a0 <HAL_UART_RxCpltCallback+0x1a8>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d00a      	beq.n	80006ec <HAL_UART_RxCpltCallback+0xf4>
			 buffer[idx++] = c;
 80006d6:	4b38      	ldr	r3, [pc, #224]	@ (80007b8 <HAL_UART_RxCpltCallback+0x1c0>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	1c5a      	adds	r2, r3, #1
 80006dc:	b2d1      	uxtb	r1, r2
 80006de:	4a36      	ldr	r2, [pc, #216]	@ (80007b8 <HAL_UART_RxCpltCallback+0x1c0>)
 80006e0:	7011      	strb	r1, [r2, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b30      	ldr	r3, [pc, #192]	@ (80007a8 <HAL_UART_RxCpltCallback+0x1b0>)
 80006e6:	7819      	ldrb	r1, [r3, #0]
 80006e8:	4b34      	ldr	r3, [pc, #208]	@ (80007bc <HAL_UART_RxCpltCallback+0x1c4>)
 80006ea:	5499      	strb	r1, [r3, r2]
		}

		HAL_UART_Transmit(&huart3, (uint8_t*) &c, 1, 100);
 80006ec:	2364      	movs	r3, #100	@ 0x64
 80006ee:	2201      	movs	r2, #1
 80006f0:	492d      	ldr	r1, [pc, #180]	@ (80007a8 <HAL_UART_RxCpltCallback+0x1b0>)
 80006f2:	4834      	ldr	r0, [pc, #208]	@ (80007c4 <HAL_UART_RxCpltCallback+0x1cc>)
 80006f4:	f002 f83e 	bl	8002774 <HAL_UART_Transmit>
	}

    if (huart->Instance == USART2 && !my_turn){
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a32      	ldr	r2, [pc, #200]	@ (80007c8 <HAL_UART_RxCpltCallback+0x1d0>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d13c      	bne.n	800077c <HAL_UART_RxCpltCallback+0x184>
 8000702:	4b26      	ldr	r3, [pc, #152]	@ (800079c <HAL_UART_RxCpltCallback+0x1a4>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d138      	bne.n	800077c <HAL_UART_RxCpltCallback+0x184>
        if(c == '\r'){
 800070a:	4b27      	ldr	r3, [pc, #156]	@ (80007a8 <HAL_UART_RxCpltCallback+0x1b0>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b0d      	cmp	r3, #13
 8000710:	d129      	bne.n	8000766 <HAL_UART_RxCpltCallback+0x16e>
            buffer[idx] = '\0';
 8000712:	4b29      	ldr	r3, [pc, #164]	@ (80007b8 <HAL_UART_RxCpltCallback+0x1c0>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	4b28      	ldr	r3, [pc, #160]	@ (80007bc <HAL_UART_RxCpltCallback+0x1c4>)
 800071a:	2100      	movs	r1, #0
 800071c:	5499      	strb	r1, [r3, r2]
            HAL_UART_Transmit(&huart3, buffer + start_of_text, strlen((char *)(buffer + start_of_text)), 100);
 800071e:	4b28      	ldr	r3, [pc, #160]	@ (80007c0 <HAL_UART_RxCpltCallback+0x1c8>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	461a      	mov	r2, r3
 8000724:	4b25      	ldr	r3, [pc, #148]	@ (80007bc <HAL_UART_RxCpltCallback+0x1c4>)
 8000726:	18d4      	adds	r4, r2, r3
 8000728:	4b25      	ldr	r3, [pc, #148]	@ (80007c0 <HAL_UART_RxCpltCallback+0x1c8>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	461a      	mov	r2, r3
 800072e:	4b23      	ldr	r3, [pc, #140]	@ (80007bc <HAL_UART_RxCpltCallback+0x1c4>)
 8000730:	4413      	add	r3, r2
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff fd80 	bl	8000238 <strlen>
 8000738:	4603      	mov	r3, r0
 800073a:	b29a      	uxth	r2, r3
 800073c:	2364      	movs	r3, #100	@ 0x64
 800073e:	4621      	mov	r1, r4
 8000740:	4820      	ldr	r0, [pc, #128]	@ (80007c4 <HAL_UART_RxCpltCallback+0x1cc>)
 8000742:	f002 f817 	bl	8002774 <HAL_UART_Transmit>
            start_of_text = idx + 1;
 8000746:	4b1c      	ldr	r3, [pc, #112]	@ (80007b8 <HAL_UART_RxCpltCallback+0x1c0>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	3301      	adds	r3, #1
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <HAL_UART_RxCpltCallback+0x1c8>)
 8000750:	701a      	strb	r2, [r3, #0]
            idx++;
 8000752:	4b19      	ldr	r3, [pc, #100]	@ (80007b8 <HAL_UART_RxCpltCallback+0x1c0>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <HAL_UART_RxCpltCallback+0x1c0>)
 800075c:	701a      	strb	r2, [r3, #0]
            my_turn = 1;
 800075e:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <HAL_UART_RxCpltCallback+0x1a4>)
 8000760:	2201      	movs	r2, #1
 8000762:	701a      	strb	r2, [r3, #0]
 8000764:	e00a      	b.n	800077c <HAL_UART_RxCpltCallback+0x184>
        } else {
            buffer[idx++] = c;
 8000766:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <HAL_UART_RxCpltCallback+0x1c0>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	1c5a      	adds	r2, r3, #1
 800076c:	b2d1      	uxtb	r1, r2
 800076e:	4a12      	ldr	r2, [pc, #72]	@ (80007b8 <HAL_UART_RxCpltCallback+0x1c0>)
 8000770:	7011      	strb	r1, [r2, #0]
 8000772:	461a      	mov	r2, r3
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000776:	7819      	ldrb	r1, [r3, #0]
 8000778:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <HAL_UART_RxCpltCallback+0x1c4>)
 800077a:	5499      	strb	r1, [r3, r2]
        }
    }
	HAL_UART_Receive_IT(&huart2, &c, 1);
 800077c:	2201      	movs	r2, #1
 800077e:	490a      	ldr	r1, [pc, #40]	@ (80007a8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000780:	480b      	ldr	r0, [pc, #44]	@ (80007b0 <HAL_UART_RxCpltCallback+0x1b8>)
 8000782:	f002 f880 	bl	8002886 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, &c, 1);
 8000786:	2201      	movs	r2, #1
 8000788:	4907      	ldr	r1, [pc, #28]	@ (80007a8 <HAL_UART_RxCpltCallback+0x1b0>)
 800078a:	480e      	ldr	r0, [pc, #56]	@ (80007c4 <HAL_UART_RxCpltCallback+0x1cc>)
 800078c:	f002 f87b 	bl	8002886 <HAL_UART_Receive_IT>
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bd90      	pop	{r4, r7, pc}
 8000798:	40004800 	.word	0x40004800
 800079c:	200186cb 	.word	0x200186cb
 80007a0:	200186cc 	.word	0x200186cc
 80007a4:	200186cd 	.word	0x200186cd
 80007a8:	200186ca 	.word	0x200186ca
 80007ac:	200186d0 	.word	0x200186d0
 80007b0:	200187d0 	.word	0x200187d0
 80007b4:	08003e24 	.word	0x08003e24
 80007b8:	200186c8 	.word	0x200186c8
 80007bc:	20000028 	.word	0x20000028
 80007c0:	200186c9 	.word	0x200186c9
 80007c4:	20018858 	.word	0x20018858
 80007c8:	40004400 	.word	0x40004400

080007cc <SystemClock_Config>:

void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b094      	sub	sp, #80	@ 0x50
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	2234      	movs	r2, #52	@ 0x34
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f003 fad8 	bl	8003d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f0:	4b2b      	ldr	r3, [pc, #172]	@ (80008a0 <SystemClock_Config+0xd4>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f4:	4a2a      	ldr	r2, [pc, #168]	@ (80008a0 <SystemClock_Config+0xd4>)
 80007f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80007fc:	4b28      	ldr	r3, [pc, #160]	@ (80008a0 <SystemClock_Config+0xd4>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000808:	4b26      	ldr	r3, [pc, #152]	@ (80008a4 <SystemClock_Config+0xd8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a25      	ldr	r2, [pc, #148]	@ (80008a4 <SystemClock_Config+0xd8>)
 800080e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000812:	6013      	str	r3, [r2, #0]
 8000814:	4b23      	ldr	r3, [pc, #140]	@ (80008a4 <SystemClock_Config+0xd8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000820:	2302      	movs	r3, #2
 8000822:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000824:	2301      	movs	r3, #1
 8000826:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000828:	2310      	movs	r3, #16
 800082a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082c:	2302      	movs	r3, #2
 800082e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000830:	2300      	movs	r3, #0
 8000832:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000834:	2308      	movs	r3, #8
 8000836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000838:	23d8      	movs	r3, #216	@ 0xd8
 800083a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800083c:	2302      	movs	r3, #2
 800083e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000840:	2302      	movs	r3, #2
 8000842:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000844:	2302      	movs	r3, #2
 8000846:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4618      	mov	r0, r3
 800084e:	f000 fe87 	bl	8001560 <HAL_RCC_OscConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000858:	f000 f852 	bl	8000900 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800085c:	f000 fe30 	bl	80014c0 <HAL_PWREx_EnableOverDrive>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000866:	f000 f84b 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	230f      	movs	r3, #15
 800086c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086e:	2302      	movs	r3, #2
 8000870:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000876:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800087a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800087c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000880:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	2107      	movs	r1, #7
 8000888:	4618      	mov	r0, r3
 800088a:	f001 f917 	bl	8001abc <HAL_RCC_ClockConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000894:	f000 f834 	bl	8000900 <Error_Handler>
  }
}
 8000898:	bf00      	nop
 800089a:	3750      	adds	r7, #80	@ 0x50
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40007000 	.word	0x40007000

080008a8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008ae:	463b      	mov	r3, r7
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008ba:	f000 fb4b 	bl	8000f54 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008be:	2301      	movs	r3, #1
 80008c0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008ca:	231f      	movs	r3, #31
 80008cc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008ce:	2387      	movs	r3, #135	@ 0x87
 80008d0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008d6:	2300      	movs	r3, #0
 80008d8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008da:	2301      	movs	r3, #1
 80008dc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008de:	2301      	movs	r3, #1
 80008e0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008ea:	463b      	mov	r3, r7
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fb69 	bl	8000fc4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008f2:	2004      	movs	r0, #4
 80008f4:	f000 fb46 	bl	8000f84 <HAL_MPU_Enable>

}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <Error_Handler+0x8>

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <HAL_MspInit+0x44>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000916:	4a0e      	ldr	r2, [pc, #56]	@ (8000950 <HAL_MspInit+0x44>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800091c:	6413      	str	r3, [r2, #64]	@ 0x40
 800091e:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <HAL_MspInit+0x44>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <HAL_MspInit+0x44>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092e:	4a08      	ldr	r2, [pc, #32]	@ (8000950 <HAL_MspInit+0x44>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000934:	6453      	str	r3, [r2, #68]	@ 0x44
 8000936:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <HAL_MspInit+0x44>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <NMI_Handler+0x4>

0800095c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <HardFault_Handler+0x4>

08000964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <MemManage_Handler+0x4>

0800096c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <BusFault_Handler+0x4>

08000974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <UsageFault_Handler+0x4>

0800097c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009aa:	f000 f9a1 	bl	8000cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009b8:	4802      	ldr	r0, [pc, #8]	@ (80009c4 <USART2_IRQHandler+0x10>)
 80009ba:	f001 ffa9 	bl	8002910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200187d0 	.word	0x200187d0

080009c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009cc:	4802      	ldr	r0, [pc, #8]	@ (80009d8 <USART3_IRQHandler+0x10>)
 80009ce:	f001 ff9f 	bl	8002910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20018858 	.word	0x20018858

080009dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <SystemInit+0x20>)
 80009e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009e6:	4a05      	ldr	r2, [pc, #20]	@ (80009fc <SystemInit+0x20>)
 80009e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a04:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a06:	4a15      	ldr	r2, [pc, #84]	@ (8000a5c <MX_USART2_UART_Init+0x5c>)
 8000a08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a44:	f001 fe48 	bl	80026d8 <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a4e:	f7ff ff57 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200187d0 	.word	0x200187d0
 8000a5c:	40004400 	.word	0x40004400

08000a60 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a64:	4b14      	ldr	r3, [pc, #80]	@ (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a66:	4a15      	ldr	r2, [pc, #84]	@ (8000abc <MX_USART3_UART_Init+0x5c>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000aa4:	f001 fe18 	bl	80026d8 <HAL_UART_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000aae:	f7ff ff27 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20018858 	.word	0x20018858
 8000abc:	40004800 	.word	0x40004800

08000ac0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b0b0      	sub	sp, #192	@ 0xc0
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	2290      	movs	r2, #144	@ 0x90
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f003 f955 	bl	8003d90 <memset>
  if(uartHandle->Instance==USART2)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a4a      	ldr	r2, [pc, #296]	@ (8000c14 <HAL_UART_MspInit+0x154>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d143      	bne.n	8000b78 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000af0:	2380      	movs	r3, #128	@ 0x80
 8000af2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 f9c3 	bl	8001e88 <HAL_RCCEx_PeriphCLKConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b08:	f7ff fefa 	bl	8000900 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b0c:	4b42      	ldr	r3, [pc, #264]	@ (8000c18 <HAL_UART_MspInit+0x158>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b10:	4a41      	ldr	r2, [pc, #260]	@ (8000c18 <HAL_UART_MspInit+0x158>)
 8000b12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b18:	4b3f      	ldr	r3, [pc, #252]	@ (8000c18 <HAL_UART_MspInit+0x158>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b20:	61bb      	str	r3, [r7, #24]
 8000b22:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b24:	4b3c      	ldr	r3, [pc, #240]	@ (8000c18 <HAL_UART_MspInit+0x158>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b28:	4a3b      	ldr	r2, [pc, #236]	@ (8000c18 <HAL_UART_MspInit+0x158>)
 8000b2a:	f043 0308 	orr.w	r3, r3, #8
 8000b2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b30:	4b39      	ldr	r3, [pc, #228]	@ (8000c18 <HAL_UART_MspInit+0x158>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b34:	f003 0308 	and.w	r3, r3, #8
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000b3c:	2360      	movs	r3, #96	@ 0x60
 8000b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b54:	2307      	movs	r3, #7
 8000b56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b5a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000b5e:	4619      	mov	r1, r3
 8000b60:	482e      	ldr	r0, [pc, #184]	@ (8000c1c <HAL_UART_MspInit+0x15c>)
 8000b62:	f000 fb01 	bl	8001168 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2026      	movs	r0, #38	@ 0x26
 8000b6c:	f000 f9bb 	bl	8000ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b70:	2026      	movs	r0, #38	@ 0x26
 8000b72:	f000 f9d4 	bl	8000f1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b76:	e049      	b.n	8000c0c <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART3)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a28      	ldr	r2, [pc, #160]	@ (8000c20 <HAL_UART_MspInit+0x160>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d144      	bne.n	8000c0c <HAL_UART_MspInit+0x14c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b86:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	4618      	mov	r0, r3
 8000b92:	f001 f979 	bl	8001e88 <HAL_RCCEx_PeriphCLKConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8000b9c:	f7ff feb0 	bl	8000900 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <HAL_UART_MspInit+0x158>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8000c18 <HAL_UART_MspInit+0x158>)
 8000ba6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000baa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bac:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <HAL_UART_MspInit+0x158>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb8:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <HAL_UART_MspInit+0x158>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbc:	4a16      	ldr	r2, [pc, #88]	@ (8000c18 <HAL_UART_MspInit+0x158>)
 8000bbe:	f043 0308 	orr.w	r3, r3, #8
 8000bc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc4:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <HAL_UART_MspInit+0x158>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc8:	f003 0308 	and.w	r3, r3, #8
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bd0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	2303      	movs	r3, #3
 8000be6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bea:	2307      	movs	r3, #7
 8000bec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4809      	ldr	r0, [pc, #36]	@ (8000c1c <HAL_UART_MspInit+0x15c>)
 8000bf8:	f000 fab6 	bl	8001168 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2027      	movs	r0, #39	@ 0x27
 8000c02:	f000 f970 	bl	8000ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c06:	2027      	movs	r0, #39	@ 0x27
 8000c08:	f000 f989 	bl	8000f1e <HAL_NVIC_EnableIRQ>
}
 8000c0c:	bf00      	nop
 8000c0e:	37c0      	adds	r7, #192	@ 0xc0
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40004400 	.word	0x40004400
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020c00 	.word	0x40020c00
 8000c20:	40004800 	.word	0x40004800

08000c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c28:	f7ff fed8 	bl	80009dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c2c:	480c      	ldr	r0, [pc, #48]	@ (8000c60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c2e:	490d      	ldr	r1, [pc, #52]	@ (8000c64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c30:	4a0d      	ldr	r2, [pc, #52]	@ (8000c68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c44:	4c0a      	ldr	r4, [pc, #40]	@ (8000c70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c52:	f003 f8a5 	bl	8003da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c56:	f7ff fc87 	bl	8000568 <main>
  bx  lr    
 8000c5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c5c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c68:	08003e50 	.word	0x08003e50
  ldr r2, =_sbss
 8000c6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c70:	200188e4 	.word	0x200188e4

08000c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC_IRQHandler>

08000c76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7a:	2003      	movs	r0, #3
 8000c7c:	f000 f928 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c80:	200f      	movs	r0, #15
 8000c82:	f000 f805 	bl	8000c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c86:	f7ff fe41 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c98:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <HAL_InitTick+0x54>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <HAL_InitTick+0x58>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f943 	bl	8000f3a <HAL_SYSTICK_Config>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00e      	b.n	8000cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d80a      	bhi.n	8000cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ccc:	f000 f90b 	bl	8000ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd0:	4a06      	ldr	r2, [pc, #24]	@ (8000cec <HAL_InitTick+0x5c>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e000      	b.n	8000cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000004 	.word	0x20000004

08000cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_IncTick+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <HAL_IncTick+0x24>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a04      	ldr	r2, [pc, #16]	@ (8000d14 <HAL_IncTick+0x24>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008
 8000d14:	200188e0 	.word	0x200188e0

08000d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	@ (8000d2c <HAL_GetTick+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	200188e0 	.word	0x200188e0

08000d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d40:	4b0b      	ldr	r3, [pc, #44]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x40>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x40>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00
 8000d74:	05fa0000 	.word	0x05fa0000

08000d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d7c:	4b04      	ldr	r3, [pc, #16]	@ (8000d90 <__NVIC_GetPriorityGrouping+0x18>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	f003 0307 	and.w	r3, r3, #7
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db0b      	blt.n	8000dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f003 021f 	and.w	r2, r3, #31
 8000dac:	4907      	ldr	r1, [pc, #28]	@ (8000dcc <__NVIC_EnableIRQ+0x38>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	2001      	movs	r0, #1
 8000db6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e100 	.word	0xe000e100

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	@ (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	@ (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	@ 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	@ 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000eb0:	f7ff ff8e 	bl	8000dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff29 	bl	8000d30 <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff3e 	bl	8000d78 <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff8e 	bl	8000e24 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5d 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff31 	bl	8000d94 <__NVIC_EnableIRQ>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffa2 	bl	8000e8c <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000f58:	f3bf 8f5f 	dmb	sy
}
 8000f5c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <HAL_MPU_Disable+0x28>)
 8000f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f62:	4a06      	ldr	r2, [pc, #24]	@ (8000f7c <HAL_MPU_Disable+0x28>)
 8000f64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f68:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000f6a:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <HAL_MPU_Disable+0x2c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	605a      	str	r2, [r3, #4]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00
 8000f80:	e000ed90 	.word	0xe000ed90

08000f84 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000f8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000fbc <HAL_MPU_Enable+0x38>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000f96:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <HAL_MPU_Enable+0x3c>)
 8000f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f9a:	4a09      	ldr	r2, [pc, #36]	@ (8000fc0 <HAL_MPU_Enable+0x3c>)
 8000f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fa0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa2:	f3bf 8f4f 	dsb	sy
}
 8000fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
}
 8000fac:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000ed90 	.word	0xe000ed90
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	785a      	ldrb	r2, [r3, #1]
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001040 <HAL_MPU_ConfigRegion+0x7c>)
 8000fd2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <HAL_MPU_ConfigRegion+0x7c>)
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	4a19      	ldr	r2, [pc, #100]	@ (8001040 <HAL_MPU_ConfigRegion+0x7c>)
 8000fda:	f023 0301 	bic.w	r3, r3, #1
 8000fde:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000fe0:	4a17      	ldr	r2, [pc, #92]	@ (8001040 <HAL_MPU_ConfigRegion+0x7c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7b1b      	ldrb	r3, [r3, #12]
 8000fec:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	7adb      	ldrb	r3, [r3, #11]
 8000ff2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ff4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	7a9b      	ldrb	r3, [r3, #10]
 8000ffa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000ffc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	7b5b      	ldrb	r3, [r3, #13]
 8001002:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001004:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7b9b      	ldrb	r3, [r3, #14]
 800100a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800100c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7bdb      	ldrb	r3, [r3, #15]
 8001012:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001014:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	7a5b      	ldrb	r3, [r3, #9]
 800101a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800101c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	7a1b      	ldrb	r3, [r3, #8]
 8001022:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001024:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	7812      	ldrb	r2, [r2, #0]
 800102a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800102c:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800102e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001030:	6113      	str	r3, [r2, #16]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000ed90 	.word	0xe000ed90

08001044 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001050:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001052:	f7ff fe61 	bl	8000d18 <HAL_GetTick>
 8001056:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d008      	beq.n	8001076 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2280      	movs	r2, #128	@ 0x80
 8001068:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e052      	b.n	800111c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0216 	bic.w	r2, r2, #22
 8001084:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	695a      	ldr	r2, [r3, #20]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001094:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	2b00      	cmp	r3, #0
 800109c:	d103      	bne.n	80010a6 <HAL_DMA_Abort+0x62>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d007      	beq.n	80010b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0208 	bic.w	r2, r2, #8
 80010b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 0201 	bic.w	r2, r2, #1
 80010c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010c6:	e013      	b.n	80010f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010c8:	f7ff fe26 	bl	8000d18 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b05      	cmp	r3, #5
 80010d4:	d90c      	bls.n	80010f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2220      	movs	r2, #32
 80010da:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2203      	movs	r2, #3
 80010e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e015      	b.n	800111c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1e4      	bne.n	80010c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001102:	223f      	movs	r2, #63	@ 0x3f
 8001104:	409a      	lsls	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d004      	beq.n	8001142 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2280      	movs	r2, #128	@ 0x80
 800113c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e00c      	b.n	800115c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2205      	movs	r2, #5
 8001146:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f022 0201 	bic.w	r2, r2, #1
 8001158:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800115a:	2300      	movs	r3, #0
}
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	@ 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	e175      	b.n	8001474 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	f040 8164 	bne.w	800146e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d005      	beq.n	80011be <HAL_GPIO_Init+0x56>
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d130      	bne.n	8001220 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f4:	2201      	movs	r2, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	091b      	lsrs	r3, r3, #4
 800120a:	f003 0201 	and.w	r2, r3, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b03      	cmp	r3, #3
 800122a:	d017      	beq.n	800125c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d123      	bne.n	80012b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	08da      	lsrs	r2, r3, #3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3208      	adds	r2, #8
 8001270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	08da      	lsrs	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3208      	adds	r2, #8
 80012aa:	69b9      	ldr	r1, [r7, #24]
 80012ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0203 	and.w	r2, r3, #3
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80be 	beq.w	800146e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	4b66      	ldr	r3, [pc, #408]	@ (800148c <HAL_GPIO_Init+0x324>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f6:	4a65      	ldr	r2, [pc, #404]	@ (800148c <HAL_GPIO_Init+0x324>)
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fe:	4b63      	ldr	r3, [pc, #396]	@ (800148c <HAL_GPIO_Init+0x324>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800130a:	4a61      	ldr	r2, [pc, #388]	@ (8001490 <HAL_GPIO_Init+0x328>)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	3302      	adds	r3, #2
 8001312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	220f      	movs	r2, #15
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a58      	ldr	r2, [pc, #352]	@ (8001494 <HAL_GPIO_Init+0x32c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d037      	beq.n	80013a6 <HAL_GPIO_Init+0x23e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a57      	ldr	r2, [pc, #348]	@ (8001498 <HAL_GPIO_Init+0x330>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d031      	beq.n	80013a2 <HAL_GPIO_Init+0x23a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a56      	ldr	r2, [pc, #344]	@ (800149c <HAL_GPIO_Init+0x334>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d02b      	beq.n	800139e <HAL_GPIO_Init+0x236>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a55      	ldr	r2, [pc, #340]	@ (80014a0 <HAL_GPIO_Init+0x338>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d025      	beq.n	800139a <HAL_GPIO_Init+0x232>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a54      	ldr	r2, [pc, #336]	@ (80014a4 <HAL_GPIO_Init+0x33c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d01f      	beq.n	8001396 <HAL_GPIO_Init+0x22e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a53      	ldr	r2, [pc, #332]	@ (80014a8 <HAL_GPIO_Init+0x340>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d019      	beq.n	8001392 <HAL_GPIO_Init+0x22a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a52      	ldr	r2, [pc, #328]	@ (80014ac <HAL_GPIO_Init+0x344>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0x226>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a51      	ldr	r2, [pc, #324]	@ (80014b0 <HAL_GPIO_Init+0x348>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d00d      	beq.n	800138a <HAL_GPIO_Init+0x222>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a50      	ldr	r2, [pc, #320]	@ (80014b4 <HAL_GPIO_Init+0x34c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d007      	beq.n	8001386 <HAL_GPIO_Init+0x21e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4f      	ldr	r2, [pc, #316]	@ (80014b8 <HAL_GPIO_Init+0x350>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d101      	bne.n	8001382 <HAL_GPIO_Init+0x21a>
 800137e:	2309      	movs	r3, #9
 8001380:	e012      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001382:	230a      	movs	r3, #10
 8001384:	e010      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001386:	2308      	movs	r3, #8
 8001388:	e00e      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800138a:	2307      	movs	r3, #7
 800138c:	e00c      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800138e:	2306      	movs	r3, #6
 8001390:	e00a      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001392:	2305      	movs	r3, #5
 8001394:	e008      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001396:	2304      	movs	r3, #4
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800139a:	2303      	movs	r3, #3
 800139c:	e004      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800139e:	2302      	movs	r3, #2
 80013a0:	e002      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 80013a6:	2300      	movs	r3, #0
 80013a8:	69fa      	ldr	r2, [r7, #28]
 80013aa:	f002 0203 	and.w	r2, r2, #3
 80013ae:	0092      	lsls	r2, r2, #2
 80013b0:	4093      	lsls	r3, r2
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013b8:	4935      	ldr	r1, [pc, #212]	@ (8001490 <HAL_GPIO_Init+0x328>)
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3302      	adds	r3, #2
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013c6:	4b3d      	ldr	r3, [pc, #244]	@ (80014bc <HAL_GPIO_Init+0x354>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ea:	4a34      	ldr	r2, [pc, #208]	@ (80014bc <HAL_GPIO_Init+0x354>)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013f0:	4b32      	ldr	r3, [pc, #200]	@ (80014bc <HAL_GPIO_Init+0x354>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001414:	4a29      	ldr	r2, [pc, #164]	@ (80014bc <HAL_GPIO_Init+0x354>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800141a:	4b28      	ldr	r3, [pc, #160]	@ (80014bc <HAL_GPIO_Init+0x354>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800143e:	4a1f      	ldr	r2, [pc, #124]	@ (80014bc <HAL_GPIO_Init+0x354>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001444:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <HAL_GPIO_Init+0x354>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001468:	4a14      	ldr	r2, [pc, #80]	@ (80014bc <HAL_GPIO_Init+0x354>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3301      	adds	r3, #1
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	2b0f      	cmp	r3, #15
 8001478:	f67f ae86 	bls.w	8001188 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3724      	adds	r7, #36	@ 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40013800 	.word	0x40013800
 8001494:	40020000 	.word	0x40020000
 8001498:	40020400 	.word	0x40020400
 800149c:	40020800 	.word	0x40020800
 80014a0:	40020c00 	.word	0x40020c00
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40021400 	.word	0x40021400
 80014ac:	40021800 	.word	0x40021800
 80014b0:	40021c00 	.word	0x40021c00
 80014b4:	40022000 	.word	0x40022000
 80014b8:	40022400 	.word	0x40022400
 80014bc:	40013c00 	.word	0x40013c00

080014c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	4b23      	ldr	r3, [pc, #140]	@ (8001558 <HAL_PWREx_EnableOverDrive+0x98>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	4a22      	ldr	r2, [pc, #136]	@ (8001558 <HAL_PWREx_EnableOverDrive+0x98>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d6:	4b20      	ldr	r3, [pc, #128]	@ (8001558 <HAL_PWREx_EnableOverDrive+0x98>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014e2:	4b1e      	ldr	r3, [pc, #120]	@ (800155c <HAL_PWREx_EnableOverDrive+0x9c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a1d      	ldr	r2, [pc, #116]	@ (800155c <HAL_PWREx_EnableOverDrive+0x9c>)
 80014e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014ee:	f7ff fc13 	bl	8000d18 <HAL_GetTick>
 80014f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014f4:	e009      	b.n	800150a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014f6:	f7ff fc0f 	bl	8000d18 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001504:	d901      	bls.n	800150a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e022      	b.n	8001550 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800150a:	4b14      	ldr	r3, [pc, #80]	@ (800155c <HAL_PWREx_EnableOverDrive+0x9c>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001512:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001516:	d1ee      	bne.n	80014f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001518:	4b10      	ldr	r3, [pc, #64]	@ (800155c <HAL_PWREx_EnableOverDrive+0x9c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0f      	ldr	r2, [pc, #60]	@ (800155c <HAL_PWREx_EnableOverDrive+0x9c>)
 800151e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001522:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001524:	f7ff fbf8 	bl	8000d18 <HAL_GetTick>
 8001528:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800152a:	e009      	b.n	8001540 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800152c:	f7ff fbf4 	bl	8000d18 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800153a:	d901      	bls.n	8001540 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e007      	b.n	8001550 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001548:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800154c:	d1ee      	bne.n	800152c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40023800 	.word	0x40023800
 800155c:	40007000 	.word	0x40007000

08001560 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e29b      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 8087 	beq.w	8001692 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001584:	4b96      	ldr	r3, [pc, #600]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 030c 	and.w	r3, r3, #12
 800158c:	2b04      	cmp	r3, #4
 800158e:	d00c      	beq.n	80015aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001590:	4b93      	ldr	r3, [pc, #588]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 030c 	and.w	r3, r3, #12
 8001598:	2b08      	cmp	r3, #8
 800159a:	d112      	bne.n	80015c2 <HAL_RCC_OscConfig+0x62>
 800159c:	4b90      	ldr	r3, [pc, #576]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015a8:	d10b      	bne.n	80015c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015aa:	4b8d      	ldr	r3, [pc, #564]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d06c      	beq.n	8001690 <HAL_RCC_OscConfig+0x130>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d168      	bne.n	8001690 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e275      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015ca:	d106      	bne.n	80015da <HAL_RCC_OscConfig+0x7a>
 80015cc:	4b84      	ldr	r3, [pc, #528]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a83      	ldr	r2, [pc, #524]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 80015d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	e02e      	b.n	8001638 <HAL_RCC_OscConfig+0xd8>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10c      	bne.n	80015fc <HAL_RCC_OscConfig+0x9c>
 80015e2:	4b7f      	ldr	r3, [pc, #508]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a7e      	ldr	r2, [pc, #504]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 80015e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	4b7c      	ldr	r3, [pc, #496]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a7b      	ldr	r2, [pc, #492]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 80015f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e01d      	b.n	8001638 <HAL_RCC_OscConfig+0xd8>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001604:	d10c      	bne.n	8001620 <HAL_RCC_OscConfig+0xc0>
 8001606:	4b76      	ldr	r3, [pc, #472]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a75      	ldr	r2, [pc, #468]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 800160c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	4b73      	ldr	r3, [pc, #460]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a72      	ldr	r2, [pc, #456]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e00b      	b.n	8001638 <HAL_RCC_OscConfig+0xd8>
 8001620:	4b6f      	ldr	r3, [pc, #444]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a6e      	ldr	r2, [pc, #440]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001626:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	4b6c      	ldr	r3, [pc, #432]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a6b      	ldr	r2, [pc, #428]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001632:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d013      	beq.n	8001668 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff fb6a 	bl	8000d18 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001648:	f7ff fb66 	bl	8000d18 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b64      	cmp	r3, #100	@ 0x64
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e229      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165a:	4b61      	ldr	r3, [pc, #388]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0xe8>
 8001666:	e014      	b.n	8001692 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fb56 	bl	8000d18 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff fb52 	bl	8000d18 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	@ 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e215      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001682:	4b57      	ldr	r3, [pc, #348]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x110>
 800168e:	e000      	b.n	8001692 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d069      	beq.n	8001772 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800169e:	4b50      	ldr	r3, [pc, #320]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00b      	beq.n	80016c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016aa:	4b4d      	ldr	r3, [pc, #308]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d11c      	bne.n	80016f0 <HAL_RCC_OscConfig+0x190>
 80016b6:	4b4a      	ldr	r3, [pc, #296]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d116      	bne.n	80016f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c2:	4b47      	ldr	r3, [pc, #284]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d005      	beq.n	80016da <HAL_RCC_OscConfig+0x17a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d001      	beq.n	80016da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e1e9      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016da:	4b41      	ldr	r3, [pc, #260]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	493d      	ldr	r1, [pc, #244]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ee:	e040      	b.n	8001772 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d023      	beq.n	8001740 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f8:	4b39      	ldr	r3, [pc, #228]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a38      	ldr	r2, [pc, #224]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff fb08 	bl	8000d18 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170c:	f7ff fb04 	bl	8000d18 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e1c7      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171e:	4b30      	ldr	r3, [pc, #192]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	4b2d      	ldr	r3, [pc, #180]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4929      	ldr	r1, [pc, #164]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]
 800173e:	e018      	b.n	8001772 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001740:	4b27      	ldr	r3, [pc, #156]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a26      	ldr	r2, [pc, #152]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff fae4 	bl	8000d18 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001754:	f7ff fae0 	bl	8000d18 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e1a3      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001766:	4b1e      	ldr	r3, [pc, #120]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b00      	cmp	r3, #0
 800177c:	d038      	beq.n	80017f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d019      	beq.n	80017ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001786:	4b16      	ldr	r3, [pc, #88]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800178a:	4a15      	ldr	r2, [pc, #84]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001792:	f7ff fac1 	bl	8000d18 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179a:	f7ff fabd 	bl	8000d18 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e180      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ac:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 80017ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x23a>
 80017b8:	e01a      	b.n	80017f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ba:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 80017bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017be:	4a08      	ldr	r2, [pc, #32]	@ (80017e0 <HAL_RCC_OscConfig+0x280>)
 80017c0:	f023 0301 	bic.w	r3, r3, #1
 80017c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c6:	f7ff faa7 	bl	8000d18 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017cc:	e00a      	b.n	80017e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ce:	f7ff faa3 	bl	8000d18 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d903      	bls.n	80017e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e166      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
 80017e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e4:	4b92      	ldr	r3, [pc, #584]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80017e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1ee      	bne.n	80017ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 80a4 	beq.w	8001946 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017fe:	4b8c      	ldr	r3, [pc, #560]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10d      	bne.n	8001826 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	4b89      	ldr	r3, [pc, #548]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	4a88      	ldr	r2, [pc, #544]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001814:	6413      	str	r3, [r2, #64]	@ 0x40
 8001816:	4b86      	ldr	r3, [pc, #536]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001822:	2301      	movs	r3, #1
 8001824:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001826:	4b83      	ldr	r3, [pc, #524]	@ (8001a34 <HAL_RCC_OscConfig+0x4d4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800182e:	2b00      	cmp	r3, #0
 8001830:	d118      	bne.n	8001864 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001832:	4b80      	ldr	r3, [pc, #512]	@ (8001a34 <HAL_RCC_OscConfig+0x4d4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a7f      	ldr	r2, [pc, #508]	@ (8001a34 <HAL_RCC_OscConfig+0x4d4>)
 8001838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800183c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183e:	f7ff fa6b 	bl	8000d18 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001846:	f7ff fa67 	bl	8000d18 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b64      	cmp	r3, #100	@ 0x64
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e12a      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001858:	4b76      	ldr	r3, [pc, #472]	@ (8001a34 <HAL_RCC_OscConfig+0x4d4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d106      	bne.n	800187a <HAL_RCC_OscConfig+0x31a>
 800186c:	4b70      	ldr	r3, [pc, #448]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 800186e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001870:	4a6f      	ldr	r2, [pc, #444]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6713      	str	r3, [r2, #112]	@ 0x70
 8001878:	e02d      	b.n	80018d6 <HAL_RCC_OscConfig+0x376>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10c      	bne.n	800189c <HAL_RCC_OscConfig+0x33c>
 8001882:	4b6b      	ldr	r3, [pc, #428]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001886:	4a6a      	ldr	r2, [pc, #424]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	6713      	str	r3, [r2, #112]	@ 0x70
 800188e:	4b68      	ldr	r3, [pc, #416]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001892:	4a67      	ldr	r2, [pc, #412]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001894:	f023 0304 	bic.w	r3, r3, #4
 8001898:	6713      	str	r3, [r2, #112]	@ 0x70
 800189a:	e01c      	b.n	80018d6 <HAL_RCC_OscConfig+0x376>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	2b05      	cmp	r3, #5
 80018a2:	d10c      	bne.n	80018be <HAL_RCC_OscConfig+0x35e>
 80018a4:	4b62      	ldr	r3, [pc, #392]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80018a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018a8:	4a61      	ldr	r2, [pc, #388]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80018aa:	f043 0304 	orr.w	r3, r3, #4
 80018ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80018b0:	4b5f      	ldr	r3, [pc, #380]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80018b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b4:	4a5e      	ldr	r2, [pc, #376]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80018bc:	e00b      	b.n	80018d6 <HAL_RCC_OscConfig+0x376>
 80018be:	4b5c      	ldr	r3, [pc, #368]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80018c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018c2:	4a5b      	ldr	r2, [pc, #364]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80018c4:	f023 0301 	bic.w	r3, r3, #1
 80018c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ca:	4b59      	ldr	r3, [pc, #356]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80018cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ce:	4a58      	ldr	r2, [pc, #352]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80018d0:	f023 0304 	bic.w	r3, r3, #4
 80018d4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d015      	beq.n	800190a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018de:	f7ff fa1b 	bl	8000d18 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e4:	e00a      	b.n	80018fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f7ff fa17 	bl	8000d18 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e0d8      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0ee      	beq.n	80018e6 <HAL_RCC_OscConfig+0x386>
 8001908:	e014      	b.n	8001934 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190a:	f7ff fa05 	bl	8000d18 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001910:	e00a      	b.n	8001928 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001912:	f7ff fa01 	bl	8000d18 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001920:	4293      	cmp	r3, r2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e0c2      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001928:	4b41      	ldr	r3, [pc, #260]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 800192a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1ee      	bne.n	8001912 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001934:	7dfb      	ldrb	r3, [r7, #23]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d105      	bne.n	8001946 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800193a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	4a3c      	ldr	r2, [pc, #240]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001940:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001944:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 80ae 	beq.w	8001aac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001950:	4b37      	ldr	r3, [pc, #220]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b08      	cmp	r3, #8
 800195a:	d06d      	beq.n	8001a38 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d14b      	bne.n	80019fc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001964:	4b32      	ldr	r3, [pc, #200]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a31      	ldr	r2, [pc, #196]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 800196a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800196e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff f9d2 	bl	8000d18 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001978:	f7ff f9ce 	bl	8000d18 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e091      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198a:	4b29      	ldr	r3, [pc, #164]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69da      	ldr	r2, [r3, #28]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a4:	019b      	lsls	r3, r3, #6
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ac:	085b      	lsrs	r3, r3, #1
 80019ae:	3b01      	subs	r3, #1
 80019b0:	041b      	lsls	r3, r3, #16
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b8:	061b      	lsls	r3, r3, #24
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c0:	071b      	lsls	r3, r3, #28
 80019c2:	491b      	ldr	r1, [pc, #108]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c8:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a18      	ldr	r2, [pc, #96]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80019ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff f9a0 	bl	8000d18 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff f99c 	bl	8000d18 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e05f      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ee:	4b10      	ldr	r3, [pc, #64]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x47c>
 80019fa:	e057      	b.n	8001aac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0b      	ldr	r2, [pc, #44]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001a02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a08:	f7ff f986 	bl	8000d18 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a10:	f7ff f982 	bl	8000d18 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e045      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a22:	4b03      	ldr	r3, [pc, #12]	@ (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x4b0>
 8001a2e:	e03d      	b.n	8001aac <HAL_RCC_OscConfig+0x54c>
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a38:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <HAL_RCC_OscConfig+0x558>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d030      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d129      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d122      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a68:	4013      	ands	r3, r2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a6e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d119      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7e:	085b      	lsrs	r3, r3, #1
 8001a80:	3b01      	subs	r3, #1
 8001a82:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d10f      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a92:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d107      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800

08001abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0d0      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad4:	4b6a      	ldr	r3, [pc, #424]	@ (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 030f 	and.w	r3, r3, #15
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d910      	bls.n	8001b04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae2:	4b67      	ldr	r3, [pc, #412]	@ (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 020f 	bic.w	r2, r3, #15
 8001aea:	4965      	ldr	r1, [pc, #404]	@ (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b63      	ldr	r3, [pc, #396]	@ (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0b8      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b1c:	4b59      	ldr	r3, [pc, #356]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4a58      	ldr	r2, [pc, #352]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b34:	4b53      	ldr	r3, [pc, #332]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a52      	ldr	r2, [pc, #328]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b40:	4b50      	ldr	r3, [pc, #320]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	494d      	ldr	r1, [pc, #308]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d040      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	4b47      	ldr	r3, [pc, #284]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d115      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e07f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7e:	4b41      	ldr	r3, [pc, #260]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e073      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e06b      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b9e:	4b39      	ldr	r3, [pc, #228]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f023 0203 	bic.w	r2, r3, #3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4936      	ldr	r1, [pc, #216]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bb0:	f7ff f8b2 	bl	8000d18 <HAL_GetTick>
 8001bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb6:	e00a      	b.n	8001bce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb8:	f7ff f8ae 	bl	8000d18 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e053      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bce:	4b2d      	ldr	r3, [pc, #180]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 020c 	and.w	r2, r3, #12
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d1eb      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be0:	4b27      	ldr	r3, [pc, #156]	@ (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d210      	bcs.n	8001c10 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bee:	4b24      	ldr	r3, [pc, #144]	@ (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 020f 	bic.w	r2, r3, #15
 8001bf6:	4922      	ldr	r1, [pc, #136]	@ (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfe:	4b20      	ldr	r3, [pc, #128]	@ (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e032      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c1c:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4916      	ldr	r1, [pc, #88]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c3a:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	490e      	ldr	r1, [pc, #56]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c4e:	f000 f821 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8001c52:	4602      	mov	r2, r0
 8001c54:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	490a      	ldr	r1, [pc, #40]	@ (8001c88 <HAL_RCC_ClockConfig+0x1cc>)
 8001c60:	5ccb      	ldrb	r3, [r1, r3]
 8001c62:	fa22 f303 	lsr.w	r3, r2, r3
 8001c66:	4a09      	ldr	r2, [pc, #36]	@ (8001c8c <HAL_RCC_ClockConfig+0x1d0>)
 8001c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <HAL_RCC_ClockConfig+0x1d4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff f80e 	bl	8000c90 <HAL_InitTick>

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023c00 	.word	0x40023c00
 8001c84:	40023800 	.word	0x40023800
 8001c88:	08003e28 	.word	0x08003e28
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000004 	.word	0x20000004

08001c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c98:	b090      	sub	sp, #64	@ 0x40
 8001c9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cac:	4b59      	ldr	r3, [pc, #356]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d00d      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	f200 80a1 	bhi.w	8001e00 <HAL_RCC_GetSysClockFreq+0x16c>
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d003      	beq.n	8001cce <HAL_RCC_GetSysClockFreq+0x3a>
 8001cc6:	e09b      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cc8:	4b53      	ldr	r3, [pc, #332]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ccc:	e09b      	b.n	8001e06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cce:	4b53      	ldr	r3, [pc, #332]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x188>)
 8001cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cd2:	e098      	b.n	8001e06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd4:	4b4f      	ldr	r3, [pc, #316]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cdc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001cde:	4b4d      	ldr	r3, [pc, #308]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d028      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cea:	4b4a      	ldr	r3, [pc, #296]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	099b      	lsrs	r3, r3, #6
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	623b      	str	r3, [r7, #32]
 8001cf4:	627a      	str	r2, [r7, #36]	@ 0x24
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4b47      	ldr	r3, [pc, #284]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x188>)
 8001d00:	fb03 f201 	mul.w	r2, r3, r1
 8001d04:	2300      	movs	r3, #0
 8001d06:	fb00 f303 	mul.w	r3, r0, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a43      	ldr	r2, [pc, #268]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x188>)
 8001d0e:	fba0 1202 	umull	r1, r2, r0, r2
 8001d12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d14:	460a      	mov	r2, r1
 8001d16:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001d18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d1a:	4413      	add	r3, r2
 8001d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d20:	2200      	movs	r2, #0
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	61fa      	str	r2, [r7, #28]
 8001d26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d2e:	f7fe fa8b 	bl	8000248 <__aeabi_uldivmod>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4613      	mov	r3, r2
 8001d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d3a:	e053      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d3c:	4b35      	ldr	r3, [pc, #212]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	099b      	lsrs	r3, r3, #6
 8001d42:	2200      	movs	r2, #0
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	617a      	str	r2, [r7, #20]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d4e:	f04f 0b00 	mov.w	fp, #0
 8001d52:	4652      	mov	r2, sl
 8001d54:	465b      	mov	r3, fp
 8001d56:	f04f 0000 	mov.w	r0, #0
 8001d5a:	f04f 0100 	mov.w	r1, #0
 8001d5e:	0159      	lsls	r1, r3, #5
 8001d60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d64:	0150      	lsls	r0, r2, #5
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	ebb2 080a 	subs.w	r8, r2, sl
 8001d6e:	eb63 090b 	sbc.w	r9, r3, fp
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d86:	ebb2 0408 	subs.w	r4, r2, r8
 8001d8a:	eb63 0509 	sbc.w	r5, r3, r9
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	00eb      	lsls	r3, r5, #3
 8001d98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d9c:	00e2      	lsls	r2, r4, #3
 8001d9e:	4614      	mov	r4, r2
 8001da0:	461d      	mov	r5, r3
 8001da2:	eb14 030a 	adds.w	r3, r4, sl
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	eb45 030b 	adc.w	r3, r5, fp
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dba:	4629      	mov	r1, r5
 8001dbc:	028b      	lsls	r3, r1, #10
 8001dbe:	4621      	mov	r1, r4
 8001dc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dc4:	4621      	mov	r1, r4
 8001dc6:	028a      	lsls	r2, r1, #10
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dce:	2200      	movs	r2, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	60fa      	str	r2, [r7, #12]
 8001dd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001dd8:	f7fe fa36 	bl	8000248 <__aeabi_uldivmod>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4613      	mov	r3, r2
 8001de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001de4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	0c1b      	lsrs	r3, r3, #16
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	3301      	adds	r3, #1
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001df4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001dfe:	e002      	b.n	8001e06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e00:	4b05      	ldr	r3, [pc, #20]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3740      	adds	r7, #64	@ 0x40
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800
 8001e18:	00f42400 	.word	0x00f42400
 8001e1c:	017d7840 	.word	0x017d7840

08001e20 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e24:	4b03      	ldr	r3, [pc, #12]	@ (8001e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000000 	.word	0x20000000

08001e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e3c:	f7ff fff0 	bl	8001e20 <HAL_RCC_GetHCLKFreq>
 8001e40:	4602      	mov	r2, r0
 8001e42:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	0a9b      	lsrs	r3, r3, #10
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	4903      	ldr	r1, [pc, #12]	@ (8001e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e4e:	5ccb      	ldrb	r3, [r1, r3]
 8001e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	08003e38 	.word	0x08003e38

08001e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e64:	f7ff ffdc 	bl	8001e20 <HAL_RCC_GetHCLKFreq>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	4b05      	ldr	r3, [pc, #20]	@ (8001e80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	0b5b      	lsrs	r3, r3, #13
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	4903      	ldr	r1, [pc, #12]	@ (8001e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e76:	5ccb      	ldrb	r3, [r1, r3]
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40023800 	.word	0x40023800
 8001e84:	08003e38 	.word	0x08003e38

08001e88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d012      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001eb0:	4b69      	ldr	r3, [pc, #420]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	4a68      	ldr	r2, [pc, #416]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001eba:	6093      	str	r3, [r2, #8]
 8001ebc:	4b66      	ldr	r3, [pc, #408]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ec4:	4964      	ldr	r1, [pc, #400]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d017      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ee2:	4b5d      	ldr	r3, [pc, #372]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ee8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef0:	4959      	ldr	r1, [pc, #356]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001efc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f00:	d101      	bne.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f02:	2301      	movs	r3, #1
 8001f04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d017      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f1e:	4b4e      	ldr	r3, [pc, #312]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f24:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2c:	494a      	ldr	r1, [pc, #296]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 808b 	beq.w	8002082 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f6c:	4b3a      	ldr	r3, [pc, #232]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f70:	4a39      	ldr	r2, [pc, #228]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f76:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f78:	4b37      	ldr	r3, [pc, #220]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f84:	4b35      	ldr	r3, [pc, #212]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a34      	ldr	r2, [pc, #208]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f90:	f7fe fec2 	bl	8000d18 <HAL_GetTick>
 8001f94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f98:	f7fe febe 	bl	8000d18 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b64      	cmp	r3, #100	@ 0x64
 8001fa4:	d901      	bls.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e38f      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001faa:	4b2c      	ldr	r3, [pc, #176]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fb6:	4b28      	ldr	r3, [pc, #160]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fbe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d035      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d02e      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fd4:	4b20      	ldr	r3, [pc, #128]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fdc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fde:	4b1e      	ldr	r3, [pc, #120]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe2:	4a1d      	ldr	r2, [pc, #116]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fe8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fea:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fee:	4a1a      	ldr	r2, [pc, #104]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ff4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001ff6:	4a18      	ldr	r2, [pc, #96]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ffc:	4b16      	ldr	r3, [pc, #88]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	d114      	bne.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7fe fe86 	bl	8000d18 <HAL_GetTick>
 800200c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200e:	e00a      	b.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002010:	f7fe fe82 	bl	8000d18 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e351      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002026:	4b0c      	ldr	r3, [pc, #48]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0ee      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800203a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800203e:	d111      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002040:	4b05      	ldr	r3, [pc, #20]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800204c:	4b04      	ldr	r3, [pc, #16]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800204e:	400b      	ands	r3, r1
 8002050:	4901      	ldr	r1, [pc, #4]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002052:	4313      	orrs	r3, r2
 8002054:	608b      	str	r3, [r1, #8]
 8002056:	e00b      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002058:	40023800 	.word	0x40023800
 800205c:	40007000 	.word	0x40007000
 8002060:	0ffffcff 	.word	0x0ffffcff
 8002064:	4bac      	ldr	r3, [pc, #688]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	4aab      	ldr	r2, [pc, #684]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800206a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800206e:	6093      	str	r3, [r2, #8]
 8002070:	4ba9      	ldr	r3, [pc, #676]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002072:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800207c:	49a6      	ldr	r1, [pc, #664]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800207e:	4313      	orrs	r3, r2
 8002080:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	2b00      	cmp	r3, #0
 800208c:	d010      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800208e:	4ba2      	ldr	r3, [pc, #648]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002090:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002094:	4aa0      	ldr	r2, [pc, #640]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002096:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800209a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800209e:	4b9e      	ldr	r3, [pc, #632]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a8:	499b      	ldr	r1, [pc, #620]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020bc:	4b96      	ldr	r3, [pc, #600]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020ca:	4993      	ldr	r1, [pc, #588]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00a      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020de:	4b8e      	ldr	r3, [pc, #568]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020ec:	498a      	ldr	r1, [pc, #552]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002100:	4b85      	ldr	r3, [pc, #532]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002106:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800210e:	4982      	ldr	r1, [pc, #520]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002122:	4b7d      	ldr	r3, [pc, #500]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002128:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002130:	4979      	ldr	r1, [pc, #484]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002144:	4b74      	ldr	r3, [pc, #464]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214a:	f023 0203 	bic.w	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002152:	4971      	ldr	r1, [pc, #452]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002166:	4b6c      	ldr	r3, [pc, #432]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800216c:	f023 020c 	bic.w	r2, r3, #12
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002174:	4968      	ldr	r1, [pc, #416]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002188:	4b63      	ldr	r3, [pc, #396]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002196:	4960      	ldr	r1, [pc, #384]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021b8:	4957      	ldr	r1, [pc, #348]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021cc:	4b52      	ldr	r3, [pc, #328]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021da:	494f      	ldr	r1, [pc, #316]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80021ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fc:	4946      	ldr	r1, [pc, #280]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002210:	4b41      	ldr	r3, [pc, #260]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002216:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221e:	493e      	ldr	r1, [pc, #248]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002232:	4b39      	ldr	r3, [pc, #228]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002238:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002240:	4935      	ldr	r1, [pc, #212]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002254:	4b30      	ldr	r3, [pc, #192]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800225a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002262:	492d      	ldr	r1, [pc, #180]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d011      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002276:	4b28      	ldr	r3, [pc, #160]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800227c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002284:	4924      	ldr	r1, [pc, #144]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002290:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002294:	d101      	bne.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002296:	2301      	movs	r3, #1
 8002298:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80022a6:	2301      	movs	r3, #1
 80022a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022b6:	4b18      	ldr	r3, [pc, #96]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022bc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022c4:	4914      	ldr	r1, [pc, #80]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00b      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022de:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022e8:	490b      	ldr	r1, [pc, #44]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00f      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80022fc:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002302:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800230c:	4902      	ldr	r1, [pc, #8]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002314:	e002      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00b      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002328:	4b8a      	ldr	r3, [pc, #552]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800232a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800232e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002338:	4986      	ldr	r1, [pc, #536]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800233a:	4313      	orrs	r3, r2
 800233c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00b      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800234c:	4b81      	ldr	r3, [pc, #516]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800234e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002352:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800235c:	497d      	ldr	r1, [pc, #500]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d006      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 80d6 	beq.w	8002524 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002378:	4b76      	ldr	r3, [pc, #472]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a75      	ldr	r2, [pc, #468]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800237e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002382:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002384:	f7fe fcc8 	bl	8000d18 <HAL_GetTick>
 8002388:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800238c:	f7fe fcc4 	bl	8000d18 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	@ 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e195      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800239e:	4b6d      	ldr	r3, [pc, #436]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d021      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x572>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d11d      	bne.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023be:	4b65      	ldr	r3, [pc, #404]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023c4:	0c1b      	lsrs	r3, r3, #16
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023cc:	4b61      	ldr	r3, [pc, #388]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023d2:	0e1b      	lsrs	r3, r3, #24
 80023d4:	f003 030f 	and.w	r3, r3, #15
 80023d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	019a      	lsls	r2, r3, #6
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	041b      	lsls	r3, r3, #16
 80023e4:	431a      	orrs	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	061b      	lsls	r3, r3, #24
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	071b      	lsls	r3, r3, #28
 80023f2:	4958      	ldr	r1, [pc, #352]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d004      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800240a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800240e:	d00a      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002418:	2b00      	cmp	r3, #0
 800241a:	d02e      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002420:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002424:	d129      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002426:	4b4b      	ldr	r3, [pc, #300]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002428:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800242c:	0c1b      	lsrs	r3, r3, #16
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002434:	4b47      	ldr	r3, [pc, #284]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002436:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800243a:	0f1b      	lsrs	r3, r3, #28
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	019a      	lsls	r2, r3, #6
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	041b      	lsls	r3, r3, #16
 800244c:	431a      	orrs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	061b      	lsls	r3, r3, #24
 8002454:	431a      	orrs	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	071b      	lsls	r3, r3, #28
 800245a:	493e      	ldr	r1, [pc, #248]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002462:	4b3c      	ldr	r3, [pc, #240]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002464:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002468:	f023 021f 	bic.w	r2, r3, #31
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002470:	3b01      	subs	r3, #1
 8002472:	4938      	ldr	r1, [pc, #224]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d01d      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002486:	4b33      	ldr	r3, [pc, #204]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002488:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800248c:	0e1b      	lsrs	r3, r3, #24
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002494:	4b2f      	ldr	r3, [pc, #188]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002496:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800249a:	0f1b      	lsrs	r3, r3, #28
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	019a      	lsls	r2, r3, #6
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	041b      	lsls	r3, r3, #16
 80024ae:	431a      	orrs	r2, r3
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	061b      	lsls	r3, r3, #24
 80024b4:	431a      	orrs	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	071b      	lsls	r3, r3, #28
 80024ba:	4926      	ldr	r1, [pc, #152]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d011      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	019a      	lsls	r2, r3, #6
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	041b      	lsls	r3, r3, #16
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	061b      	lsls	r3, r3, #24
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	071b      	lsls	r3, r3, #28
 80024ea:	491a      	ldr	r1, [pc, #104]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80024f2:	4b18      	ldr	r3, [pc, #96]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a17      	ldr	r2, [pc, #92]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024fe:	f7fe fc0b 	bl	8000d18 <HAL_GetTick>
 8002502:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002504:	e008      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002506:	f7fe fc07 	bl	8000d18 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b64      	cmp	r3, #100	@ 0x64
 8002512:	d901      	bls.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e0d8      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002518:	4b0e      	ldr	r3, [pc, #56]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f0      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	2b01      	cmp	r3, #1
 8002528:	f040 80ce 	bne.w	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800252c:	4b09      	ldr	r3, [pc, #36]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a08      	ldr	r2, [pc, #32]	@ (8002554 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002532:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002536:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002538:	f7fe fbee 	bl	8000d18 <HAL_GetTick>
 800253c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800253e:	e00b      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002540:	f7fe fbea 	bl	8000d18 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b64      	cmp	r3, #100	@ 0x64
 800254c:	d904      	bls.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e0bb      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002558:	4b5e      	ldr	r3, [pc, #376]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002560:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002564:	d0ec      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002576:	2b00      	cmp	r3, #0
 8002578:	d009      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002582:	2b00      	cmp	r3, #0
 8002584:	d02e      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	2b00      	cmp	r3, #0
 800258c:	d12a      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800258e:	4b51      	ldr	r3, [pc, #324]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002594:	0c1b      	lsrs	r3, r3, #16
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800259c:	4b4d      	ldr	r3, [pc, #308]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a2:	0f1b      	lsrs	r3, r3, #28
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	019a      	lsls	r2, r3, #6
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	041b      	lsls	r3, r3, #16
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	061b      	lsls	r3, r3, #24
 80025bc:	431a      	orrs	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	071b      	lsls	r3, r3, #28
 80025c2:	4944      	ldr	r1, [pc, #272]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80025ca:	4b42      	ldr	r3, [pc, #264]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025d0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d8:	3b01      	subs	r3, #1
 80025da:	021b      	lsls	r3, r3, #8
 80025dc:	493d      	ldr	r1, [pc, #244]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d022      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025f8:	d11d      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025fa:	4b36      	ldr	r3, [pc, #216]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002600:	0e1b      	lsrs	r3, r3, #24
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002608:	4b32      	ldr	r3, [pc, #200]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260e:	0f1b      	lsrs	r3, r3, #28
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	019a      	lsls	r2, r3, #6
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	041b      	lsls	r3, r3, #16
 8002622:	431a      	orrs	r2, r3
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	061b      	lsls	r3, r3, #24
 8002628:	431a      	orrs	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	071b      	lsls	r3, r3, #28
 800262e:	4929      	ldr	r1, [pc, #164]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d028      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002642:	4b24      	ldr	r3, [pc, #144]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002648:	0e1b      	lsrs	r3, r3, #24
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002650:	4b20      	ldr	r3, [pc, #128]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002656:	0c1b      	lsrs	r3, r3, #16
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	019a      	lsls	r2, r3, #6
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	041b      	lsls	r3, r3, #16
 8002668:	431a      	orrs	r2, r3
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	061b      	lsls	r3, r3, #24
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	071b      	lsls	r3, r3, #28
 8002676:	4917      	ldr	r1, [pc, #92]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800267e:	4b15      	ldr	r3, [pc, #84]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002680:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002684:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268c:	4911      	ldr	r1, [pc, #68]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002694:	4b0f      	ldr	r3, [pc, #60]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0e      	ldr	r2, [pc, #56]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800269a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800269e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a0:	f7fe fb3a 	bl	8000d18 <HAL_GetTick>
 80026a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026a8:	f7fe fb36 	bl	8000d18 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	@ 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e007      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026ba:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026c6:	d1ef      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3720      	adds	r7, #32
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800

080026d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e040      	b.n	800276c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fe f9e0 	bl	8000ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2224      	movs	r2, #36	@ 0x24
 8002704:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0201 	bic.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 fe6c 	bl	80033fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 fc05 	bl	8002f34 <UART_SetConfig>
 800272a:	4603      	mov	r3, r0
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e01b      	b.n	800276c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002742:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002752:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 feeb 	bl	8003540 <UART_CheckIdleState>
 800276a:	4603      	mov	r3, r0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	@ 0x28
 8002778:	af02      	add	r7, sp, #8
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	4613      	mov	r3, r2
 8002782:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002788:	2b20      	cmp	r3, #32
 800278a:	d177      	bne.n	800287c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <HAL_UART_Transmit+0x24>
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e070      	b.n	800287e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2221      	movs	r2, #33	@ 0x21
 80027a8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027aa:	f7fe fab5 	bl	8000d18 <HAL_GetTick>
 80027ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	88fa      	ldrh	r2, [r7, #6]
 80027b4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	88fa      	ldrh	r2, [r7, #6]
 80027bc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027c8:	d108      	bne.n	80027dc <HAL_UART_Transmit+0x68>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d104      	bne.n	80027dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	e003      	b.n	80027e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027e4:	e02f      	b.n	8002846 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2200      	movs	r2, #0
 80027ee:	2180      	movs	r1, #128	@ 0x80
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 ff4d 	bl	8003690 <UART_WaitOnFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d004      	beq.n	8002806 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2220      	movs	r2, #32
 8002800:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e03b      	b.n	800287e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10b      	bne.n	8002824 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800281a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	3302      	adds	r3, #2
 8002820:	61bb      	str	r3, [r7, #24]
 8002822:	e007      	b.n	8002834 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	781a      	ldrb	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3301      	adds	r3, #1
 8002832:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800283a:	b29b      	uxth	r3, r3
 800283c:	3b01      	subs	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1c9      	bne.n	80027e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2200      	movs	r2, #0
 800285a:	2140      	movs	r1, #64	@ 0x40
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 ff17 	bl	8003690 <UART_WaitOnFlagUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d004      	beq.n	8002872 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e005      	b.n	800287e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2220      	movs	r2, #32
 8002876:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	e000      	b.n	800287e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800287c:	2302      	movs	r3, #2
  }
}
 800287e:	4618      	mov	r0, r3
 8002880:	3720      	adds	r7, #32
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b08a      	sub	sp, #40	@ 0x28
 800288a:	af00      	add	r7, sp, #0
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	4613      	mov	r3, r2
 8002892:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800289a:	2b20      	cmp	r3, #32
 800289c:	d132      	bne.n	8002904 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_UART_Receive_IT+0x24>
 80028a4:	88fb      	ldrh	r3, [r7, #6]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e02b      	b.n	8002906 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d018      	beq.n	80028f4 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	e853 3f00 	ldrex	r3, [r3]
 80028ce:	613b      	str	r3, [r7, #16]
   return(result);
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80028d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e0:	623b      	str	r3, [r7, #32]
 80028e2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e4:	69f9      	ldr	r1, [r7, #28]
 80028e6:	6a3a      	ldr	r2, [r7, #32]
 80028e8:	e841 2300 	strex	r3, r2, [r1]
 80028ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1e6      	bne.n	80028c2 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	461a      	mov	r2, r3
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 ff36 	bl	800376c <UART_Start_Receive_IT>
 8002900:	4603      	mov	r3, r0
 8002902:	e000      	b.n	8002906 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002904:	2302      	movs	r3, #2
  }
}
 8002906:	4618      	mov	r0, r3
 8002908:	3728      	adds	r7, #40	@ 0x28
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b0ba      	sub	sp, #232	@ 0xe8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002936:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800293a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800293e:	4013      	ands	r3, r2
 8002940:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002944:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002948:	2b00      	cmp	r3, #0
 800294a:	d115      	bne.n	8002978 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800294c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00f      	beq.n	8002978 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b00      	cmp	r3, #0
 8002962:	d009      	beq.n	8002978 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 82ac 	beq.w	8002ec6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	4798      	blx	r3
      }
      return;
 8002976:	e2a6      	b.n	8002ec6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002978:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 8117 	beq.w	8002bb0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800298e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002992:	4b85      	ldr	r3, [pc, #532]	@ (8002ba8 <HAL_UART_IRQHandler+0x298>)
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 810a 	beq.w	8002bb0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800299c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d011      	beq.n	80029cc <HAL_UART_IRQHandler+0xbc>
 80029a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00b      	beq.n	80029cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2201      	movs	r2, #1
 80029ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029c2:	f043 0201 	orr.w	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d011      	beq.n	80029fc <HAL_UART_IRQHandler+0xec>
 80029d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00b      	beq.n	80029fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2202      	movs	r2, #2
 80029ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029f2:	f043 0204 	orr.w	r2, r3, #4
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d011      	beq.n	8002a2c <HAL_UART_IRQHandler+0x11c>
 8002a08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00b      	beq.n	8002a2c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2204      	movs	r2, #4
 8002a1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a22:	f043 0202 	orr.w	r2, r3, #2
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d017      	beq.n	8002a68 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d105      	bne.n	8002a50 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a48:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00b      	beq.n	8002a68 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2208      	movs	r2, #8
 8002a56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a5e:	f043 0208 	orr.w	r2, r3, #8
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d012      	beq.n	8002a9a <HAL_UART_IRQHandler+0x18a>
 8002a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00c      	beq.n	8002a9a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a90:	f043 0220 	orr.w	r2, r3, #32
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 8212 	beq.w	8002eca <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00d      	beq.n	8002ace <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ab6:	f003 0320 	and.w	r3, r3, #32
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d007      	beq.n	8002ace <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ad4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae2:	2b40      	cmp	r3, #64	@ 0x40
 8002ae4:	d005      	beq.n	8002af2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002aea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d04f      	beq.n	8002b92 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 ff00 	bl	80038f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b02:	2b40      	cmp	r3, #64	@ 0x40
 8002b04:	d141      	bne.n	8002b8a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	3308      	adds	r3, #8
 8002b0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b14:	e853 3f00 	ldrex	r3, [r3]
 8002b18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	3308      	adds	r3, #8
 8002b2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b42:	e841 2300 	strex	r3, r2, [r1]
 8002b46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1d9      	bne.n	8002b06 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d013      	beq.n	8002b82 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b5e:	4a13      	ldr	r2, [pc, #76]	@ (8002bac <HAL_UART_IRQHandler+0x29c>)
 8002b60:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fadc 	bl	8001124 <HAL_DMA_Abort_IT>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d017      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b80:	e00f      	b.n	8002ba2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f9b6 	bl	8002ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b88:	e00b      	b.n	8002ba2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f9b2 	bl	8002ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b90:	e007      	b.n	8002ba2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f9ae 	bl	8002ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002ba0:	e193      	b.n	8002eca <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba2:	bf00      	nop
    return;
 8002ba4:	e191      	b.n	8002eca <HAL_UART_IRQHandler+0x5ba>
 8002ba6:	bf00      	nop
 8002ba8:	04000120 	.word	0x04000120
 8002bac:	080039c1 	.word	0x080039c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	f040 814c 	bne.w	8002e52 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 8145 	beq.w	8002e52 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bcc:	f003 0310 	and.w	r3, r3, #16
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 813e 	beq.w	8002e52 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2210      	movs	r2, #16
 8002bdc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be8:	2b40      	cmp	r3, #64	@ 0x40
 8002bea:	f040 80b6 	bne.w	8002d5a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bfa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 8165 	beq.w	8002ece <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002c0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	f080 815d 	bcs.w	8002ece <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c1a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c28:	f000 8086 	beq.w	8002d38 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c38:	e853 3f00 	ldrex	r3, [r3]
 8002c3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c5a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c66:	e841 2300 	strex	r3, r2, [r1]
 8002c6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1da      	bne.n	8002c2c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	3308      	adds	r3, #8
 8002c7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c80:	e853 3f00 	ldrex	r3, [r3]
 8002c84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002c86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	3308      	adds	r3, #8
 8002c96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c9a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002c9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002ca2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002ca6:	e841 2300 	strex	r3, r2, [r1]
 8002caa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002cac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1e1      	bne.n	8002c76 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	3308      	adds	r3, #8
 8002cb8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cbc:	e853 3f00 	ldrex	r3, [r3]
 8002cc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002cc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	3308      	adds	r3, #8
 8002cd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002cd6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002cd8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cda:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002cdc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002cde:	e841 2300 	strex	r3, r2, [r1]
 8002ce2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002ce4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1e3      	bne.n	8002cb2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d00:	e853 3f00 	ldrex	r3, [r3]
 8002d04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d08:	f023 0310 	bic.w	r3, r3, #16
 8002d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d1c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d22:	e841 2300 	strex	r3, r2, [r1]
 8002d26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1e4      	bne.n	8002cf8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe f986 	bl	8001044 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	4619      	mov	r1, r3
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f8d8 	bl	8002f08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d58:	e0b9      	b.n	8002ece <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 80ab 	beq.w	8002ed2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8002d7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80a6 	beq.w	8002ed2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d8e:	e853 3f00 	ldrex	r3, [r3]
 8002d92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002da8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002daa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002dae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002db0:	e841 2300 	strex	r3, r2, [r1]
 8002db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e4      	bne.n	8002d86 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3308      	adds	r3, #8
 8002dc2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc6:	e853 3f00 	ldrex	r3, [r3]
 8002dca:	623b      	str	r3, [r7, #32]
   return(result);
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	f023 0301 	bic.w	r3, r3, #1
 8002dd2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	3308      	adds	r3, #8
 8002ddc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002de0:	633a      	str	r2, [r7, #48]	@ 0x30
 8002de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002de6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002de8:	e841 2300 	strex	r3, r2, [r1]
 8002dec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1e3      	bne.n	8002dbc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2220      	movs	r2, #32
 8002df8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	e853 3f00 	ldrex	r3, [r3]
 8002e14:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f023 0310 	bic.w	r3, r3, #16
 8002e1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e2a:	61fb      	str	r3, [r7, #28]
 8002e2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2e:	69b9      	ldr	r1, [r7, #24]
 8002e30:	69fa      	ldr	r2, [r7, #28]
 8002e32:	e841 2300 	strex	r3, r2, [r1]
 8002e36:	617b      	str	r3, [r7, #20]
   return(result);
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1e4      	bne.n	8002e08 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2202      	movs	r2, #2
 8002e42:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e48:	4619      	mov	r1, r3
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f85c 	bl	8002f08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e50:	e03f      	b.n	8002ed2 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00e      	beq.n	8002e7c <HAL_UART_IRQHandler+0x56c>
 8002e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d008      	beq.n	8002e7c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002e72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f853 	bl	8002f20 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e7a:	e02d      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00e      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d01c      	beq.n	8002ed6 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	4798      	blx	r3
    }
    return;
 8002ea4:	e017      	b.n	8002ed6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d012      	beq.n	8002ed8 <HAL_UART_IRQHandler+0x5c8>
 8002eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00c      	beq.n	8002ed8 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fd94 	bl	80039ec <UART_EndTransmit_IT>
    return;
 8002ec4:	e008      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002ec6:	bf00      	nop
 8002ec8:	e006      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5c8>
    return;
 8002eca:	bf00      	nop
 8002ecc:	e004      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002ece:	bf00      	nop
 8002ed0:	e002      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002ed2:	bf00      	nop
 8002ed4:	e000      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5c8>
    return;
 8002ed6:	bf00      	nop
  }

}
 8002ed8:	37e8      	adds	r7, #232	@ 0xe8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop

08002ee0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	4ba6      	ldr	r3, [pc, #664]	@ (80031f8 <UART_SetConfig+0x2c4>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	6979      	ldr	r1, [r7, #20]
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a94      	ldr	r2, [pc, #592]	@ (80031fc <UART_SetConfig+0x2c8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d120      	bne.n	8002ff2 <UART_SetConfig+0xbe>
 8002fb0:	4b93      	ldr	r3, [pc, #588]	@ (8003200 <UART_SetConfig+0x2cc>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d816      	bhi.n	8002fec <UART_SetConfig+0xb8>
 8002fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc4 <UART_SetConfig+0x90>)
 8002fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc4:	08002fd5 	.word	0x08002fd5
 8002fc8:	08002fe1 	.word	0x08002fe1
 8002fcc:	08002fdb 	.word	0x08002fdb
 8002fd0:	08002fe7 	.word	0x08002fe7
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	77fb      	strb	r3, [r7, #31]
 8002fd8:	e150      	b.n	800327c <UART_SetConfig+0x348>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	77fb      	strb	r3, [r7, #31]
 8002fde:	e14d      	b.n	800327c <UART_SetConfig+0x348>
 8002fe0:	2304      	movs	r3, #4
 8002fe2:	77fb      	strb	r3, [r7, #31]
 8002fe4:	e14a      	b.n	800327c <UART_SetConfig+0x348>
 8002fe6:	2308      	movs	r3, #8
 8002fe8:	77fb      	strb	r3, [r7, #31]
 8002fea:	e147      	b.n	800327c <UART_SetConfig+0x348>
 8002fec:	2310      	movs	r3, #16
 8002fee:	77fb      	strb	r3, [r7, #31]
 8002ff0:	e144      	b.n	800327c <UART_SetConfig+0x348>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a83      	ldr	r2, [pc, #524]	@ (8003204 <UART_SetConfig+0x2d0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d132      	bne.n	8003062 <UART_SetConfig+0x12e>
 8002ffc:	4b80      	ldr	r3, [pc, #512]	@ (8003200 <UART_SetConfig+0x2cc>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b0c      	cmp	r3, #12
 8003008:	d828      	bhi.n	800305c <UART_SetConfig+0x128>
 800300a:	a201      	add	r2, pc, #4	@ (adr r2, 8003010 <UART_SetConfig+0xdc>)
 800300c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003010:	08003045 	.word	0x08003045
 8003014:	0800305d 	.word	0x0800305d
 8003018:	0800305d 	.word	0x0800305d
 800301c:	0800305d 	.word	0x0800305d
 8003020:	08003051 	.word	0x08003051
 8003024:	0800305d 	.word	0x0800305d
 8003028:	0800305d 	.word	0x0800305d
 800302c:	0800305d 	.word	0x0800305d
 8003030:	0800304b 	.word	0x0800304b
 8003034:	0800305d 	.word	0x0800305d
 8003038:	0800305d 	.word	0x0800305d
 800303c:	0800305d 	.word	0x0800305d
 8003040:	08003057 	.word	0x08003057
 8003044:	2300      	movs	r3, #0
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e118      	b.n	800327c <UART_SetConfig+0x348>
 800304a:	2302      	movs	r3, #2
 800304c:	77fb      	strb	r3, [r7, #31]
 800304e:	e115      	b.n	800327c <UART_SetConfig+0x348>
 8003050:	2304      	movs	r3, #4
 8003052:	77fb      	strb	r3, [r7, #31]
 8003054:	e112      	b.n	800327c <UART_SetConfig+0x348>
 8003056:	2308      	movs	r3, #8
 8003058:	77fb      	strb	r3, [r7, #31]
 800305a:	e10f      	b.n	800327c <UART_SetConfig+0x348>
 800305c:	2310      	movs	r3, #16
 800305e:	77fb      	strb	r3, [r7, #31]
 8003060:	e10c      	b.n	800327c <UART_SetConfig+0x348>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a68      	ldr	r2, [pc, #416]	@ (8003208 <UART_SetConfig+0x2d4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d120      	bne.n	80030ae <UART_SetConfig+0x17a>
 800306c:	4b64      	ldr	r3, [pc, #400]	@ (8003200 <UART_SetConfig+0x2cc>)
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003072:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003076:	2b30      	cmp	r3, #48	@ 0x30
 8003078:	d013      	beq.n	80030a2 <UART_SetConfig+0x16e>
 800307a:	2b30      	cmp	r3, #48	@ 0x30
 800307c:	d814      	bhi.n	80030a8 <UART_SetConfig+0x174>
 800307e:	2b20      	cmp	r3, #32
 8003080:	d009      	beq.n	8003096 <UART_SetConfig+0x162>
 8003082:	2b20      	cmp	r3, #32
 8003084:	d810      	bhi.n	80030a8 <UART_SetConfig+0x174>
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <UART_SetConfig+0x15c>
 800308a:	2b10      	cmp	r3, #16
 800308c:	d006      	beq.n	800309c <UART_SetConfig+0x168>
 800308e:	e00b      	b.n	80030a8 <UART_SetConfig+0x174>
 8003090:	2300      	movs	r3, #0
 8003092:	77fb      	strb	r3, [r7, #31]
 8003094:	e0f2      	b.n	800327c <UART_SetConfig+0x348>
 8003096:	2302      	movs	r3, #2
 8003098:	77fb      	strb	r3, [r7, #31]
 800309a:	e0ef      	b.n	800327c <UART_SetConfig+0x348>
 800309c:	2304      	movs	r3, #4
 800309e:	77fb      	strb	r3, [r7, #31]
 80030a0:	e0ec      	b.n	800327c <UART_SetConfig+0x348>
 80030a2:	2308      	movs	r3, #8
 80030a4:	77fb      	strb	r3, [r7, #31]
 80030a6:	e0e9      	b.n	800327c <UART_SetConfig+0x348>
 80030a8:	2310      	movs	r3, #16
 80030aa:	77fb      	strb	r3, [r7, #31]
 80030ac:	e0e6      	b.n	800327c <UART_SetConfig+0x348>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a56      	ldr	r2, [pc, #344]	@ (800320c <UART_SetConfig+0x2d8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d120      	bne.n	80030fa <UART_SetConfig+0x1c6>
 80030b8:	4b51      	ldr	r3, [pc, #324]	@ (8003200 <UART_SetConfig+0x2cc>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80030c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80030c4:	d013      	beq.n	80030ee <UART_SetConfig+0x1ba>
 80030c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80030c8:	d814      	bhi.n	80030f4 <UART_SetConfig+0x1c0>
 80030ca:	2b80      	cmp	r3, #128	@ 0x80
 80030cc:	d009      	beq.n	80030e2 <UART_SetConfig+0x1ae>
 80030ce:	2b80      	cmp	r3, #128	@ 0x80
 80030d0:	d810      	bhi.n	80030f4 <UART_SetConfig+0x1c0>
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <UART_SetConfig+0x1a8>
 80030d6:	2b40      	cmp	r3, #64	@ 0x40
 80030d8:	d006      	beq.n	80030e8 <UART_SetConfig+0x1b4>
 80030da:	e00b      	b.n	80030f4 <UART_SetConfig+0x1c0>
 80030dc:	2300      	movs	r3, #0
 80030de:	77fb      	strb	r3, [r7, #31]
 80030e0:	e0cc      	b.n	800327c <UART_SetConfig+0x348>
 80030e2:	2302      	movs	r3, #2
 80030e4:	77fb      	strb	r3, [r7, #31]
 80030e6:	e0c9      	b.n	800327c <UART_SetConfig+0x348>
 80030e8:	2304      	movs	r3, #4
 80030ea:	77fb      	strb	r3, [r7, #31]
 80030ec:	e0c6      	b.n	800327c <UART_SetConfig+0x348>
 80030ee:	2308      	movs	r3, #8
 80030f0:	77fb      	strb	r3, [r7, #31]
 80030f2:	e0c3      	b.n	800327c <UART_SetConfig+0x348>
 80030f4:	2310      	movs	r3, #16
 80030f6:	77fb      	strb	r3, [r7, #31]
 80030f8:	e0c0      	b.n	800327c <UART_SetConfig+0x348>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a44      	ldr	r2, [pc, #272]	@ (8003210 <UART_SetConfig+0x2dc>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d125      	bne.n	8003150 <UART_SetConfig+0x21c>
 8003104:	4b3e      	ldr	r3, [pc, #248]	@ (8003200 <UART_SetConfig+0x2cc>)
 8003106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800310a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800310e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003112:	d017      	beq.n	8003144 <UART_SetConfig+0x210>
 8003114:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003118:	d817      	bhi.n	800314a <UART_SetConfig+0x216>
 800311a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800311e:	d00b      	beq.n	8003138 <UART_SetConfig+0x204>
 8003120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003124:	d811      	bhi.n	800314a <UART_SetConfig+0x216>
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <UART_SetConfig+0x1fe>
 800312a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800312e:	d006      	beq.n	800313e <UART_SetConfig+0x20a>
 8003130:	e00b      	b.n	800314a <UART_SetConfig+0x216>
 8003132:	2300      	movs	r3, #0
 8003134:	77fb      	strb	r3, [r7, #31]
 8003136:	e0a1      	b.n	800327c <UART_SetConfig+0x348>
 8003138:	2302      	movs	r3, #2
 800313a:	77fb      	strb	r3, [r7, #31]
 800313c:	e09e      	b.n	800327c <UART_SetConfig+0x348>
 800313e:	2304      	movs	r3, #4
 8003140:	77fb      	strb	r3, [r7, #31]
 8003142:	e09b      	b.n	800327c <UART_SetConfig+0x348>
 8003144:	2308      	movs	r3, #8
 8003146:	77fb      	strb	r3, [r7, #31]
 8003148:	e098      	b.n	800327c <UART_SetConfig+0x348>
 800314a:	2310      	movs	r3, #16
 800314c:	77fb      	strb	r3, [r7, #31]
 800314e:	e095      	b.n	800327c <UART_SetConfig+0x348>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a2f      	ldr	r2, [pc, #188]	@ (8003214 <UART_SetConfig+0x2e0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d125      	bne.n	80031a6 <UART_SetConfig+0x272>
 800315a:	4b29      	ldr	r3, [pc, #164]	@ (8003200 <UART_SetConfig+0x2cc>)
 800315c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003160:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003164:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003168:	d017      	beq.n	800319a <UART_SetConfig+0x266>
 800316a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800316e:	d817      	bhi.n	80031a0 <UART_SetConfig+0x26c>
 8003170:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003174:	d00b      	beq.n	800318e <UART_SetConfig+0x25a>
 8003176:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800317a:	d811      	bhi.n	80031a0 <UART_SetConfig+0x26c>
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <UART_SetConfig+0x254>
 8003180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003184:	d006      	beq.n	8003194 <UART_SetConfig+0x260>
 8003186:	e00b      	b.n	80031a0 <UART_SetConfig+0x26c>
 8003188:	2301      	movs	r3, #1
 800318a:	77fb      	strb	r3, [r7, #31]
 800318c:	e076      	b.n	800327c <UART_SetConfig+0x348>
 800318e:	2302      	movs	r3, #2
 8003190:	77fb      	strb	r3, [r7, #31]
 8003192:	e073      	b.n	800327c <UART_SetConfig+0x348>
 8003194:	2304      	movs	r3, #4
 8003196:	77fb      	strb	r3, [r7, #31]
 8003198:	e070      	b.n	800327c <UART_SetConfig+0x348>
 800319a:	2308      	movs	r3, #8
 800319c:	77fb      	strb	r3, [r7, #31]
 800319e:	e06d      	b.n	800327c <UART_SetConfig+0x348>
 80031a0:	2310      	movs	r3, #16
 80031a2:	77fb      	strb	r3, [r7, #31]
 80031a4:	e06a      	b.n	800327c <UART_SetConfig+0x348>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003218 <UART_SetConfig+0x2e4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d138      	bne.n	8003222 <UART_SetConfig+0x2ee>
 80031b0:	4b13      	ldr	r3, [pc, #76]	@ (8003200 <UART_SetConfig+0x2cc>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80031ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031be:	d017      	beq.n	80031f0 <UART_SetConfig+0x2bc>
 80031c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031c4:	d82a      	bhi.n	800321c <UART_SetConfig+0x2e8>
 80031c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031ca:	d00b      	beq.n	80031e4 <UART_SetConfig+0x2b0>
 80031cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031d0:	d824      	bhi.n	800321c <UART_SetConfig+0x2e8>
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <UART_SetConfig+0x2aa>
 80031d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031da:	d006      	beq.n	80031ea <UART_SetConfig+0x2b6>
 80031dc:	e01e      	b.n	800321c <UART_SetConfig+0x2e8>
 80031de:	2300      	movs	r3, #0
 80031e0:	77fb      	strb	r3, [r7, #31]
 80031e2:	e04b      	b.n	800327c <UART_SetConfig+0x348>
 80031e4:	2302      	movs	r3, #2
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	e048      	b.n	800327c <UART_SetConfig+0x348>
 80031ea:	2304      	movs	r3, #4
 80031ec:	77fb      	strb	r3, [r7, #31]
 80031ee:	e045      	b.n	800327c <UART_SetConfig+0x348>
 80031f0:	2308      	movs	r3, #8
 80031f2:	77fb      	strb	r3, [r7, #31]
 80031f4:	e042      	b.n	800327c <UART_SetConfig+0x348>
 80031f6:	bf00      	nop
 80031f8:	efff69f3 	.word	0xefff69f3
 80031fc:	40011000 	.word	0x40011000
 8003200:	40023800 	.word	0x40023800
 8003204:	40004400 	.word	0x40004400
 8003208:	40004800 	.word	0x40004800
 800320c:	40004c00 	.word	0x40004c00
 8003210:	40005000 	.word	0x40005000
 8003214:	40011400 	.word	0x40011400
 8003218:	40007800 	.word	0x40007800
 800321c:	2310      	movs	r3, #16
 800321e:	77fb      	strb	r3, [r7, #31]
 8003220:	e02c      	b.n	800327c <UART_SetConfig+0x348>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a72      	ldr	r2, [pc, #456]	@ (80033f0 <UART_SetConfig+0x4bc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d125      	bne.n	8003278 <UART_SetConfig+0x344>
 800322c:	4b71      	ldr	r3, [pc, #452]	@ (80033f4 <UART_SetConfig+0x4c0>)
 800322e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003232:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003236:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800323a:	d017      	beq.n	800326c <UART_SetConfig+0x338>
 800323c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003240:	d817      	bhi.n	8003272 <UART_SetConfig+0x33e>
 8003242:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003246:	d00b      	beq.n	8003260 <UART_SetConfig+0x32c>
 8003248:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800324c:	d811      	bhi.n	8003272 <UART_SetConfig+0x33e>
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <UART_SetConfig+0x326>
 8003252:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003256:	d006      	beq.n	8003266 <UART_SetConfig+0x332>
 8003258:	e00b      	b.n	8003272 <UART_SetConfig+0x33e>
 800325a:	2300      	movs	r3, #0
 800325c:	77fb      	strb	r3, [r7, #31]
 800325e:	e00d      	b.n	800327c <UART_SetConfig+0x348>
 8003260:	2302      	movs	r3, #2
 8003262:	77fb      	strb	r3, [r7, #31]
 8003264:	e00a      	b.n	800327c <UART_SetConfig+0x348>
 8003266:	2304      	movs	r3, #4
 8003268:	77fb      	strb	r3, [r7, #31]
 800326a:	e007      	b.n	800327c <UART_SetConfig+0x348>
 800326c:	2308      	movs	r3, #8
 800326e:	77fb      	strb	r3, [r7, #31]
 8003270:	e004      	b.n	800327c <UART_SetConfig+0x348>
 8003272:	2310      	movs	r3, #16
 8003274:	77fb      	strb	r3, [r7, #31]
 8003276:	e001      	b.n	800327c <UART_SetConfig+0x348>
 8003278:	2310      	movs	r3, #16
 800327a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003284:	d15b      	bne.n	800333e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003286:	7ffb      	ldrb	r3, [r7, #31]
 8003288:	2b08      	cmp	r3, #8
 800328a:	d828      	bhi.n	80032de <UART_SetConfig+0x3aa>
 800328c:	a201      	add	r2, pc, #4	@ (adr r2, 8003294 <UART_SetConfig+0x360>)
 800328e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003292:	bf00      	nop
 8003294:	080032b9 	.word	0x080032b9
 8003298:	080032c1 	.word	0x080032c1
 800329c:	080032c9 	.word	0x080032c9
 80032a0:	080032df 	.word	0x080032df
 80032a4:	080032cf 	.word	0x080032cf
 80032a8:	080032df 	.word	0x080032df
 80032ac:	080032df 	.word	0x080032df
 80032b0:	080032df 	.word	0x080032df
 80032b4:	080032d7 	.word	0x080032d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b8:	f7fe fdbe 	bl	8001e38 <HAL_RCC_GetPCLK1Freq>
 80032bc:	61b8      	str	r0, [r7, #24]
        break;
 80032be:	e013      	b.n	80032e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032c0:	f7fe fdce 	bl	8001e60 <HAL_RCC_GetPCLK2Freq>
 80032c4:	61b8      	str	r0, [r7, #24]
        break;
 80032c6:	e00f      	b.n	80032e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032c8:	4b4b      	ldr	r3, [pc, #300]	@ (80033f8 <UART_SetConfig+0x4c4>)
 80032ca:	61bb      	str	r3, [r7, #24]
        break;
 80032cc:	e00c      	b.n	80032e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ce:	f7fe fce1 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 80032d2:	61b8      	str	r0, [r7, #24]
        break;
 80032d4:	e008      	b.n	80032e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032da:	61bb      	str	r3, [r7, #24]
        break;
 80032dc:	e004      	b.n	80032e8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	77bb      	strb	r3, [r7, #30]
        break;
 80032e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d074      	beq.n	80033d8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	005a      	lsls	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	441a      	add	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003302:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	2b0f      	cmp	r3, #15
 8003308:	d916      	bls.n	8003338 <UART_SetConfig+0x404>
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003310:	d212      	bcs.n	8003338 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	b29b      	uxth	r3, r3
 8003316:	f023 030f 	bic.w	r3, r3, #15
 800331a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	085b      	lsrs	r3, r3, #1
 8003320:	b29b      	uxth	r3, r3
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	b29a      	uxth	r2, r3
 8003328:	89fb      	ldrh	r3, [r7, #14]
 800332a:	4313      	orrs	r3, r2
 800332c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	89fa      	ldrh	r2, [r7, #14]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	e04f      	b.n	80033d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	77bb      	strb	r3, [r7, #30]
 800333c:	e04c      	b.n	80033d8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800333e:	7ffb      	ldrb	r3, [r7, #31]
 8003340:	2b08      	cmp	r3, #8
 8003342:	d828      	bhi.n	8003396 <UART_SetConfig+0x462>
 8003344:	a201      	add	r2, pc, #4	@ (adr r2, 800334c <UART_SetConfig+0x418>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	08003371 	.word	0x08003371
 8003350:	08003379 	.word	0x08003379
 8003354:	08003381 	.word	0x08003381
 8003358:	08003397 	.word	0x08003397
 800335c:	08003387 	.word	0x08003387
 8003360:	08003397 	.word	0x08003397
 8003364:	08003397 	.word	0x08003397
 8003368:	08003397 	.word	0x08003397
 800336c:	0800338f 	.word	0x0800338f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003370:	f7fe fd62 	bl	8001e38 <HAL_RCC_GetPCLK1Freq>
 8003374:	61b8      	str	r0, [r7, #24]
        break;
 8003376:	e013      	b.n	80033a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003378:	f7fe fd72 	bl	8001e60 <HAL_RCC_GetPCLK2Freq>
 800337c:	61b8      	str	r0, [r7, #24]
        break;
 800337e:	e00f      	b.n	80033a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003380:	4b1d      	ldr	r3, [pc, #116]	@ (80033f8 <UART_SetConfig+0x4c4>)
 8003382:	61bb      	str	r3, [r7, #24]
        break;
 8003384:	e00c      	b.n	80033a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003386:	f7fe fc85 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 800338a:	61b8      	str	r0, [r7, #24]
        break;
 800338c:	e008      	b.n	80033a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800338e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003392:	61bb      	str	r3, [r7, #24]
        break;
 8003394:	e004      	b.n	80033a0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	77bb      	strb	r3, [r7, #30]
        break;
 800339e:	bf00      	nop
    }

    if (pclk != 0U)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d018      	beq.n	80033d8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	085a      	lsrs	r2, r3, #1
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	441a      	add	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	2b0f      	cmp	r3, #15
 80033be:	d909      	bls.n	80033d4 <UART_SetConfig+0x4a0>
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033c6:	d205      	bcs.n	80033d4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	e001      	b.n	80033d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80033e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3720      	adds	r7, #32
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40007c00 	.word	0x40007c00
 80033f4:	40023800 	.word	0x40023800
 80033f8:	00f42400 	.word	0x00f42400

080033fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01a      	beq.n	8003512 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034fa:	d10a      	bne.n	8003512 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	605a      	str	r2, [r3, #4]
  }
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b098      	sub	sp, #96	@ 0x60
 8003544:	af02      	add	r7, sp, #8
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003550:	f7fd fbe2 	bl	8000d18 <HAL_GetTick>
 8003554:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b08      	cmp	r3, #8
 8003562:	d12e      	bne.n	80035c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003564:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800356c:	2200      	movs	r2, #0
 800356e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f88c 	bl	8003690 <UART_WaitOnFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d021      	beq.n	80035c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003586:	e853 3f00 	ldrex	r3, [r3]
 800358a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800358c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800358e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003592:	653b      	str	r3, [r7, #80]	@ 0x50
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	461a      	mov	r2, r3
 800359a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800359c:	647b      	str	r3, [r7, #68]	@ 0x44
 800359e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035a4:	e841 2300 	strex	r3, r2, [r1]
 80035a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1e6      	bne.n	800357e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2220      	movs	r2, #32
 80035b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e062      	b.n	8003688 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d149      	bne.n	8003664 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035d8:	2200      	movs	r2, #0
 80035da:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f856 	bl	8003690 <UART_WaitOnFlagUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d03c      	beq.n	8003664 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f2:	e853 3f00 	ldrex	r3, [r3]
 80035f6:	623b      	str	r3, [r7, #32]
   return(result);
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	461a      	mov	r2, r3
 8003606:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003608:	633b      	str	r3, [r7, #48]	@ 0x30
 800360a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800360e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003610:	e841 2300 	strex	r3, r2, [r1]
 8003614:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e6      	bne.n	80035ea <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3308      	adds	r3, #8
 8003622:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	e853 3f00 	ldrex	r3, [r3]
 800362a:	60fb      	str	r3, [r7, #12]
   return(result);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0301 	bic.w	r3, r3, #1
 8003632:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3308      	adds	r3, #8
 800363a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800363c:	61fa      	str	r2, [r7, #28]
 800363e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003640:	69b9      	ldr	r1, [r7, #24]
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	e841 2300 	strex	r3, r2, [r1]
 8003648:	617b      	str	r3, [r7, #20]
   return(result);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e5      	bne.n	800361c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2220      	movs	r2, #32
 8003654:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e011      	b.n	8003688 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2220      	movs	r2, #32
 800366e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3758      	adds	r7, #88	@ 0x58
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	4613      	mov	r3, r2
 800369e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a0:	e04f      	b.n	8003742 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036a8:	d04b      	beq.n	8003742 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036aa:	f7fd fb35 	bl	8000d18 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d302      	bcc.n	80036c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e04e      	b.n	8003762 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d037      	beq.n	8003742 <UART_WaitOnFlagUntilTimeout+0xb2>
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b80      	cmp	r3, #128	@ 0x80
 80036d6:	d034      	beq.n	8003742 <UART_WaitOnFlagUntilTimeout+0xb2>
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b40      	cmp	r3, #64	@ 0x40
 80036dc:	d031      	beq.n	8003742 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d110      	bne.n	800370e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2208      	movs	r2, #8
 80036f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 f8ff 	bl	80038f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2208      	movs	r2, #8
 80036fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e029      	b.n	8003762 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003718:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800371c:	d111      	bne.n	8003742 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003726:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f8e5 	bl	80038f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2220      	movs	r2, #32
 8003732:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e00f      	b.n	8003762 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69da      	ldr	r2, [r3, #28]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4013      	ands	r3, r2
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	429a      	cmp	r2, r3
 8003750:	bf0c      	ite	eq
 8003752:	2301      	moveq	r3, #1
 8003754:	2300      	movne	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	429a      	cmp	r2, r3
 800375e:	d0a0      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800376c:	b480      	push	{r7}
 800376e:	b097      	sub	sp, #92	@ 0x5c
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	4613      	mov	r3, r2
 8003778:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	88fa      	ldrh	r2, [r7, #6]
 8003784:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	88fa      	ldrh	r2, [r7, #6]
 800378c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800379e:	d10e      	bne.n	80037be <UART_Start_Receive_IT+0x52>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d105      	bne.n	80037b4 <UART_Start_Receive_IT+0x48>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80037ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80037b2:	e02d      	b.n	8003810 <UART_Start_Receive_IT+0xa4>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	22ff      	movs	r2, #255	@ 0xff
 80037b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80037bc:	e028      	b.n	8003810 <UART_Start_Receive_IT+0xa4>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10d      	bne.n	80037e2 <UART_Start_Receive_IT+0x76>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d104      	bne.n	80037d8 <UART_Start_Receive_IT+0x6c>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	22ff      	movs	r2, #255	@ 0xff
 80037d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80037d6:	e01b      	b.n	8003810 <UART_Start_Receive_IT+0xa4>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	227f      	movs	r2, #127	@ 0x7f
 80037dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80037e0:	e016      	b.n	8003810 <UART_Start_Receive_IT+0xa4>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037ea:	d10d      	bne.n	8003808 <UART_Start_Receive_IT+0x9c>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d104      	bne.n	80037fe <UART_Start_Receive_IT+0x92>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	227f      	movs	r2, #127	@ 0x7f
 80037f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80037fc:	e008      	b.n	8003810 <UART_Start_Receive_IT+0xa4>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	223f      	movs	r2, #63	@ 0x3f
 8003802:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003806:	e003      	b.n	8003810 <UART_Start_Receive_IT+0xa4>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2222      	movs	r2, #34	@ 0x22
 800381c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3308      	adds	r3, #8
 8003826:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800382a:	e853 3f00 	ldrex	r3, [r3]
 800382e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	657b      	str	r3, [r7, #84]	@ 0x54
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3308      	adds	r3, #8
 800383e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003840:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003842:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003844:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003846:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003848:	e841 2300 	strex	r3, r2, [r1]
 800384c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800384e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1e5      	bne.n	8003820 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800385c:	d107      	bne.n	800386e <UART_Start_Receive_IT+0x102>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d103      	bne.n	800386e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4a21      	ldr	r2, [pc, #132]	@ (80038f0 <UART_Start_Receive_IT+0x184>)
 800386a:	669a      	str	r2, [r3, #104]	@ 0x68
 800386c:	e002      	b.n	8003874 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4a20      	ldr	r2, [pc, #128]	@ (80038f4 <UART_Start_Receive_IT+0x188>)
 8003872:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d019      	beq.n	80038b0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003884:	e853 3f00 	ldrex	r3, [r3]
 8003888:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800388a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003890:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800389a:	637b      	str	r3, [r7, #52]	@ 0x34
 800389c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80038a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1e6      	bne.n	800387c <UART_Start_Receive_IT+0x110>
 80038ae:	e018      	b.n	80038e2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	e853 3f00 	ldrex	r3, [r3]
 80038bc:	613b      	str	r3, [r7, #16]
   return(result);
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f043 0320 	orr.w	r3, r3, #32
 80038c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038ce:	623b      	str	r3, [r7, #32]
 80038d0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d2:	69f9      	ldr	r1, [r7, #28]
 80038d4:	6a3a      	ldr	r2, [r7, #32]
 80038d6:	e841 2300 	strex	r3, r2, [r1]
 80038da:	61bb      	str	r3, [r7, #24]
   return(result);
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1e6      	bne.n	80038b0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	375c      	adds	r7, #92	@ 0x5c
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	08003be9 	.word	0x08003be9
 80038f4:	08003a41 	.word	0x08003a41

080038f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b095      	sub	sp, #84	@ 0x54
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800390e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003910:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003914:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800391e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003920:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003922:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003924:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800392c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e6      	bne.n	8003900 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3308      	adds	r3, #8
 8003938:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	61fb      	str	r3, [r7, #28]
   return(result);
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	f023 0301 	bic.w	r3, r3, #1
 8003948:	64bb      	str	r3, [r7, #72]	@ 0x48
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3308      	adds	r3, #8
 8003950:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003952:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003954:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003958:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e5      	bne.n	8003932 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800396a:	2b01      	cmp	r3, #1
 800396c:	d118      	bne.n	80039a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	e853 3f00 	ldrex	r3, [r3]
 800397a:	60bb      	str	r3, [r7, #8]
   return(result);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f023 0310 	bic.w	r3, r3, #16
 8003982:	647b      	str	r3, [r7, #68]	@ 0x44
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	461a      	mov	r2, r3
 800398a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800398c:	61bb      	str	r3, [r7, #24]
 800398e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003990:	6979      	ldr	r1, [r7, #20]
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	e841 2300 	strex	r3, r2, [r1]
 8003998:	613b      	str	r3, [r7, #16]
   return(result);
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1e6      	bne.n	800396e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80039b4:	bf00      	nop
 80039b6:	3754      	adds	r7, #84	@ 0x54
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f7ff fa88 	bl	8002ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	e853 3f00 	ldrex	r3, [r3]
 8003a00:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a08:	61fb      	str	r3, [r7, #28]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	61bb      	str	r3, [r7, #24]
 8003a14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a16:	6979      	ldr	r1, [r7, #20]
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	e841 2300 	strex	r3, r2, [r1]
 8003a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1e6      	bne.n	80039f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff fa54 	bl	8002ee0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a38:	bf00      	nop
 8003a3a:	3720      	adds	r7, #32
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b09c      	sub	sp, #112	@ 0x70
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003a4e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a58:	2b22      	cmp	r3, #34	@ 0x22
 8003a5a:	f040 80b9 	bne.w	8003bd0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a64:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003a68:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003a6c:	b2d9      	uxtb	r1, r3
 8003a6e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a78:	400a      	ands	r2, r1
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f040 809c 	bne.w	8003be0 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ab8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003abc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ac6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ac8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003acc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ad4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e6      	bne.n	8003aa8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3308      	adds	r3, #8
 8003ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aec:	f023 0301 	bic.w	r3, r3, #1
 8003af0:	667b      	str	r3, [r7, #100]	@ 0x64
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3308      	adds	r3, #8
 8003af8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003afa:	647a      	str	r2, [r7, #68]	@ 0x44
 8003afc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e5      	bne.n	8003ada <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d018      	beq.n	8003b62 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b44:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b50:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b56:	e841 2300 	strex	r3, r2, [r1]
 8003b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1e6      	bne.n	8003b30 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d12e      	bne.n	8003bc8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	e853 3f00 	ldrex	r3, [r3]
 8003b7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f023 0310 	bic.w	r3, r3, #16
 8003b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b8e:	61fb      	str	r3, [r7, #28]
 8003b90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b92:	69b9      	ldr	r1, [r7, #24]
 8003b94:	69fa      	ldr	r2, [r7, #28]
 8003b96:	e841 2300 	strex	r3, r2, [r1]
 8003b9a:	617b      	str	r3, [r7, #20]
   return(result);
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1e6      	bne.n	8003b70 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d103      	bne.n	8003bb8 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2210      	movs	r2, #16
 8003bb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff f9a1 	bl	8002f08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003bc6:	e00b      	b.n	8003be0 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7fc fd15 	bl	80005f8 <HAL_UART_RxCpltCallback>
}
 8003bce:	e007      	b.n	8003be0 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0208 	orr.w	r2, r2, #8
 8003bde:	619a      	str	r2, [r3, #24]
}
 8003be0:	bf00      	nop
 8003be2:	3770      	adds	r7, #112	@ 0x70
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b09c      	sub	sp, #112	@ 0x70
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003bf6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c00:	2b22      	cmp	r3, #34	@ 0x22
 8003c02:	f040 80b9 	bne.w	8003d78 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c14:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003c16:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003c1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003c1e:	4013      	ands	r3, r2
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c24:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c2a:	1c9a      	adds	r2, r3, #2
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f040 809c 	bne.w	8003d88 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c58:	e853 3f00 	ldrex	r3, [r3]
 8003c5c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003c5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c64:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c70:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c72:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003c74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c76:	e841 2300 	strex	r3, r2, [r1]
 8003c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003c7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e6      	bne.n	8003c50 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3308      	adds	r3, #8
 8003c88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c94:	f023 0301 	bic.w	r3, r3, #1
 8003c98:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3308      	adds	r3, #8
 8003ca0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003ca2:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ca8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003caa:	e841 2300 	strex	r3, r2, [r1]
 8003cae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1e5      	bne.n	8003c82 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d018      	beq.n	8003d0a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003cec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cf8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1e6      	bne.n	8003cd8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d12e      	bne.n	8003d70 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	e853 3f00 	ldrex	r3, [r3]
 8003d24:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f023 0310 	bic.w	r3, r3, #16
 8003d2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	6979      	ldr	r1, [r7, #20]
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	613b      	str	r3, [r7, #16]
   return(result);
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e6      	bne.n	8003d18 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b10      	cmp	r3, #16
 8003d56:	d103      	bne.n	8003d60 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2210      	movs	r2, #16
 8003d5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003d66:	4619      	mov	r1, r3
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff f8cd 	bl	8002f08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d6e:	e00b      	b.n	8003d88 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7fc fc41 	bl	80005f8 <HAL_UART_RxCpltCallback>
}
 8003d76:	e007      	b.n	8003d88 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0208 	orr.w	r2, r2, #8
 8003d86:	619a      	str	r2, [r3, #24]
}
 8003d88:	bf00      	nop
 8003d8a:	3770      	adds	r7, #112	@ 0x70
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <memset>:
 8003d90:	4402      	add	r2, r0
 8003d92:	4603      	mov	r3, r0
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d100      	bne.n	8003d9a <memset+0xa>
 8003d98:	4770      	bx	lr
 8003d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d9e:	e7f9      	b.n	8003d94 <memset+0x4>

08003da0 <__libc_init_array>:
 8003da0:	b570      	push	{r4, r5, r6, lr}
 8003da2:	4d0d      	ldr	r5, [pc, #52]	@ (8003dd8 <__libc_init_array+0x38>)
 8003da4:	4c0d      	ldr	r4, [pc, #52]	@ (8003ddc <__libc_init_array+0x3c>)
 8003da6:	1b64      	subs	r4, r4, r5
 8003da8:	10a4      	asrs	r4, r4, #2
 8003daa:	2600      	movs	r6, #0
 8003dac:	42a6      	cmp	r6, r4
 8003dae:	d109      	bne.n	8003dc4 <__libc_init_array+0x24>
 8003db0:	4d0b      	ldr	r5, [pc, #44]	@ (8003de0 <__libc_init_array+0x40>)
 8003db2:	4c0c      	ldr	r4, [pc, #48]	@ (8003de4 <__libc_init_array+0x44>)
 8003db4:	f000 f818 	bl	8003de8 <_init>
 8003db8:	1b64      	subs	r4, r4, r5
 8003dba:	10a4      	asrs	r4, r4, #2
 8003dbc:	2600      	movs	r6, #0
 8003dbe:	42a6      	cmp	r6, r4
 8003dc0:	d105      	bne.n	8003dce <__libc_init_array+0x2e>
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}
 8003dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dc8:	4798      	blx	r3
 8003dca:	3601      	adds	r6, #1
 8003dcc:	e7ee      	b.n	8003dac <__libc_init_array+0xc>
 8003dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dd2:	4798      	blx	r3
 8003dd4:	3601      	adds	r6, #1
 8003dd6:	e7f2      	b.n	8003dbe <__libc_init_array+0x1e>
 8003dd8:	08003e48 	.word	0x08003e48
 8003ddc:	08003e48 	.word	0x08003e48
 8003de0:	08003e48 	.word	0x08003e48
 8003de4:	08003e4c 	.word	0x08003e4c

08003de8 <_init>:
 8003de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dea:	bf00      	nop
 8003dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dee:	bc08      	pop	{r3}
 8003df0:	469e      	mov	lr, r3
 8003df2:	4770      	bx	lr

08003df4 <_fini>:
 8003df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df6:	bf00      	nop
 8003df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dfa:	bc08      	pop	{r3}
 8003dfc:	469e      	mov	lr, r3
 8003dfe:	4770      	bx	lr
