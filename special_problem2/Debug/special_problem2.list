
special_problem2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b74  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004d74  08004d74  00005d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004df0  08004df0  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004df0  08004df0  00005df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004df8  08004df8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004df8  08004df8  00005df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004dfc  08004dfc  00005dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004e00  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  2000005c  08004e5c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08004e5c  00006308  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2b5  00000000  00000000  0000608a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002402  00000000  00000000  0001333f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  00015748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000743  00000000  00000000  000160d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027fa7  00000000  00000000  0001681b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0c4  00000000  00000000  0003e7c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6952  00000000  00000000  0004c886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001431d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a30  00000000  00000000  0014321c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00145c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	08004d5c 	.word	0x08004d5c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	08004d5c 	.word	0x08004d5c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]

  hadc1.Instance = ADC1;
 80005f2:	4b52      	ldr	r3, [pc, #328]	@ (800073c <MX_ADC1_Init+0x15c>)
 80005f4:	4a52      	ldr	r2, [pc, #328]	@ (8000740 <MX_ADC1_Init+0x160>)
 80005f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005f8:	4b50      	ldr	r3, [pc, #320]	@ (800073c <MX_ADC1_Init+0x15c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fe:	4b4f      	ldr	r3, [pc, #316]	@ (800073c <MX_ADC1_Init+0x15c>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE; // Enable scan mode for multiple channels
 8000604:	4b4d      	ldr	r3, [pc, #308]	@ (800073c <MX_ADC1_Init+0x15c>)
 8000606:	2201      	movs	r2, #1
 8000608:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800060a:	4b4c      	ldr	r3, [pc, #304]	@ (800073c <MX_ADC1_Init+0x15c>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000610:	4b4a      	ldr	r3, [pc, #296]	@ (800073c <MX_ADC1_Init+0x15c>)
 8000612:	2200      	movs	r2, #0
 8000614:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000618:	4b48      	ldr	r3, [pc, #288]	@ (800073c <MX_ADC1_Init+0x15c>)
 800061a:	2200      	movs	r2, #0
 800061c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061e:	4b47      	ldr	r3, [pc, #284]	@ (800073c <MX_ADC1_Init+0x15c>)
 8000620:	4a48      	ldr	r2, [pc, #288]	@ (8000744 <MX_ADC1_Init+0x164>)
 8000622:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000624:	4b45      	ldr	r3, [pc, #276]	@ (800073c <MX_ADC1_Init+0x15c>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;  // Set number of conversions to 8
 800062a:	4b44      	ldr	r3, [pc, #272]	@ (800073c <MX_ADC1_Init+0x15c>)
 800062c:	2208      	movs	r2, #8
 800062e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;  // Enable DMA continuous requests
 8000630:	4b42      	ldr	r3, [pc, #264]	@ (800073c <MX_ADC1_Init+0x15c>)
 8000632:	2201      	movs	r2, #1
 8000634:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV; // End of conversion after full sequence
 8000638:	4b40      	ldr	r3, [pc, #256]	@ (800073c <MX_ADC1_Init+0x15c>)
 800063a:	2200      	movs	r2, #0
 800063c:	615a      	str	r2, [r3, #20]

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063e:	483f      	ldr	r0, [pc, #252]	@ (800073c <MX_ADC1_Init+0x15c>)
 8000640:	f000 fcbe 	bl	8000fc0 <HAL_ADC_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800064a:	f000 fac9 	bl	8000be0 <Error_Handler>
  }

  // Configure ADC channels (IN0 to IN6, IN8)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]

  // Channel 0 (PA0)
  sConfig.Channel = ADC_CHANNEL_0;
 8000652:	2300      	movs	r3, #0
 8000654:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000656:	2301      	movs	r3, #1
 8000658:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065a:	463b      	mov	r3, r7
 800065c:	4619      	mov	r1, r3
 800065e:	4837      	ldr	r0, [pc, #220]	@ (800073c <MX_ADC1_Init+0x15c>)
 8000660:	f000 ff10 	bl	8001484 <HAL_ADC_ConfigChannel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800066a:	f000 fab9 	bl	8000be0 <Error_Handler>
  }

  // Channel 1 (PA1)
  sConfig.Channel = ADC_CHANNEL_1;
 800066e:	2301      	movs	r3, #1
 8000670:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000672:	2302      	movs	r3, #2
 8000674:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000676:	463b      	mov	r3, r7
 8000678:	4619      	mov	r1, r3
 800067a:	4830      	ldr	r0, [pc, #192]	@ (800073c <MX_ADC1_Init+0x15c>)
 800067c:	f000 ff02 	bl	8001484 <HAL_ADC_ConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000686:	f000 faab 	bl	8000be0 <Error_Handler>
  }

  // Channel 2 (PA2)
  sConfig.Channel = ADC_CHANNEL_2;
 800068a:	2302      	movs	r3, #2
 800068c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800068e:	2303      	movs	r3, #3
 8000690:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000692:	463b      	mov	r3, r7
 8000694:	4619      	mov	r1, r3
 8000696:	4829      	ldr	r0, [pc, #164]	@ (800073c <MX_ADC1_Init+0x15c>)
 8000698:	f000 fef4 	bl	8001484 <HAL_ADC_ConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80006a2:	f000 fa9d 	bl	8000be0 <Error_Handler>
  }

  // Channel 3 (PA3)
  sConfig.Channel = ADC_CHANNEL_3;
 80006a6:	2303      	movs	r3, #3
 80006a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006aa:	2304      	movs	r3, #4
 80006ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ae:	463b      	mov	r3, r7
 80006b0:	4619      	mov	r1, r3
 80006b2:	4822      	ldr	r0, [pc, #136]	@ (800073c <MX_ADC1_Init+0x15c>)
 80006b4:	f000 fee6 	bl	8001484 <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006be:	f000 fa8f 	bl	8000be0 <Error_Handler>
  }

  // Channel 4 (PA4)
  sConfig.Channel = ADC_CHANNEL_4;
 80006c2:	2304      	movs	r3, #4
 80006c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80006c6:	2305      	movs	r3, #5
 80006c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ca:	463b      	mov	r3, r7
 80006cc:	4619      	mov	r1, r3
 80006ce:	481b      	ldr	r0, [pc, #108]	@ (800073c <MX_ADC1_Init+0x15c>)
 80006d0:	f000 fed8 	bl	8001484 <HAL_ADC_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80006da:	f000 fa81 	bl	8000be0 <Error_Handler>
  }

  // Channel 5 (PA5)
  sConfig.Channel = ADC_CHANNEL_5;
 80006de:	2305      	movs	r3, #5
 80006e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80006e2:	2306      	movs	r3, #6
 80006e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e6:	463b      	mov	r3, r7
 80006e8:	4619      	mov	r1, r3
 80006ea:	4814      	ldr	r0, [pc, #80]	@ (800073c <MX_ADC1_Init+0x15c>)
 80006ec:	f000 feca 	bl	8001484 <HAL_ADC_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80006f6:	f000 fa73 	bl	8000be0 <Error_Handler>
  }

  // Channel 6 (PA6)
  sConfig.Channel = ADC_CHANNEL_6;
 80006fa:	2306      	movs	r3, #6
 80006fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80006fe:	2307      	movs	r3, #7
 8000700:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	4619      	mov	r1, r3
 8000706:	480d      	ldr	r0, [pc, #52]	@ (800073c <MX_ADC1_Init+0x15c>)
 8000708:	f000 febc 	bl	8001484 <HAL_ADC_ConfigChannel>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8000712:	f000 fa65 	bl	8000be0 <Error_Handler>
  }

  // Channel 8 (PB0)
  sConfig.Channel = ADC_CHANNEL_8;
 8000716:	2308      	movs	r3, #8
 8000718:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800071a:	2308      	movs	r3, #8
 800071c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071e:	463b      	mov	r3, r7
 8000720:	4619      	mov	r1, r3
 8000722:	4806      	ldr	r0, [pc, #24]	@ (800073c <MX_ADC1_Init+0x15c>)
 8000724:	f000 feae 	bl	8001484 <HAL_ADC_ConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800072e:	f000 fa57 	bl	8000be0 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000078 	.word	0x20000078
 8000740:	40012000 	.word	0x40012000
 8000744:	0f000001 	.word	0x0f000001

08000748 <HAL_ADC_MspInit>:


void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	@ 0x28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a3d      	ldr	r2, [pc, #244]	@ (800085c <HAL_ADC_MspInit+0x114>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d173      	bne.n	8000852 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800076a:	4b3d      	ldr	r3, [pc, #244]	@ (8000860 <HAL_ADC_MspInit+0x118>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076e:	4a3c      	ldr	r2, [pc, #240]	@ (8000860 <HAL_ADC_MspInit+0x118>)
 8000770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000774:	6453      	str	r3, [r2, #68]	@ 0x44
 8000776:	4b3a      	ldr	r3, [pc, #232]	@ (8000860 <HAL_ADC_MspInit+0x118>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800077a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b37      	ldr	r3, [pc, #220]	@ (8000860 <HAL_ADC_MspInit+0x118>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a36      	ldr	r2, [pc, #216]	@ (8000860 <HAL_ADC_MspInit+0x118>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b34      	ldr	r3, [pc, #208]	@ (8000860 <HAL_ADC_MspInit+0x118>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	4b31      	ldr	r3, [pc, #196]	@ (8000860 <HAL_ADC_MspInit+0x118>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a30      	ldr	r2, [pc, #192]	@ (8000860 <HAL_ADC_MspInit+0x118>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000860 <HAL_ADC_MspInit+0x118>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007b2:	237f      	movs	r3, #127	@ 0x7f
 80007b4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b6:	2303      	movs	r3, #3
 80007b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	4827      	ldr	r0, [pc, #156]	@ (8000864 <HAL_ADC_MspInit+0x11c>)
 80007c6:	f001 fe3b 	bl	8002440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ca:	2301      	movs	r3, #1
 80007cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ce:	2303      	movs	r3, #3
 80007d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	4822      	ldr	r0, [pc, #136]	@ (8000868 <HAL_ADC_MspInit+0x120>)
 80007de:	f001 fe2f 	bl	8002440 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80007e2:	4b22      	ldr	r3, [pc, #136]	@ (800086c <HAL_ADC_MspInit+0x124>)
 80007e4:	4a22      	ldr	r2, [pc, #136]	@ (8000870 <HAL_ADC_MspInit+0x128>)
 80007e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80007e8:	4b20      	ldr	r3, [pc, #128]	@ (800086c <HAL_ADC_MspInit+0x124>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ee:	4b1f      	ldr	r3, [pc, #124]	@ (800086c <HAL_ADC_MspInit+0x124>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <HAL_ADC_MspInit+0x124>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007fa:	4b1c      	ldr	r3, [pc, #112]	@ (800086c <HAL_ADC_MspInit+0x124>)
 80007fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000800:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <HAL_ADC_MspInit+0x124>)
 8000804:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000808:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800080a:	4b18      	ldr	r3, [pc, #96]	@ (800086c <HAL_ADC_MspInit+0x124>)
 800080c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000810:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000812:	4b16      	ldr	r3, [pc, #88]	@ (800086c <HAL_ADC_MspInit+0x124>)
 8000814:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000818:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <HAL_ADC_MspInit+0x124>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <HAL_ADC_MspInit+0x124>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000826:	4811      	ldr	r0, [pc, #68]	@ (800086c <HAL_ADC_MspInit+0x124>)
 8000828:	f001 fa92 	bl	8001d50 <HAL_DMA_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8000832:	f000 f9d5 	bl	8000be0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a0c      	ldr	r2, [pc, #48]	@ (800086c <HAL_ADC_MspInit+0x124>)
 800083a:	639a      	str	r2, [r3, #56]	@ 0x38
 800083c:	4a0b      	ldr	r2, [pc, #44]	@ (800086c <HAL_ADC_MspInit+0x124>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	2012      	movs	r0, #18
 8000848:	f001 f9d3 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800084c:	2012      	movs	r0, #18
 800084e:	f001 f9ec 	bl	8001c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000852:	bf00      	nop
 8000854:	3728      	adds	r7, #40	@ 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40012000 	.word	0x40012000
 8000860:	40023800 	.word	0x40023800
 8000864:	40020000 	.word	0x40020000
 8000868:	40020400 	.word	0x40020400
 800086c:	200000c0 	.word	0x200000c0
 8000870:	40026410 	.word	0x40026410

08000874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
    // DMA controller clock enable
    __HAL_RCC_DMA2_CLK_ENABLE();
 800087a:	4b20      	ldr	r3, [pc, #128]	@ (80008fc <MX_DMA_Init+0x88>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a1f      	ldr	r2, [pc, #124]	@ (80008fc <MX_DMA_Init+0x88>)
 8000880:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b1d      	ldr	r3, [pc, #116]	@ (80008fc <MX_DMA_Init+0x88>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

    // ADC1 DMA Init
    hdma_adc1.Instance = DMA2_Stream1;  // Make sure the correct stream is used
 8000892:	4b1b      	ldr	r3, [pc, #108]	@ (8000900 <MX_DMA_Init+0x8c>)
 8000894:	4a1b      	ldr	r2, [pc, #108]	@ (8000904 <MX_DMA_Init+0x90>)
 8000896:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000898:	4b19      	ldr	r3, [pc, #100]	@ (8000900 <MX_DMA_Init+0x8c>)
 800089a:	2200      	movs	r2, #0
 800089c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800089e:	4b18      	ldr	r3, [pc, #96]	@ (8000900 <MX_DMA_Init+0x8c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a4:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <MX_DMA_Init+0x8c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008aa:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <MX_DMA_Init+0x8c>)
 80008ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008b2:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <MX_DMA_Init+0x8c>)
 80008b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <MX_DMA_Init+0x8c>)
 80008bc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <MX_DMA_Init+0x8c>)
 80008c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000900 <MX_DMA_Init+0x8c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <MX_DMA_Init+0x8c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008d6:	480a      	ldr	r0, [pc, #40]	@ (8000900 <MX_DMA_Init+0x8c>)
 80008d8:	f001 fa3a 	bl	8001d50 <HAL_DMA_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_DMA_Init+0x72>
    {
        Error_Handler();
 80008e2:	f000 f97d 	bl	8000be0 <Error_Handler>
    }

    // Link DMA handle to ADC1
    __HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 80008e6:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <MX_DMA_Init+0x94>)
 80008e8:	4a05      	ldr	r2, [pc, #20]	@ (8000900 <MX_DMA_Init+0x8c>)
 80008ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80008ec:	4b04      	ldr	r3, [pc, #16]	@ (8000900 <MX_DMA_Init+0x8c>)
 80008ee:	4a06      	ldr	r2, [pc, #24]	@ (8000908 <MX_DMA_Init+0x94>)
 80008f0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	200000c0 	.word	0x200000c0
 8000904:	40026428 	.word	0x40026428
 8000908:	20000078 	.word	0x20000078

0800090c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b1d      	ldr	r3, [pc, #116]	@ (8000998 <MX_GPIO_Init+0x8c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a1c      	ldr	r2, [pc, #112]	@ (8000998 <MX_GPIO_Init+0x8c>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <MX_GPIO_Init+0x8c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <MX_GPIO_Init+0x8c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a16      	ldr	r2, [pc, #88]	@ (8000998 <MX_GPIO_Init+0x8c>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <MX_GPIO_Init+0x8c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <MX_GPIO_Init+0x8c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a10      	ldr	r2, [pc, #64]	@ (8000998 <MX_GPIO_Init+0x8c>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <MX_GPIO_Init+0x8c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2180      	movs	r1, #128	@ 0x80
 800096e:	480b      	ldr	r0, [pc, #44]	@ (800099c <MX_GPIO_Init+0x90>)
 8000970:	f001 ff12 	bl	8002798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000974:	2380      	movs	r3, #128	@ 0x80
 8000976:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	4619      	mov	r1, r3
 800098a:	4804      	ldr	r0, [pc, #16]	@ (800099c <MX_GPIO_Init+0x90>)
 800098c:	f001 fd58 	bl	8002440 <HAL_GPIO_Init>

}
 8000990:	bf00      	nop
 8000992:	3720      	adds	r7, #32
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	40020400 	.word	0x40020400

080009a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009a6:	f000 f8ef 	bl	8000b88 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009aa:	f000 fa88 	bl	8000ebe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ae:	f000 f829 	bl	8000a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b2:	f7ff ffab 	bl	800090c <MX_GPIO_Init>
  MX_DMA_Init();
 80009b6:	f7ff ff5d 	bl	8000874 <MX_DMA_Init>
  MX_ADC1_Init();
 80009ba:	f7ff fe11 	bl	80005e0 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80009be:	f000 f9c5 	bl	8000d4c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, 8);
 80009c2:	2208      	movs	r2, #8
 80009c4:	490b      	ldr	r1, [pc, #44]	@ (80009f4 <main+0x54>)
 80009c6:	480c      	ldr	r0, [pc, #48]	@ (80009f8 <main+0x58>)
 80009c8:	f000 fc4e 	bl	8001268 <HAL_ADC_Start_DMA>
  const char *msg = "Hello\r\n";
 80009cc:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <main+0x5c>)
 80009ce:	607b      	str	r3, [r7, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7); // Toggle LED
//	  HAL_Delay(500); // Delay to make the toggling visible
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff fc35 	bl	8000240 <strlen>
 80009d6:	4603      	mov	r3, r0
 80009d8:	b29a      	uxth	r2, r3
 80009da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	4807      	ldr	r0, [pc, #28]	@ (8000a00 <main+0x60>)
 80009e2:	f002 fffd 	bl	80039e0 <HAL_UART_Transmit>
	  HAL_Delay(1000); // Delay to avoid flooding the UART with messages
 80009e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009ea:	f000 fac5 	bl	8000f78 <HAL_Delay>
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80009ee:	bf00      	nop
 80009f0:	e7ee      	b.n	80009d0 <main+0x30>
 80009f2:	bf00      	nop
 80009f4:	20000120 	.word	0x20000120
 80009f8:	20000078 	.word	0x20000078
 80009fc:	08004d74 	.word	0x08004d74
 8000a00:	20000130 	.word	0x20000130

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b094      	sub	sp, #80	@ 0x50
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	2234      	movs	r2, #52	@ 0x34
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f003 fd22 	bl	800445c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a28:	4b22      	ldr	r3, [pc, #136]	@ (8000ab4 <SystemClock_Config+0xb0>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2c:	4a21      	ldr	r2, [pc, #132]	@ (8000ab4 <SystemClock_Config+0xb0>)
 8000a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a34:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab4 <SystemClock_Config+0xb0>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a40:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <SystemClock_Config+0xb4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a48:	4a1b      	ldr	r2, [pc, #108]	@ (8000ab8 <SystemClock_Config+0xb4>)
 8000a4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <SystemClock_Config+0xb4>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a60:	2301      	movs	r3, #1
 8000a62:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a64:	2310      	movs	r3, #16
 8000a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 feab 	bl	80027cc <HAL_RCC_OscConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000a7c:	f000 f8b0 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a80:	230f      	movs	r3, #15
 8000a82:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f002 f944 	bl	8002d28 <HAL_RCC_ClockConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000aa6:	f000 f89b 	bl	8000be0 <Error_Handler>
  }
}
 8000aaa:	bf00      	nop
 8000aac:	3750      	adds	r7, #80	@ 0x50
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40007000 	.word	0x40007000

08000abc <DMA2_Stream1_IRQHandler>:

/* USER CODE BEGIN 4 */
/* DMA2 Stream1 Interrupt Handler */
void DMA2_Stream1_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_adc1);
 8000ac0:	4802      	ldr	r0, [pc, #8]	@ (8000acc <DMA2_Stream1_IRQHandler+0x10>)
 8000ac2:	f001 fa53 	bl	8001f6c <HAL_DMA_IRQHandler>
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200000c0 	.word	0x200000c0

08000ad0 <HAL_ADC_ConvCpltCallback>:

/* ADC Conversion Complete Callback */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	b09b      	sub	sp, #108	@ 0x6c
 8000ad4:	af08      	add	r7, sp, #32
 8000ad6:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a1d      	ldr	r2, [pc, #116]	@ (8000b54 <HAL_ADC_ConvCpltCallback+0x84>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d133      	bne.n	8000b4a <HAL_ADC_ConvCpltCallback+0x7a>
    {
        // Process ADC data (for debugging, you can print each value separately)
        char buffer[64];
        snprintf(buffer, sizeof(buffer), "ADC: %u %u %u %u %u %u %u %u\r\n",
                 adc_values[0], adc_values[1], adc_values[2], adc_values[3],
 8000ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b58 <HAL_ADC_ConvCpltCallback+0x88>)
 8000ae4:	881b      	ldrh	r3, [r3, #0]
        snprintf(buffer, sizeof(buffer), "ADC: %u %u %u %u %u %u %u %u\r\n",
 8000ae6:	469c      	mov	ip, r3
                 adc_values[0], adc_values[1], adc_values[2], adc_values[3],
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b58 <HAL_ADC_ConvCpltCallback+0x88>)
 8000aea:	885b      	ldrh	r3, [r3, #2]
        snprintf(buffer, sizeof(buffer), "ADC: %u %u %u %u %u %u %u %u\r\n",
 8000aec:	461a      	mov	r2, r3
                 adc_values[0], adc_values[1], adc_values[2], adc_values[3],
 8000aee:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <HAL_ADC_ConvCpltCallback+0x88>)
 8000af0:	889b      	ldrh	r3, [r3, #4]
        snprintf(buffer, sizeof(buffer), "ADC: %u %u %u %u %u %u %u %u\r\n",
 8000af2:	4619      	mov	r1, r3
                 adc_values[0], adc_values[1], adc_values[2], adc_values[3],
 8000af4:	4b18      	ldr	r3, [pc, #96]	@ (8000b58 <HAL_ADC_ConvCpltCallback+0x88>)
 8000af6:	88db      	ldrh	r3, [r3, #6]
        snprintf(buffer, sizeof(buffer), "ADC: %u %u %u %u %u %u %u %u\r\n",
 8000af8:	461c      	mov	r4, r3
                 adc_values[4], adc_values[5], adc_values[6], adc_values[7]);
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <HAL_ADC_ConvCpltCallback+0x88>)
 8000afc:	891b      	ldrh	r3, [r3, #8]
        snprintf(buffer, sizeof(buffer), "ADC: %u %u %u %u %u %u %u %u\r\n",
 8000afe:	461d      	mov	r5, r3
                 adc_values[4], adc_values[5], adc_values[6], adc_values[7]);
 8000b00:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <HAL_ADC_ConvCpltCallback+0x88>)
 8000b02:	895b      	ldrh	r3, [r3, #10]
        snprintf(buffer, sizeof(buffer), "ADC: %u %u %u %u %u %u %u %u\r\n",
 8000b04:	461e      	mov	r6, r3
                 adc_values[4], adc_values[5], adc_values[6], adc_values[7]);
 8000b06:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <HAL_ADC_ConvCpltCallback+0x88>)
 8000b08:	899b      	ldrh	r3, [r3, #12]
        snprintf(buffer, sizeof(buffer), "ADC: %u %u %u %u %u %u %u %u\r\n",
 8000b0a:	603b      	str	r3, [r7, #0]
                 adc_values[4], adc_values[5], adc_values[6], adc_values[7]);
 8000b0c:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <HAL_ADC_ConvCpltCallback+0x88>)
 8000b0e:	89db      	ldrh	r3, [r3, #14]
        snprintf(buffer, sizeof(buffer), "ADC: %u %u %u %u %u %u %u %u\r\n",
 8000b10:	f107 0008 	add.w	r0, r7, #8
 8000b14:	9306      	str	r3, [sp, #24]
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	9305      	str	r3, [sp, #20]
 8000b1a:	9604      	str	r6, [sp, #16]
 8000b1c:	9503      	str	r5, [sp, #12]
 8000b1e:	9402      	str	r4, [sp, #8]
 8000b20:	9101      	str	r1, [sp, #4]
 8000b22:	9200      	str	r2, [sp, #0]
 8000b24:	4663      	mov	r3, ip
 8000b26:	4a0d      	ldr	r2, [pc, #52]	@ (8000b5c <HAL_ADC_ConvCpltCallback+0x8c>)
 8000b28:	2140      	movs	r1, #64	@ 0x40
 8000b2a:	f003 fc63 	bl	80043f4 <sniprintf>

        // Send the formatted ADC values via UART
        HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000b2e:	f107 0308 	add.w	r3, r7, #8
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fb84 	bl	8000240 <strlen>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	f107 0108 	add.w	r1, r7, #8
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b44:	4806      	ldr	r0, [pc, #24]	@ (8000b60 <HAL_ADC_ConvCpltCallback+0x90>)
 8000b46:	f002 ff4b 	bl	80039e0 <HAL_UART_Transmit>
    }
}
 8000b4a:	bf00      	nop
 8000b4c:	374c      	adds	r7, #76	@ 0x4c
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40012000 	.word	0x40012000
 8000b58:	20000120 	.word	0x20000120
 8000b5c:	08004d7c 	.word	0x08004d7c
 8000b60:	20000130 	.word	0x20000130

08000b64 <HAL_ADC_ErrorCallback>:



/* ADC Error Callback */
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef* hadc)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a04      	ldr	r2, [pc, #16]	@ (8000b84 <HAL_ADC_ErrorCallback+0x20>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d101      	bne.n	8000b7a <HAL_ADC_ErrorCallback+0x16>
    {
        // Handle ADC errors
        Error_Handler();
 8000b76:	f000 f833 	bl	8000be0 <Error_Handler>
    }
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40012000 	.word	0x40012000

08000b88 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b8e:	463b      	mov	r3, r7
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b9a:	f001 f861 	bl	8001c60 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000baa:	231f      	movs	r3, #31
 8000bac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000bae:	2387      	movs	r3, #135	@ 0x87
 8000bb0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bca:	463b      	mov	r3, r7
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f001 f87f 	bl	8001cd0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bd2:	2004      	movs	r0, #4
 8000bd4:	f001 f85c 	bl	8001c90 <HAL_MPU_Enable>

}
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <Error_Handler+0x8>

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <HAL_MspInit+0x44>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c30 <HAL_MspInit+0x44>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <HAL_MspInit+0x44>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <HAL_MspInit+0x44>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0e:	4a08      	ldr	r2, [pc, #32]	@ (8000c30 <HAL_MspInit+0x44>)
 8000c10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_MspInit+0x44>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <NMI_Handler+0x4>

08000c3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8a:	f000 f955 	bl	8000f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c98:	4802      	ldr	r0, [pc, #8]	@ (8000ca4 <ADC_IRQHandler+0x10>)
 8000c9a:	f000 f9d5 	bl	8001048 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000078 	.word	0x20000078

08000ca8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cac:	4802      	ldr	r0, [pc, #8]	@ (8000cb8 <DMA2_Stream0_IRQHandler+0x10>)
 8000cae:	f001 f95d 	bl	8001f6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200000c0 	.word	0x200000c0

08000cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc4:	4a14      	ldr	r2, [pc, #80]	@ (8000d18 <_sbrk+0x5c>)
 8000cc6:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <_sbrk+0x60>)
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd0:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d102      	bne.n	8000cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <_sbrk+0x64>)
 8000cda:	4a12      	ldr	r2, [pc, #72]	@ (8000d24 <_sbrk+0x68>)
 8000cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cde:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d207      	bcs.n	8000cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cec:	f003 fbbe 	bl	800446c <__errno>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cfa:	e009      	b.n	8000d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cfc:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d02:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	4a05      	ldr	r2, [pc, #20]	@ (8000d20 <_sbrk+0x64>)
 8000d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20080000 	.word	0x20080000
 8000d1c:	00000400 	.word	0x00000400
 8000d20:	200001b8 	.word	0x200001b8
 8000d24:	20000308 	.word	0x20000308

08000d28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <SystemInit+0x20>)
 8000d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d32:	4a05      	ldr	r2, [pc, #20]	@ (8000d48 <SystemInit+0x20>)
 8000d34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <MX_USART3_UART_Init>:
/* USER CODE END 0 */

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d50:	4b14      	ldr	r3, [pc, #80]	@ (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d52:	4a15      	ldr	r2, [pc, #84]	@ (8000da8 <MX_USART3_UART_Init+0x5c>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d56:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d82:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d88:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d8e:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d90:	f002 fdd8 	bl	8003944 <HAL_UART_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d9a:	f7ff ff21 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000130 	.word	0x20000130
 8000da8:	40004800 	.word	0x40004800

08000dac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b0ae      	sub	sp, #184	@ 0xb8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2290      	movs	r2, #144	@ 0x90
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f003 fb45 	bl	800445c <memset>
  if(uartHandle->Instance==USART3)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a22      	ldr	r2, [pc, #136]	@ (8000e60 <HAL_UART_MspInit+0xb4>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d13c      	bne.n	8000e56 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ddc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000de0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4618      	mov	r0, r3
 8000dec:	f002 f982 	bl	80030f4 <HAL_RCCEx_PeriphCLKConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000df6:	f7ff fef3 	bl	8000be0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e64 <HAL_UART_MspInit+0xb8>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	4a19      	ldr	r2, [pc, #100]	@ (8000e64 <HAL_UART_MspInit+0xb8>)
 8000e00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e06:	4b17      	ldr	r3, [pc, #92]	@ (8000e64 <HAL_UART_MspInit+0xb8>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e12:	4b14      	ldr	r3, [pc, #80]	@ (8000e64 <HAL_UART_MspInit+0xb8>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	4a13      	ldr	r2, [pc, #76]	@ (8000e64 <HAL_UART_MspInit+0xb8>)
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1e:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <HAL_UART_MspInit+0xb8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	f003 0308 	and.w	r3, r3, #8
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e2a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e44:	2307      	movs	r3, #7
 8000e46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e4a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4805      	ldr	r0, [pc, #20]	@ (8000e68 <HAL_UART_MspInit+0xbc>)
 8000e52:	f001 faf5 	bl	8002440 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e56:	bf00      	nop
 8000e58:	37b8      	adds	r7, #184	@ 0xb8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40004800 	.word	0x40004800
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020c00 	.word	0x40020c00

08000e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ea4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e70:	f7ff ff5a 	bl	8000d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e74:	480c      	ldr	r0, [pc, #48]	@ (8000ea8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e76:	490d      	ldr	r1, [pc, #52]	@ (8000eac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e78:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e7c:	e002      	b.n	8000e84 <LoopCopyDataInit>

08000e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e82:	3304      	adds	r3, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e88:	d3f9      	bcc.n	8000e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000eb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e90:	e001      	b.n	8000e96 <LoopFillZerobss>

08000e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e94:	3204      	adds	r2, #4

08000e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e98:	d3fb      	bcc.n	8000e92 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e9a:	f003 faed 	bl	8004478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e9e:	f7ff fd7f 	bl	80009a0 <main>
  bx  lr    
 8000ea2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ea4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000eb0:	08004e00 	.word	0x08004e00
  ldr r2, =_sbss
 8000eb4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000eb8:	20000308 	.word	0x20000308

08000ebc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ebc:	e7fe      	b.n	8000ebc <CAN1_RX0_IRQHandler>

08000ebe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec2:	2003      	movs	r0, #3
 8000ec4:	f000 fe8a 	bl	8001bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec8:	200f      	movs	r0, #15
 8000eca:	f000 f805 	bl	8000ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ece:	f7ff fe8d 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <HAL_InitTick+0x54>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <HAL_InitTick+0x58>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 fea5 	bl	8001c46 <HAL_SYSTICK_Config>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00e      	b.n	8000f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b0f      	cmp	r3, #15
 8000f0a:	d80a      	bhi.n	8000f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f14:	f000 fe6d 	bl	8001bf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f18:	4a06      	ldr	r2, [pc, #24]	@ (8000f34 <HAL_InitTick+0x5c>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e000      	b.n	8000f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000004 	.word	0x20000004

08000f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <HAL_IncTick+0x20>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <HAL_IncTick+0x24>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	4a04      	ldr	r2, [pc, #16]	@ (8000f5c <HAL_IncTick+0x24>)
 8000f4a:	6013      	str	r3, [r2, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	200001bc 	.word	0x200001bc

08000f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b03      	ldr	r3, [pc, #12]	@ (8000f74 <HAL_GetTick+0x14>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	200001bc 	.word	0x200001bc

08000f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f80:	f7ff ffee 	bl	8000f60 <HAL_GetTick>
 8000f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f90:	d005      	beq.n	8000f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f92:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <HAL_Delay+0x44>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f9e:	bf00      	nop
 8000fa0:	f7ff ffde 	bl	8000f60 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d8f7      	bhi.n	8000fa0 <HAL_Delay+0x28>
  {
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008

08000fc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e031      	b.n	800103a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d109      	bne.n	8000ff2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff fbb2 	bl	8000748 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	f003 0310 	and.w	r3, r3, #16
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d116      	bne.n	800102c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001002:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <HAL_ADC_Init+0x84>)
 8001004:	4013      	ands	r3, r2
 8001006:	f043 0202 	orr.w	r2, r3, #2
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 fb8e 	bl	8001730 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101e:	f023 0303 	bic.w	r3, r3, #3
 8001022:	f043 0201 	orr.w	r2, r3, #1
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	641a      	str	r2, [r3, #64]	@ 0x40
 800102a:	e001      	b.n	8001030 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001038:	7bfb      	ldrb	r3, [r7, #15]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	ffffeefd 	.word	0xffffeefd

08001048 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	f003 0320 	and.w	r3, r3, #32
 8001076:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d049      	beq.n	8001112 <HAL_ADC_IRQHandler+0xca>
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d046      	beq.n	8001112 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001088:	f003 0310 	and.w	r3, r3, #16
 800108c:	2b00      	cmp	r3, #0
 800108e:	d105      	bne.n	800109c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001094:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d12b      	bne.n	8001102 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d127      	bne.n	8001102 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d006      	beq.n	80010ce <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d119      	bne.n	8001102 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 0220 	bic.w	r2, r2, #32
 80010dc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d105      	bne.n	8001102 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	f043 0201 	orr.w	r2, r3, #1
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff fce4 	bl	8000ad0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f06f 0212 	mvn.w	r2, #18
 8001110:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001120:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d057      	beq.n	80011d8 <HAL_ADC_IRQHandler+0x190>
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d054      	beq.n	80011d8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	f003 0310 	and.w	r3, r3, #16
 8001136:	2b00      	cmp	r3, #0
 8001138:	d105      	bne.n	8001146 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d139      	bne.n	80011c8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800115a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800115e:	2b00      	cmp	r3, #0
 8001160:	d006      	beq.n	8001170 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800116c:	2b00      	cmp	r3, #0
 800116e:	d12b      	bne.n	80011c8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800117a:	2b00      	cmp	r3, #0
 800117c:	d124      	bne.n	80011c8 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001188:	2b00      	cmp	r3, #0
 800118a:	d11d      	bne.n	80011c8 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001190:	2b00      	cmp	r3, #0
 8001192:	d119      	bne.n	80011c8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d105      	bne.n	80011c8 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c0:	f043 0201 	orr.w	r2, r3, #1
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 fc2d 	bl	8001a28 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f06f 020c 	mvn.w	r2, #12
 80011d6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011e6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d017      	beq.n	800121e <HAL_ADC_IRQHandler+0x1d6>
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d014      	beq.n	800121e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d10d      	bne.n	800121e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 f92e 	bl	8001470 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f06f 0201 	mvn.w	r2, #1
 800121c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f003 0320 	and.w	r3, r3, #32
 8001224:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800122c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d015      	beq.n	8001260 <HAL_ADC_IRQHandler+0x218>
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d012      	beq.n	8001260 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123e:	f043 0202 	orr.w	r2, r3, #2
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f06f 0220 	mvn.w	r2, #32
 800124e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff fc87 	bl	8000b64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f06f 0220 	mvn.w	r2, #32
 800125e:	601a      	str	r2, [r3, #0]
  }
}
 8001260:	bf00      	nop
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800127e:	2b01      	cmp	r3, #1
 8001280:	d101      	bne.n	8001286 <HAL_ADC_Start_DMA+0x1e>
 8001282:	2302      	movs	r3, #2
 8001284:	e0d4      	b.n	8001430 <HAL_ADC_Start_DMA+0x1c8>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2201      	movs	r2, #1
 800128a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b01      	cmp	r3, #1
 800129a:	d018      	beq.n	80012ce <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0201 	orr.w	r2, r2, #1
 80012aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80012ac:	4b62      	ldr	r3, [pc, #392]	@ (8001438 <HAL_ADC_Start_DMA+0x1d0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a62      	ldr	r2, [pc, #392]	@ (800143c <HAL_ADC_Start_DMA+0x1d4>)
 80012b2:	fba2 2303 	umull	r2, r3, r2, r3
 80012b6:	0c9a      	lsrs	r2, r3, #18
 80012b8:	4613      	mov	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4413      	add	r3, r2
 80012be:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80012c0:	e002      	b.n	80012c8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f9      	bne.n	80012c2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b01      	cmp	r3, #1
 80012da:	f040 809c 	bne.w	8001416 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012e2:	4b57      	ldr	r3, [pc, #348]	@ (8001440 <HAL_ADC_Start_DMA+0x1d8>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d007      	beq.n	800130c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001300:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001304:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001310:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001314:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001318:	d106      	bne.n	8001328 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131e:	f023 0206 	bic.w	r2, r3, #6
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	645a      	str	r2, [r3, #68]	@ 0x44
 8001326:	e002      	b.n	800132e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2200      	movs	r2, #0
 800132c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800133a:	4a42      	ldr	r2, [pc, #264]	@ (8001444 <HAL_ADC_Start_DMA+0x1dc>)
 800133c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001342:	4a41      	ldr	r2, [pc, #260]	@ (8001448 <HAL_ADC_Start_DMA+0x1e0>)
 8001344:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800134a:	4a40      	ldr	r2, [pc, #256]	@ (800144c <HAL_ADC_Start_DMA+0x1e4>)
 800134c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001356:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001366:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001376:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	334c      	adds	r3, #76	@ 0x4c
 8001382:	4619      	mov	r1, r3
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f000 fd90 	bl	8001eac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800138c:	4b30      	ldr	r3, [pc, #192]	@ (8001450 <HAL_ADC_Start_DMA+0x1e8>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 031f 	and.w	r3, r3, #31
 8001394:	2b00      	cmp	r3, #0
 8001396:	d10f      	bne.n	80013b8 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d143      	bne.n	800142e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	e03a      	b.n	800142e <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a25      	ldr	r2, [pc, #148]	@ (8001454 <HAL_ADC_Start_DMA+0x1ec>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d10e      	bne.n	80013e0 <HAL_ADC_Start_DMA+0x178>
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d107      	bne.n	80013e0 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80013de:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80013e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <HAL_ADC_Start_DMA+0x1e8>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0310 	and.w	r3, r3, #16
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d120      	bne.n	800142e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a19      	ldr	r2, [pc, #100]	@ (8001458 <HAL_ADC_Start_DMA+0x1f0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d11b      	bne.n	800142e <HAL_ADC_Start_DMA+0x1c6>
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d114      	bne.n	800142e <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	e00b      	b.n	800142e <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141a:	f043 0210 	orr.w	r2, r3, #16
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001426:	f043 0201 	orr.w	r2, r3, #1
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000000 	.word	0x20000000
 800143c:	431bde83 	.word	0x431bde83
 8001440:	fffff8fe 	.word	0xfffff8fe
 8001444:	08001925 	.word	0x08001925
 8001448:	080019df 	.word	0x080019df
 800144c:	080019fb 	.word	0x080019fb
 8001450:	40012300 	.word	0x40012300
 8001454:	40012000 	.word	0x40012000
 8001458:	40012200 	.word	0x40012200

0800145c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001498:	2b01      	cmp	r3, #1
 800149a:	d101      	bne.n	80014a0 <HAL_ADC_ConfigChannel+0x1c>
 800149c:	2302      	movs	r3, #2
 800149e:	e136      	b.n	800170e <HAL_ADC_ConfigChannel+0x28a>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b09      	cmp	r3, #9
 80014ae:	d93a      	bls.n	8001526 <HAL_ADC_ConfigChannel+0xa2>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80014b8:	d035      	beq.n	8001526 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68d9      	ldr	r1, [r3, #12]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	461a      	mov	r2, r3
 80014c8:	4613      	mov	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	3b1e      	subs	r3, #30
 80014d0:	2207      	movs	r2, #7
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43da      	mvns	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	400a      	ands	r2, r1
 80014de:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a8d      	ldr	r2, [pc, #564]	@ (800171c <HAL_ADC_ConfigChannel+0x298>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d10a      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68d9      	ldr	r1, [r3, #12]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	061a      	lsls	r2, r3, #24
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014fe:	e035      	b.n	800156c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68d9      	ldr	r1, [r3, #12]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	b29b      	uxth	r3, r3
 8001510:	4618      	mov	r0, r3
 8001512:	4603      	mov	r3, r0
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4403      	add	r3, r0
 8001518:	3b1e      	subs	r3, #30
 800151a:	409a      	lsls	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001524:	e022      	b.n	800156c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6919      	ldr	r1, [r3, #16]
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	b29b      	uxth	r3, r3
 8001532:	461a      	mov	r2, r3
 8001534:	4613      	mov	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	2207      	movs	r2, #7
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43da      	mvns	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	400a      	ands	r2, r1
 8001548:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6919      	ldr	r1, [r3, #16]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	b29b      	uxth	r3, r3
 800155a:	4618      	mov	r0, r3
 800155c:	4603      	mov	r3, r0
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4403      	add	r3, r0
 8001562:	409a      	lsls	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b06      	cmp	r3, #6
 8001572:	d824      	bhi.n	80015be <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	3b05      	subs	r3, #5
 8001586:	221f      	movs	r2, #31
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43da      	mvns	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	400a      	ands	r2, r1
 8001594:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	3b05      	subs	r3, #5
 80015b0:	fa00 f203 	lsl.w	r2, r0, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	635a      	str	r2, [r3, #52]	@ 0x34
 80015bc:	e04c      	b.n	8001658 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b0c      	cmp	r3, #12
 80015c4:	d824      	bhi.n	8001610 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	3b23      	subs	r3, #35	@ 0x23
 80015d8:	221f      	movs	r2, #31
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43da      	mvns	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	400a      	ands	r2, r1
 80015e6:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	4618      	mov	r0, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	3b23      	subs	r3, #35	@ 0x23
 8001602:	fa00 f203 	lsl.w	r2, r0, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	631a      	str	r2, [r3, #48]	@ 0x30
 800160e:	e023      	b.n	8001658 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	3b41      	subs	r3, #65	@ 0x41
 8001622:	221f      	movs	r2, #31
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43da      	mvns	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	400a      	ands	r2, r1
 8001630:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	b29b      	uxth	r3, r3
 800163e:	4618      	mov	r0, r3
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	3b41      	subs	r3, #65	@ 0x41
 800164c:	fa00 f203 	lsl.w	r2, r0, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a30      	ldr	r2, [pc, #192]	@ (8001720 <HAL_ADC_ConfigChannel+0x29c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d10a      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x1f4>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800166a:	d105      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800166c:	4b2d      	ldr	r3, [pc, #180]	@ (8001724 <HAL_ADC_ConfigChannel+0x2a0>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	4a2c      	ldr	r2, [pc, #176]	@ (8001724 <HAL_ADC_ConfigChannel+0x2a0>)
 8001672:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001676:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a28      	ldr	r2, [pc, #160]	@ (8001720 <HAL_ADC_ConfigChannel+0x29c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d10f      	bne.n	80016a2 <HAL_ADC_ConfigChannel+0x21e>
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b12      	cmp	r3, #18
 8001688:	d10b      	bne.n	80016a2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800168a:	4b26      	ldr	r3, [pc, #152]	@ (8001724 <HAL_ADC_ConfigChannel+0x2a0>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	4a25      	ldr	r2, [pc, #148]	@ (8001724 <HAL_ADC_ConfigChannel+0x2a0>)
 8001690:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001694:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001696:	4b23      	ldr	r3, [pc, #140]	@ (8001724 <HAL_ADC_ConfigChannel+0x2a0>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4a22      	ldr	r2, [pc, #136]	@ (8001724 <HAL_ADC_ConfigChannel+0x2a0>)
 800169c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016a0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001720 <HAL_ADC_ConfigChannel+0x29c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d12b      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x280>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a1a      	ldr	r2, [pc, #104]	@ (800171c <HAL_ADC_ConfigChannel+0x298>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d003      	beq.n	80016be <HAL_ADC_ConfigChannel+0x23a>
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b11      	cmp	r3, #17
 80016bc:	d122      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80016be:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <HAL_ADC_ConfigChannel+0x2a0>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	4a18      	ldr	r2, [pc, #96]	@ (8001724 <HAL_ADC_ConfigChannel+0x2a0>)
 80016c4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80016c8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80016ca:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <HAL_ADC_ConfigChannel+0x2a0>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	4a15      	ldr	r2, [pc, #84]	@ (8001724 <HAL_ADC_ConfigChannel+0x2a0>)
 80016d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016d4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a10      	ldr	r2, [pc, #64]	@ (800171c <HAL_ADC_ConfigChannel+0x298>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d111      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <HAL_ADC_ConfigChannel+0x2a4>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a11      	ldr	r2, [pc, #68]	@ (800172c <HAL_ADC_ConfigChannel+0x2a8>)
 80016e6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ea:	0c9a      	lsrs	r2, r3, #18
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80016f6:	e002      	b.n	80016fe <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f9      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	10000012 	.word	0x10000012
 8001720:	40012000 	.word	0x40012000
 8001724:	40012300 	.word	0x40012300
 8001728:	20000000 	.word	0x20000000
 800172c:	431bde83 	.word	0x431bde83

08001730 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001738:	4b78      	ldr	r3, [pc, #480]	@ (800191c <ADC_Init+0x1ec>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	4a77      	ldr	r2, [pc, #476]	@ (800191c <ADC_Init+0x1ec>)
 800173e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001742:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001744:	4b75      	ldr	r3, [pc, #468]	@ (800191c <ADC_Init+0x1ec>)
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4973      	ldr	r1, [pc, #460]	@ (800191c <ADC_Init+0x1ec>)
 800174e:	4313      	orrs	r3, r2
 8001750:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001760:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6859      	ldr	r1, [r3, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	021a      	lsls	r2, r3, #8
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001784:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6859      	ldr	r1, [r3, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6899      	ldr	r1, [r3, #8]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017be:	4a58      	ldr	r2, [pc, #352]	@ (8001920 <ADC_Init+0x1f0>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d022      	beq.n	800180a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6899      	ldr	r1, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6899      	ldr	r1, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	e00f      	b.n	800182a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001818:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001828:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0202 	bic.w	r2, r2, #2
 8001838:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6899      	ldr	r1, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	005a      	lsls	r2, r3, #1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d01b      	beq.n	8001890 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001866:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001876:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6859      	ldr	r1, [r3, #4]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001882:	3b01      	subs	r3, #1
 8001884:	035a      	lsls	r2, r3, #13
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	e007      	b.n	80018a0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800189e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80018ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	051a      	lsls	r2, r3, #20
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80018d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6899      	ldr	r1, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018e2:	025a      	lsls	r2, r3, #9
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6899      	ldr	r1, [r3, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	029a      	lsls	r2, r3, #10
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	609a      	str	r2, [r3, #8]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40012300 	.word	0x40012300
 8001920:	0f000001 	.word	0x0f000001

08001924 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001930:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001936:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800193a:	2b00      	cmp	r3, #0
 800193c:	d13c      	bne.n	80019b8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d12b      	bne.n	80019b0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800195c:	2b00      	cmp	r3, #0
 800195e:	d127      	bne.n	80019b0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001966:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800196a:	2b00      	cmp	r3, #0
 800196c:	d006      	beq.n	800197c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001978:	2b00      	cmp	r3, #0
 800197a:	d119      	bne.n	80019b0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0220 	bic.w	r2, r2, #32
 800198a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001990:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d105      	bne.n	80019b0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a8:	f043 0201 	orr.w	r2, r3, #1
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f7ff f88d 	bl	8000ad0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80019b6:	e00e      	b.n	80019d6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019bc:	f003 0310 	and.w	r3, r3, #16
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f7ff f8cd 	bl	8000b64 <HAL_ADC_ErrorCallback>
}
 80019ca:	e004      	b.n	80019d6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	4798      	blx	r3
}
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b084      	sub	sp, #16
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f7ff fd35 	bl	800145c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a06:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2240      	movs	r2, #64	@ 0x40
 8001a0c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	f043 0204 	orr.w	r2, r3, #4
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f7ff f8a2 	bl	8000b64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a20:	bf00      	nop
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a7c <__NVIC_SetPriorityGrouping+0x40>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6a:	4a04      	ldr	r2, [pc, #16]	@ (8001a7c <__NVIC_SetPriorityGrouping+0x40>)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	60d3      	str	r3, [r2, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00
 8001a80:	05fa0000 	.word	0x05fa0000

08001a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a88:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <__NVIC_GetPriorityGrouping+0x18>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	f003 0307 	and.w	r3, r3, #7
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	db0b      	blt.n	8001aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	f003 021f 	and.w	r2, r3, #31
 8001ab8:	4907      	ldr	r1, [pc, #28]	@ (8001ad8 <__NVIC_EnableIRQ+0x38>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000e100 	.word	0xe000e100

08001adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	db0a      	blt.n	8001b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	490c      	ldr	r1, [pc, #48]	@ (8001b28 <__NVIC_SetPriority+0x4c>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	0112      	lsls	r2, r2, #4
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	440b      	add	r3, r1
 8001b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b04:	e00a      	b.n	8001b1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4908      	ldr	r1, [pc, #32]	@ (8001b2c <__NVIC_SetPriority+0x50>)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	3b04      	subs	r3, #4
 8001b14:	0112      	lsls	r2, r2, #4
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	440b      	add	r3, r1
 8001b1a:	761a      	strb	r2, [r3, #24]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000e100 	.word	0xe000e100
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	@ 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f1c3 0307 	rsb	r3, r3, #7
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	bf28      	it	cs
 8001b4e:	2304      	movcs	r3, #4
 8001b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3304      	adds	r3, #4
 8001b56:	2b06      	cmp	r3, #6
 8001b58:	d902      	bls.n	8001b60 <NVIC_EncodePriority+0x30>
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3b03      	subs	r3, #3
 8001b5e:	e000      	b.n	8001b62 <NVIC_EncodePriority+0x32>
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	401a      	ands	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43d9      	mvns	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	4313      	orrs	r3, r2
         );
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3724      	adds	r7, #36	@ 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ba8:	d301      	bcc.n	8001bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00f      	b.n	8001bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bae:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb6:	210f      	movs	r1, #15
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bbc:	f7ff ff8e 	bl	8001adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc0:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc6:	4b04      	ldr	r3, [pc, #16]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bc8:	2207      	movs	r2, #7
 8001bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	e000e010 	.word	0xe000e010

08001bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff29 	bl	8001a3c <__NVIC_SetPriorityGrouping>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c04:	f7ff ff3e 	bl	8001a84 <__NVIC_GetPriorityGrouping>
 8001c08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	6978      	ldr	r0, [r7, #20]
 8001c10:	f7ff ff8e 	bl	8001b30 <NVIC_EncodePriority>
 8001c14:	4602      	mov	r2, r0
 8001c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff5d 	bl	8001adc <__NVIC_SetPriority>
}
 8001c22:	bf00      	nop
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff31 	bl	8001aa0 <__NVIC_EnableIRQ>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ffa2 	bl	8001b98 <SysTick_Config>
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c64:	f3bf 8f5f 	dmb	sy
}
 8001c68:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c6a:	4b07      	ldr	r3, [pc, #28]	@ (8001c88 <HAL_MPU_Disable+0x28>)
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6e:	4a06      	ldr	r2, [pc, #24]	@ (8001c88 <HAL_MPU_Disable+0x28>)
 8001c70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c74:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c76:	4b05      	ldr	r3, [pc, #20]	@ (8001c8c <HAL_MPU_Disable+0x2c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	605a      	str	r2, [r3, #4]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000ed00 	.word	0xe000ed00
 8001c8c:	e000ed90 	.word	0xe000ed90

08001c90 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c98:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc8 <HAL_MPU_Enable+0x38>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <HAL_MPU_Enable+0x3c>)
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca6:	4a09      	ldr	r2, [pc, #36]	@ (8001ccc <HAL_MPU_Enable+0x3c>)
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cac:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001cae:	f3bf 8f4f 	dsb	sy
}
 8001cb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb4:	f3bf 8f6f 	isb	sy
}
 8001cb8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000ed90 	.word	0xe000ed90
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	785a      	ldrb	r2, [r3, #1]
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d4c <HAL_MPU_ConfigRegion+0x7c>)
 8001cde:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <HAL_MPU_ConfigRegion+0x7c>)
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	4a19      	ldr	r2, [pc, #100]	@ (8001d4c <HAL_MPU_ConfigRegion+0x7c>)
 8001ce6:	f023 0301 	bic.w	r3, r3, #1
 8001cea:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001cec:	4a17      	ldr	r2, [pc, #92]	@ (8001d4c <HAL_MPU_ConfigRegion+0x7c>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	7b1b      	ldrb	r3, [r3, #12]
 8001cf8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	7adb      	ldrb	r3, [r3, #11]
 8001cfe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	7a9b      	ldrb	r3, [r3, #10]
 8001d06:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	7b5b      	ldrb	r3, [r3, #13]
 8001d0e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7b9b      	ldrb	r3, [r3, #14]
 8001d16:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7bdb      	ldrb	r3, [r3, #15]
 8001d1e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	7a5b      	ldrb	r3, [r3, #9]
 8001d26:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	7a1b      	ldrb	r3, [r3, #8]
 8001d2e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d30:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	7812      	ldrb	r2, [r2, #0]
 8001d36:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d38:	4a04      	ldr	r2, [pc, #16]	@ (8001d4c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d3a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d3c:	6113      	str	r3, [r2, #16]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000ed90 	.word	0xe000ed90

08001d50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d5c:	f7ff f900 	bl	8000f60 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e099      	b.n	8001ea0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0201 	bic.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d8c:	e00f      	b.n	8001dae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d8e:	f7ff f8e7 	bl	8000f60 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b05      	cmp	r3, #5
 8001d9a:	d908      	bls.n	8001dae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2203      	movs	r2, #3
 8001da6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e078      	b.n	8001ea0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1e8      	bne.n	8001d8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	4b38      	ldr	r3, [pc, #224]	@ (8001ea8 <HAL_DMA_Init+0x158>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d107      	bne.n	8001e18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e10:	4313      	orrs	r3, r2
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f023 0307 	bic.w	r3, r3, #7
 8001e2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d117      	bne.n	8001e72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00e      	beq.n	8001e72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 fa77 	bl	8002348 <DMA_CheckFifoParam>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2240      	movs	r2, #64	@ 0x40
 8001e64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e016      	b.n	8001ea0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 fa2e 	bl	80022dc <DMA_CalcBaseAndBitshift>
 8001e80:	4603      	mov	r3, r0
 8001e82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e88:	223f      	movs	r2, #63	@ 0x3f
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	e010803f 	.word	0xe010803f

08001eac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_DMA_Start_IT+0x26>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e048      	b.n	8001f64 <HAL_DMA_Start_IT+0xb8>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d137      	bne.n	8001f56 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 f9c0 	bl	8002280 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f04:	223f      	movs	r2, #63	@ 0x3f
 8001f06:	409a      	lsls	r2, r3
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0216 	orr.w	r2, r2, #22
 8001f1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	695a      	ldr	r2, [r3, #20]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f2a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d007      	beq.n	8001f44 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0208 	orr.w	r2, r2, #8
 8001f42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	e005      	b.n	8001f62 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001f78:	4b8e      	ldr	r3, [pc, #568]	@ (80021b4 <HAL_DMA_IRQHandler+0x248>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a8e      	ldr	r2, [pc, #568]	@ (80021b8 <HAL_DMA_IRQHandler+0x24c>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	0a9b      	lsrs	r3, r3, #10
 8001f84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f96:	2208      	movs	r2, #8
 8001f98:	409a      	lsls	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d01a      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d013      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0204 	bic.w	r2, r2, #4
 8001fbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc4:	2208      	movs	r2, #8
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd0:	f043 0201 	orr.w	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fdc:	2201      	movs	r2, #1
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d012      	beq.n	800200e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00b      	beq.n	800200e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002006:	f043 0202 	orr.w	r2, r3, #2
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002012:	2204      	movs	r2, #4
 8002014:	409a      	lsls	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d012      	beq.n	8002044 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00b      	beq.n	8002044 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002030:	2204      	movs	r2, #4
 8002032:	409a      	lsls	r2, r3
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203c:	f043 0204 	orr.w	r2, r3, #4
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002048:	2210      	movs	r2, #16
 800204a:	409a      	lsls	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d043      	beq.n	80020dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d03c      	beq.n	80020dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002066:	2210      	movs	r2, #16
 8002068:	409a      	lsls	r2, r3
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d018      	beq.n	80020ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d108      	bne.n	800209c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	2b00      	cmp	r3, #0
 8002090:	d024      	beq.n	80020dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	4798      	blx	r3
 800209a:	e01f      	b.n	80020dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d01b      	beq.n	80020dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	4798      	blx	r3
 80020ac:	e016      	b.n	80020dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d107      	bne.n	80020cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0208 	bic.w	r2, r2, #8
 80020ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e0:	2220      	movs	r2, #32
 80020e2:	409a      	lsls	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 808f 	beq.w	800220c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 8087 	beq.w	800220c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002102:	2220      	movs	r2, #32
 8002104:	409a      	lsls	r2, r3
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b05      	cmp	r3, #5
 8002114:	d136      	bne.n	8002184 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0216 	bic.w	r2, r2, #22
 8002124:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002134:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d103      	bne.n	8002146 <HAL_DMA_IRQHandler+0x1da>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002142:	2b00      	cmp	r3, #0
 8002144:	d007      	beq.n	8002156 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0208 	bic.w	r2, r2, #8
 8002154:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215a:	223f      	movs	r2, #63	@ 0x3f
 800215c:	409a      	lsls	r2, r3
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002176:	2b00      	cmp	r3, #0
 8002178:	d07e      	beq.n	8002278 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	4798      	blx	r3
        }
        return;
 8002182:	e079      	b.n	8002278 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d01d      	beq.n	80021ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10d      	bne.n	80021bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d031      	beq.n	800220c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	4798      	blx	r3
 80021b0:	e02c      	b.n	800220c <HAL_DMA_IRQHandler+0x2a0>
 80021b2:	bf00      	nop
 80021b4:	20000000 	.word	0x20000000
 80021b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d023      	beq.n	800220c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	4798      	blx	r3
 80021cc:	e01e      	b.n	800220c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10f      	bne.n	80021fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0210 	bic.w	r2, r2, #16
 80021ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002210:	2b00      	cmp	r3, #0
 8002212:	d032      	beq.n	800227a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	d022      	beq.n	8002266 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2205      	movs	r2, #5
 8002224:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	3301      	adds	r3, #1
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	429a      	cmp	r2, r3
 8002242:	d307      	bcc.n	8002254 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f2      	bne.n	8002238 <HAL_DMA_IRQHandler+0x2cc>
 8002252:	e000      	b.n	8002256 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002254:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	4798      	blx	r3
 8002276:	e000      	b.n	800227a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002278:	bf00      	nop
    }
  }
}
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800229c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b40      	cmp	r3, #64	@ 0x40
 80022ac:	d108      	bne.n	80022c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022be:	e007      	b.n	80022d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	60da      	str	r2, [r3, #12]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	3b10      	subs	r3, #16
 80022ec:	4a13      	ldr	r2, [pc, #76]	@ (800233c <DMA_CalcBaseAndBitshift+0x60>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022f6:	4a12      	ldr	r2, [pc, #72]	@ (8002340 <DMA_CalcBaseAndBitshift+0x64>)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4413      	add	r3, r2
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b03      	cmp	r3, #3
 8002308:	d908      	bls.n	800231c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	4b0c      	ldr	r3, [pc, #48]	@ (8002344 <DMA_CalcBaseAndBitshift+0x68>)
 8002312:	4013      	ands	r3, r2
 8002314:	1d1a      	adds	r2, r3, #4
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	659a      	str	r2, [r3, #88]	@ 0x58
 800231a:	e006      	b.n	800232a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	4b08      	ldr	r3, [pc, #32]	@ (8002344 <DMA_CalcBaseAndBitshift+0x68>)
 8002324:	4013      	ands	r3, r2
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	aaaaaaab 	.word	0xaaaaaaab
 8002340:	08004db4 	.word	0x08004db4
 8002344:	fffffc00 	.word	0xfffffc00

08002348 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002358:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d11f      	bne.n	80023a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d856      	bhi.n	8002416 <DMA_CheckFifoParam+0xce>
 8002368:	a201      	add	r2, pc, #4	@ (adr r2, 8002370 <DMA_CheckFifoParam+0x28>)
 800236a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236e:	bf00      	nop
 8002370:	08002381 	.word	0x08002381
 8002374:	08002393 	.word	0x08002393
 8002378:	08002381 	.word	0x08002381
 800237c:	08002417 	.word	0x08002417
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002384:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d046      	beq.n	800241a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002390:	e043      	b.n	800241a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002396:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800239a:	d140      	bne.n	800241e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a0:	e03d      	b.n	800241e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023aa:	d121      	bne.n	80023f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d837      	bhi.n	8002422 <DMA_CheckFifoParam+0xda>
 80023b2:	a201      	add	r2, pc, #4	@ (adr r2, 80023b8 <DMA_CheckFifoParam+0x70>)
 80023b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b8:	080023c9 	.word	0x080023c9
 80023bc:	080023cf 	.word	0x080023cf
 80023c0:	080023c9 	.word	0x080023c9
 80023c4:	080023e1 	.word	0x080023e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
      break;
 80023cc:	e030      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d025      	beq.n	8002426 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023de:	e022      	b.n	8002426 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023e8:	d11f      	bne.n	800242a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023ee:	e01c      	b.n	800242a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d903      	bls.n	80023fe <DMA_CheckFifoParam+0xb6>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d003      	beq.n	8002404 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023fc:	e018      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
      break;
 8002402:	e015      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002408:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00e      	beq.n	800242e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
      break;
 8002414:	e00b      	b.n	800242e <DMA_CheckFifoParam+0xe6>
      break;
 8002416:	bf00      	nop
 8002418:	e00a      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 800241a:	bf00      	nop
 800241c:	e008      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 800241e:	bf00      	nop
 8002420:	e006      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 8002422:	bf00      	nop
 8002424:	e004      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 8002426:	bf00      	nop
 8002428:	e002      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;   
 800242a:	bf00      	nop
 800242c:	e000      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 800242e:	bf00      	nop
    }
  } 
  
  return status; 
 8002430:	7bfb      	ldrb	r3, [r7, #15]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop

08002440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	@ 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002456:	2300      	movs	r3, #0
 8002458:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	e175      	b.n	800274c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002460:	2201      	movs	r2, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	429a      	cmp	r2, r3
 800247a:	f040 8164 	bne.w	8002746 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b01      	cmp	r3, #1
 8002488:	d005      	beq.n	8002496 <HAL_GPIO_Init+0x56>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d130      	bne.n	80024f8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	2203      	movs	r2, #3
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024cc:	2201      	movs	r2, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	f003 0201 	and.w	r2, r3, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b03      	cmp	r3, #3
 8002502:	d017      	beq.n	8002534 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	2203      	movs	r2, #3
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d123      	bne.n	8002588 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	08da      	lsrs	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3208      	adds	r2, #8
 8002548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800254c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	220f      	movs	r2, #15
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	08da      	lsrs	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3208      	adds	r2, #8
 8002582:	69b9      	ldr	r1, [r7, #24]
 8002584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0203 	and.w	r2, r3, #3
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 80be 	beq.w	8002746 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ca:	4b66      	ldr	r3, [pc, #408]	@ (8002764 <HAL_GPIO_Init+0x324>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ce:	4a65      	ldr	r2, [pc, #404]	@ (8002764 <HAL_GPIO_Init+0x324>)
 80025d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025d6:	4b63      	ldr	r3, [pc, #396]	@ (8002764 <HAL_GPIO_Init+0x324>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025e2:	4a61      	ldr	r2, [pc, #388]	@ (8002768 <HAL_GPIO_Init+0x328>)
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	089b      	lsrs	r3, r3, #2
 80025e8:	3302      	adds	r3, #2
 80025ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	220f      	movs	r2, #15
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a58      	ldr	r2, [pc, #352]	@ (800276c <HAL_GPIO_Init+0x32c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d037      	beq.n	800267e <HAL_GPIO_Init+0x23e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a57      	ldr	r2, [pc, #348]	@ (8002770 <HAL_GPIO_Init+0x330>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d031      	beq.n	800267a <HAL_GPIO_Init+0x23a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a56      	ldr	r2, [pc, #344]	@ (8002774 <HAL_GPIO_Init+0x334>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d02b      	beq.n	8002676 <HAL_GPIO_Init+0x236>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a55      	ldr	r2, [pc, #340]	@ (8002778 <HAL_GPIO_Init+0x338>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d025      	beq.n	8002672 <HAL_GPIO_Init+0x232>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a54      	ldr	r2, [pc, #336]	@ (800277c <HAL_GPIO_Init+0x33c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d01f      	beq.n	800266e <HAL_GPIO_Init+0x22e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a53      	ldr	r2, [pc, #332]	@ (8002780 <HAL_GPIO_Init+0x340>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d019      	beq.n	800266a <HAL_GPIO_Init+0x22a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a52      	ldr	r2, [pc, #328]	@ (8002784 <HAL_GPIO_Init+0x344>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d013      	beq.n	8002666 <HAL_GPIO_Init+0x226>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a51      	ldr	r2, [pc, #324]	@ (8002788 <HAL_GPIO_Init+0x348>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00d      	beq.n	8002662 <HAL_GPIO_Init+0x222>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a50      	ldr	r2, [pc, #320]	@ (800278c <HAL_GPIO_Init+0x34c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d007      	beq.n	800265e <HAL_GPIO_Init+0x21e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a4f      	ldr	r2, [pc, #316]	@ (8002790 <HAL_GPIO_Init+0x350>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d101      	bne.n	800265a <HAL_GPIO_Init+0x21a>
 8002656:	2309      	movs	r3, #9
 8002658:	e012      	b.n	8002680 <HAL_GPIO_Init+0x240>
 800265a:	230a      	movs	r3, #10
 800265c:	e010      	b.n	8002680 <HAL_GPIO_Init+0x240>
 800265e:	2308      	movs	r3, #8
 8002660:	e00e      	b.n	8002680 <HAL_GPIO_Init+0x240>
 8002662:	2307      	movs	r3, #7
 8002664:	e00c      	b.n	8002680 <HAL_GPIO_Init+0x240>
 8002666:	2306      	movs	r3, #6
 8002668:	e00a      	b.n	8002680 <HAL_GPIO_Init+0x240>
 800266a:	2305      	movs	r3, #5
 800266c:	e008      	b.n	8002680 <HAL_GPIO_Init+0x240>
 800266e:	2304      	movs	r3, #4
 8002670:	e006      	b.n	8002680 <HAL_GPIO_Init+0x240>
 8002672:	2303      	movs	r3, #3
 8002674:	e004      	b.n	8002680 <HAL_GPIO_Init+0x240>
 8002676:	2302      	movs	r3, #2
 8002678:	e002      	b.n	8002680 <HAL_GPIO_Init+0x240>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <HAL_GPIO_Init+0x240>
 800267e:	2300      	movs	r3, #0
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	f002 0203 	and.w	r2, r2, #3
 8002686:	0092      	lsls	r2, r2, #2
 8002688:	4093      	lsls	r3, r2
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002690:	4935      	ldr	r1, [pc, #212]	@ (8002768 <HAL_GPIO_Init+0x328>)
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	089b      	lsrs	r3, r3, #2
 8002696:	3302      	adds	r3, #2
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800269e:	4b3d      	ldr	r3, [pc, #244]	@ (8002794 <HAL_GPIO_Init+0x354>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026c2:	4a34      	ldr	r2, [pc, #208]	@ (8002794 <HAL_GPIO_Init+0x354>)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026c8:	4b32      	ldr	r3, [pc, #200]	@ (8002794 <HAL_GPIO_Init+0x354>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026ec:	4a29      	ldr	r2, [pc, #164]	@ (8002794 <HAL_GPIO_Init+0x354>)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026f2:	4b28      	ldr	r3, [pc, #160]	@ (8002794 <HAL_GPIO_Init+0x354>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002716:	4a1f      	ldr	r2, [pc, #124]	@ (8002794 <HAL_GPIO_Init+0x354>)
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800271c:	4b1d      	ldr	r3, [pc, #116]	@ (8002794 <HAL_GPIO_Init+0x354>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002740:	4a14      	ldr	r2, [pc, #80]	@ (8002794 <HAL_GPIO_Init+0x354>)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3301      	adds	r3, #1
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	2b0f      	cmp	r3, #15
 8002750:	f67f ae86 	bls.w	8002460 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002754:	bf00      	nop
 8002756:	bf00      	nop
 8002758:	3724      	adds	r7, #36	@ 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800
 8002768:	40013800 	.word	0x40013800
 800276c:	40020000 	.word	0x40020000
 8002770:	40020400 	.word	0x40020400
 8002774:	40020800 	.word	0x40020800
 8002778:	40020c00 	.word	0x40020c00
 800277c:	40021000 	.word	0x40021000
 8002780:	40021400 	.word	0x40021400
 8002784:	40021800 	.word	0x40021800
 8002788:	40021c00 	.word	0x40021c00
 800278c:	40022000 	.word	0x40022000
 8002790:	40022400 	.word	0x40022400
 8002794:	40013c00 	.word	0x40013c00

08002798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	807b      	strh	r3, [r7, #2]
 80027a4:	4613      	mov	r3, r2
 80027a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027a8:	787b      	ldrb	r3, [r7, #1]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ae:	887a      	ldrh	r2, [r7, #2]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80027b4:	e003      	b.n	80027be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80027b6:	887b      	ldrh	r3, [r7, #2]
 80027b8:	041a      	lsls	r2, r3, #16
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	619a      	str	r2, [r3, #24]
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80027d4:	2300      	movs	r3, #0
 80027d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e29b      	b.n	8002d1a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 8087 	beq.w	80028fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027f0:	4b96      	ldr	r3, [pc, #600]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 030c 	and.w	r3, r3, #12
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d00c      	beq.n	8002816 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027fc:	4b93      	ldr	r3, [pc, #588]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 030c 	and.w	r3, r3, #12
 8002804:	2b08      	cmp	r3, #8
 8002806:	d112      	bne.n	800282e <HAL_RCC_OscConfig+0x62>
 8002808:	4b90      	ldr	r3, [pc, #576]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002810:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002814:	d10b      	bne.n	800282e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002816:	4b8d      	ldr	r3, [pc, #564]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d06c      	beq.n	80028fc <HAL_RCC_OscConfig+0x130>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d168      	bne.n	80028fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e275      	b.n	8002d1a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x7a>
 8002838:	4b84      	ldr	r3, [pc, #528]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a83      	ldr	r2, [pc, #524]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 800283e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	e02e      	b.n	80028a4 <HAL_RCC_OscConfig+0xd8>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10c      	bne.n	8002868 <HAL_RCC_OscConfig+0x9c>
 800284e:	4b7f      	ldr	r3, [pc, #508]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a7e      	ldr	r2, [pc, #504]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 8002854:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	4b7c      	ldr	r3, [pc, #496]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a7b      	ldr	r2, [pc, #492]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 8002860:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	e01d      	b.n	80028a4 <HAL_RCC_OscConfig+0xd8>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002870:	d10c      	bne.n	800288c <HAL_RCC_OscConfig+0xc0>
 8002872:	4b76      	ldr	r3, [pc, #472]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a75      	ldr	r2, [pc, #468]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 8002878:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4b73      	ldr	r3, [pc, #460]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a72      	ldr	r2, [pc, #456]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 8002884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	e00b      	b.n	80028a4 <HAL_RCC_OscConfig+0xd8>
 800288c:	4b6f      	ldr	r3, [pc, #444]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a6e      	ldr	r2, [pc, #440]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 8002892:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	4b6c      	ldr	r3, [pc, #432]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a6b      	ldr	r2, [pc, #428]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 800289e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d013      	beq.n	80028d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe fb58 	bl	8000f60 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b4:	f7fe fb54 	bl	8000f60 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b64      	cmp	r3, #100	@ 0x64
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e229      	b.n	8002d1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	4b61      	ldr	r3, [pc, #388]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0xe8>
 80028d2:	e014      	b.n	80028fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe fb44 	bl	8000f60 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028dc:	f7fe fb40 	bl	8000f60 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	@ 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e215      	b.n	8002d1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ee:	4b57      	ldr	r3, [pc, #348]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x110>
 80028fa:	e000      	b.n	80028fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d069      	beq.n	80029de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800290a:	4b50      	ldr	r3, [pc, #320]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00b      	beq.n	800292e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002916:	4b4d      	ldr	r3, [pc, #308]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	2b08      	cmp	r3, #8
 8002920:	d11c      	bne.n	800295c <HAL_RCC_OscConfig+0x190>
 8002922:	4b4a      	ldr	r3, [pc, #296]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d116      	bne.n	800295c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292e:	4b47      	ldr	r3, [pc, #284]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d005      	beq.n	8002946 <HAL_RCC_OscConfig+0x17a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d001      	beq.n	8002946 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e1e9      	b.n	8002d1a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002946:	4b41      	ldr	r3, [pc, #260]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	493d      	ldr	r1, [pc, #244]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295a:	e040      	b.n	80029de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d023      	beq.n	80029ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002964:	4b39      	ldr	r3, [pc, #228]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a38      	ldr	r2, [pc, #224]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7fe faf6 	bl	8000f60 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002978:	f7fe faf2 	bl	8000f60 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e1c7      	b.n	8002d1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298a:	4b30      	ldr	r3, [pc, #192]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002996:	4b2d      	ldr	r3, [pc, #180]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4929      	ldr	r1, [pc, #164]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]
 80029aa:	e018      	b.n	80029de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ac:	4b27      	ldr	r3, [pc, #156]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a26      	ldr	r2, [pc, #152]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 80029b2:	f023 0301 	bic.w	r3, r3, #1
 80029b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7fe fad2 	bl	8000f60 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c0:	f7fe face 	bl	8000f60 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e1a3      	b.n	8002d1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d038      	beq.n	8002a5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d019      	beq.n	8002a26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f2:	4b16      	ldr	r3, [pc, #88]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 80029f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029f6:	4a15      	ldr	r2, [pc, #84]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fe:	f7fe faaf 	bl	8000f60 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a06:	f7fe faab 	bl	8000f60 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e180      	b.n	8002d1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a18:	4b0c      	ldr	r3, [pc, #48]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 8002a1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x23a>
 8002a24:	e01a      	b.n	8002a5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a26:	4b09      	ldr	r3, [pc, #36]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 8002a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a2a:	4a08      	ldr	r2, [pc, #32]	@ (8002a4c <HAL_RCC_OscConfig+0x280>)
 8002a2c:	f023 0301 	bic.w	r3, r3, #1
 8002a30:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a32:	f7fe fa95 	bl	8000f60 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a38:	e00a      	b.n	8002a50 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a3a:	f7fe fa91 	bl	8000f60 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d903      	bls.n	8002a50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e166      	b.n	8002d1a <HAL_RCC_OscConfig+0x54e>
 8002a4c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a50:	4b92      	ldr	r3, [pc, #584]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002a52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1ee      	bne.n	8002a3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80a4 	beq.w	8002bb2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6a:	4b8c      	ldr	r3, [pc, #560]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10d      	bne.n	8002a92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a76:	4b89      	ldr	r3, [pc, #548]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7a:	4a88      	ldr	r2, [pc, #544]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a82:	4b86      	ldr	r3, [pc, #536]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a92:	4b83      	ldr	r3, [pc, #524]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d118      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a9e:	4b80      	ldr	r3, [pc, #512]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a7f      	ldr	r2, [pc, #508]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aaa:	f7fe fa59 	bl	8000f60 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab2:	f7fe fa55 	bl	8000f60 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b64      	cmp	r3, #100	@ 0x64
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e12a      	b.n	8002d1a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac4:	4b76      	ldr	r3, [pc, #472]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d106      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x31a>
 8002ad8:	4b70      	ldr	r3, [pc, #448]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002adc:	4a6f      	ldr	r2, [pc, #444]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ae4:	e02d      	b.n	8002b42 <HAL_RCC_OscConfig+0x376>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x33c>
 8002aee:	4b6b      	ldr	r3, [pc, #428]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af2:	4a6a      	ldr	r2, [pc, #424]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002afa:	4b68      	ldr	r3, [pc, #416]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afe:	4a67      	ldr	r2, [pc, #412]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002b00:	f023 0304 	bic.w	r3, r3, #4
 8002b04:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b06:	e01c      	b.n	8002b42 <HAL_RCC_OscConfig+0x376>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b05      	cmp	r3, #5
 8002b0e:	d10c      	bne.n	8002b2a <HAL_RCC_OscConfig+0x35e>
 8002b10:	4b62      	ldr	r3, [pc, #392]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b14:	4a61      	ldr	r2, [pc, #388]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002b16:	f043 0304 	orr.w	r3, r3, #4
 8002b1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b1c:	4b5f      	ldr	r3, [pc, #380]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b20:	4a5e      	ldr	r2, [pc, #376]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b28:	e00b      	b.n	8002b42 <HAL_RCC_OscConfig+0x376>
 8002b2a:	4b5c      	ldr	r3, [pc, #368]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2e:	4a5b      	ldr	r2, [pc, #364]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b36:	4b59      	ldr	r3, [pc, #356]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3a:	4a58      	ldr	r2, [pc, #352]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002b3c:	f023 0304 	bic.w	r3, r3, #4
 8002b40:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d015      	beq.n	8002b76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4a:	f7fe fa09 	bl	8000f60 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b50:	e00a      	b.n	8002b68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b52:	f7fe fa05 	bl	8000f60 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e0d8      	b.n	8002d1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b68:	4b4c      	ldr	r3, [pc, #304]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0ee      	beq.n	8002b52 <HAL_RCC_OscConfig+0x386>
 8002b74:	e014      	b.n	8002ba0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b76:	f7fe f9f3 	bl	8000f60 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7e:	f7fe f9ef 	bl	8000f60 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e0c2      	b.n	8002d1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b94:	4b41      	ldr	r3, [pc, #260]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1ee      	bne.n	8002b7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d105      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba6:	4b3d      	ldr	r3, [pc, #244]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	4a3c      	ldr	r2, [pc, #240]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002bac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bb0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 80ae 	beq.w	8002d18 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bbc:	4b37      	ldr	r3, [pc, #220]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 030c 	and.w	r3, r3, #12
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d06d      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d14b      	bne.n	8002c68 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd0:	4b32      	ldr	r3, [pc, #200]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a31      	ldr	r2, [pc, #196]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002bd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7fe f9c0 	bl	8000f60 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be4:	f7fe f9bc 	bl	8000f60 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e091      	b.n	8002d1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf6:	4b29      	ldr	r3, [pc, #164]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69da      	ldr	r2, [r3, #28]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	019b      	lsls	r3, r3, #6
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c18:	085b      	lsrs	r3, r3, #1
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	041b      	lsls	r3, r3, #16
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c24:	061b      	lsls	r3, r3, #24
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2c:	071b      	lsls	r3, r3, #28
 8002c2e:	491b      	ldr	r1, [pc, #108]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c34:	4b19      	ldr	r3, [pc, #100]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a18      	ldr	r2, [pc, #96]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002c3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7fe f98e 	bl	8000f60 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c48:	f7fe f98a 	bl	8000f60 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e05f      	b.n	8002d1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5a:	4b10      	ldr	r3, [pc, #64]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x47c>
 8002c66:	e057      	b.n	8002d18 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c68:	4b0c      	ldr	r3, [pc, #48]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002c6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7fe f974 	bl	8000f60 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7c:	f7fe f970 	bl	8000f60 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e045      	b.n	8002d1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8e:	4b03      	ldr	r3, [pc, #12]	@ (8002c9c <HAL_RCC_OscConfig+0x4d0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0x4b0>
 8002c9a:	e03d      	b.n	8002d18 <HAL_RCC_OscConfig+0x54c>
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d24 <HAL_RCC_OscConfig+0x558>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d030      	beq.n	8002d14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d129      	bne.n	8002d14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d122      	bne.n	8002d14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cda:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d119      	bne.n	8002d14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cea:	085b      	lsrs	r3, r3, #1
 8002cec:	3b01      	subs	r3, #1
 8002cee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d10f      	bne.n	8002d14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d107      	bne.n	8002d14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800

08002d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0d0      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d40:	4b6a      	ldr	r3, [pc, #424]	@ (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 030f 	and.w	r3, r3, #15
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d910      	bls.n	8002d70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b67      	ldr	r3, [pc, #412]	@ (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f023 020f 	bic.w	r2, r3, #15
 8002d56:	4965      	ldr	r1, [pc, #404]	@ (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5e:	4b63      	ldr	r3, [pc, #396]	@ (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0b8      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d020      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d88:	4b59      	ldr	r3, [pc, #356]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	4a58      	ldr	r2, [pc, #352]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002da0:	4b53      	ldr	r3, [pc, #332]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	4a52      	ldr	r2, [pc, #328]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8002da6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002daa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dac:	4b50      	ldr	r3, [pc, #320]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	494d      	ldr	r1, [pc, #308]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d040      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d107      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd2:	4b47      	ldr	r3, [pc, #284]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d115      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e07f      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dea:	4b41      	ldr	r3, [pc, #260]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e073      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfa:	4b3d      	ldr	r3, [pc, #244]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e06b      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e0a:	4b39      	ldr	r3, [pc, #228]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f023 0203 	bic.w	r2, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	4936      	ldr	r1, [pc, #216]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e1c:	f7fe f8a0 	bl	8000f60 <HAL_GetTick>
 8002e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e24:	f7fe f89c 	bl	8000f60 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e053      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 020c 	and.w	r2, r3, #12
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d1eb      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b27      	ldr	r3, [pc, #156]	@ (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d210      	bcs.n	8002e7c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b24      	ldr	r3, [pc, #144]	@ (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 020f 	bic.w	r2, r3, #15
 8002e62:	4922      	ldr	r1, [pc, #136]	@ (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6a:	4b20      	ldr	r3, [pc, #128]	@ (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d001      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e032      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e88:	4b19      	ldr	r3, [pc, #100]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4916      	ldr	r1, [pc, #88]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ea6:	4b12      	ldr	r3, [pc, #72]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	490e      	ldr	r1, [pc, #56]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eba:	f000 f821 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	490a      	ldr	r1, [pc, #40]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1cc>)
 8002ecc:	5ccb      	ldrb	r3, [r1, r3]
 8002ece:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed2:	4a09      	ldr	r2, [pc, #36]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1d0>)
 8002ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ed6:	4b09      	ldr	r3, [pc, #36]	@ (8002efc <HAL_RCC_ClockConfig+0x1d4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fd fffc 	bl	8000ed8 <HAL_InitTick>

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40023c00 	.word	0x40023c00
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	08004d9c 	.word	0x08004d9c
 8002ef8:	20000000 	.word	0x20000000
 8002efc:	20000004 	.word	0x20000004

08002f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f04:	b090      	sub	sp, #64	@ 0x40
 8002f06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f10:	2300      	movs	r3, #0
 8002f12:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f18:	4b59      	ldr	r3, [pc, #356]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d00d      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0x40>
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	f200 80a1 	bhi.w	800306c <HAL_RCC_GetSysClockFreq+0x16c>
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <HAL_RCC_GetSysClockFreq+0x34>
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d003      	beq.n	8002f3a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f32:	e09b      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f34:	4b53      	ldr	r3, [pc, #332]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f38:	e09b      	b.n	8003072 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f3a:	4b53      	ldr	r3, [pc, #332]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f3e:	e098      	b.n	8003072 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f40:	4b4f      	ldr	r3, [pc, #316]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f48:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f4a:	4b4d      	ldr	r3, [pc, #308]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d028      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f56:	4b4a      	ldr	r3, [pc, #296]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	099b      	lsrs	r3, r3, #6
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	623b      	str	r3, [r7, #32]
 8002f60:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4b47      	ldr	r3, [pc, #284]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f6c:	fb03 f201 	mul.w	r2, r3, r1
 8002f70:	2300      	movs	r3, #0
 8002f72:	fb00 f303 	mul.w	r3, r0, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	4a43      	ldr	r2, [pc, #268]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f7a:	fba0 1202 	umull	r1, r2, r0, r2
 8002f7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f80:	460a      	mov	r2, r1
 8002f82:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002f84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f86:	4413      	add	r3, r2
 8002f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	61bb      	str	r3, [r7, #24]
 8002f90:	61fa      	str	r2, [r7, #28]
 8002f92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002f9a:	f7fd f9a9 	bl	80002f0 <__aeabi_uldivmod>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fa6:	e053      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa8:	4b35      	ldr	r3, [pc, #212]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x180>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	099b      	lsrs	r3, r3, #6
 8002fae:	2200      	movs	r2, #0
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	617a      	str	r2, [r7, #20]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002fba:	f04f 0b00 	mov.w	fp, #0
 8002fbe:	4652      	mov	r2, sl
 8002fc0:	465b      	mov	r3, fp
 8002fc2:	f04f 0000 	mov.w	r0, #0
 8002fc6:	f04f 0100 	mov.w	r1, #0
 8002fca:	0159      	lsls	r1, r3, #5
 8002fcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd0:	0150      	lsls	r0, r2, #5
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	ebb2 080a 	subs.w	r8, r2, sl
 8002fda:	eb63 090b 	sbc.w	r9, r3, fp
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002fea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002fee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ff2:	ebb2 0408 	subs.w	r4, r2, r8
 8002ff6:	eb63 0509 	sbc.w	r5, r3, r9
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	f04f 0300 	mov.w	r3, #0
 8003002:	00eb      	lsls	r3, r5, #3
 8003004:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003008:	00e2      	lsls	r2, r4, #3
 800300a:	4614      	mov	r4, r2
 800300c:	461d      	mov	r5, r3
 800300e:	eb14 030a 	adds.w	r3, r4, sl
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	eb45 030b 	adc.w	r3, r5, fp
 8003018:	607b      	str	r3, [r7, #4]
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003026:	4629      	mov	r1, r5
 8003028:	028b      	lsls	r3, r1, #10
 800302a:	4621      	mov	r1, r4
 800302c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003030:	4621      	mov	r1, r4
 8003032:	028a      	lsls	r2, r1, #10
 8003034:	4610      	mov	r0, r2
 8003036:	4619      	mov	r1, r3
 8003038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800303a:	2200      	movs	r2, #0
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	60fa      	str	r2, [r7, #12]
 8003040:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003044:	f7fd f954 	bl	80002f0 <__aeabi_uldivmod>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4613      	mov	r3, r2
 800304e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003050:	4b0b      	ldr	r3, [pc, #44]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x180>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	3301      	adds	r3, #1
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003060:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800306a:	e002      	b.n	8003072 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800306c:	4b05      	ldr	r3, [pc, #20]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x184>)
 800306e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003074:	4618      	mov	r0, r3
 8003076:	3740      	adds	r7, #64	@ 0x40
 8003078:	46bd      	mov	sp, r7
 800307a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	00f42400 	.word	0x00f42400
 8003088:	017d7840 	.word	0x017d7840

0800308c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003090:	4b03      	ldr	r3, [pc, #12]	@ (80030a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003092:	681b      	ldr	r3, [r3, #0]
}
 8003094:	4618      	mov	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000000 	.word	0x20000000

080030a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030a8:	f7ff fff0 	bl	800308c <HAL_RCC_GetHCLKFreq>
 80030ac:	4602      	mov	r2, r0
 80030ae:	4b05      	ldr	r3, [pc, #20]	@ (80030c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	0a9b      	lsrs	r3, r3, #10
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	4903      	ldr	r1, [pc, #12]	@ (80030c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ba:	5ccb      	ldrb	r3, [r1, r3]
 80030bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40023800 	.word	0x40023800
 80030c8:	08004dac 	.word	0x08004dac

080030cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030d0:	f7ff ffdc 	bl	800308c <HAL_RCC_GetHCLKFreq>
 80030d4:	4602      	mov	r2, r0
 80030d6:	4b05      	ldr	r3, [pc, #20]	@ (80030ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	0b5b      	lsrs	r3, r3, #13
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	4903      	ldr	r1, [pc, #12]	@ (80030f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030e2:	5ccb      	ldrb	r3, [r1, r3]
 80030e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40023800 	.word	0x40023800
 80030f0:	08004dac 	.word	0x08004dac

080030f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003104:	2300      	movs	r3, #0
 8003106:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d012      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800311c:	4b69      	ldr	r3, [pc, #420]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	4a68      	ldr	r2, [pc, #416]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003122:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003126:	6093      	str	r3, [r2, #8]
 8003128:	4b66      	ldr	r3, [pc, #408]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003130:	4964      	ldr	r1, [pc, #400]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003132:	4313      	orrs	r3, r2
 8003134:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800313e:	2301      	movs	r3, #1
 8003140:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d017      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800314e:	4b5d      	ldr	r3, [pc, #372]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003150:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003154:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800315c:	4959      	ldr	r1, [pc, #356]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003168:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800316c:	d101      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800316e:	2301      	movs	r3, #1
 8003170:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800317a:	2301      	movs	r3, #1
 800317c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d017      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800318a:	4b4e      	ldr	r3, [pc, #312]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003190:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003198:	494a      	ldr	r1, [pc, #296]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031a8:	d101      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80031aa:	2301      	movs	r3, #1
 80031ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80031b6:	2301      	movs	r3, #1
 80031b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80031c6:	2301      	movs	r3, #1
 80031c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 808b 	beq.w	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80031d8:	4b3a      	ldr	r3, [pc, #232]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031dc:	4a39      	ldr	r2, [pc, #228]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80031e4:	4b37      	ldr	r3, [pc, #220]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031f0:	4b35      	ldr	r3, [pc, #212]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a34      	ldr	r2, [pc, #208]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031fc:	f7fd feb0 	bl	8000f60 <HAL_GetTick>
 8003200:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003204:	f7fd feac 	bl	8000f60 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	@ 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e38f      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003216:	4b2c      	ldr	r3, [pc, #176]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003222:	4b28      	ldr	r3, [pc, #160]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003226:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800322a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d035      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003236:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	429a      	cmp	r2, r3
 800323e:	d02e      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003240:	4b20      	ldr	r3, [pc, #128]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003244:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003248:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800324a:	4b1e      	ldr	r3, [pc, #120]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800324e:	4a1d      	ldr	r2, [pc, #116]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003254:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003256:	4b1b      	ldr	r3, [pc, #108]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325a:	4a1a      	ldr	r2, [pc, #104]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800325c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003260:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003262:	4a18      	ldr	r2, [pc, #96]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003268:	4b16      	ldr	r3, [pc, #88]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b01      	cmp	r3, #1
 8003272:	d114      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fd fe74 	bl	8000f60 <HAL_GetTick>
 8003278:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327a:	e00a      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800327c:	f7fd fe70 	bl	8000f60 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800328a:	4293      	cmp	r3, r2
 800328c:	d901      	bls.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e351      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003292:	4b0c      	ldr	r3, [pc, #48]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0ee      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032aa:	d111      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80032ac:	4b05      	ldr	r3, [pc, #20]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80032b8:	4b04      	ldr	r3, [pc, #16]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032ba:	400b      	ands	r3, r1
 80032bc:	4901      	ldr	r1, [pc, #4]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	608b      	str	r3, [r1, #8]
 80032c2:	e00b      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40007000 	.word	0x40007000
 80032cc:	0ffffcff 	.word	0x0ffffcff
 80032d0:	4bac      	ldr	r3, [pc, #688]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	4aab      	ldr	r2, [pc, #684]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032d6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80032da:	6093      	str	r3, [r2, #8]
 80032dc:	4ba9      	ldr	r3, [pc, #676]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e8:	49a6      	ldr	r1, [pc, #664]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d010      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032fa:	4ba2      	ldr	r3, [pc, #648]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003300:	4aa0      	ldr	r2, [pc, #640]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003302:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003306:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800330a:	4b9e      	ldr	r3, [pc, #632]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800330c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003314:	499b      	ldr	r1, [pc, #620]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003328:	4b96      	ldr	r3, [pc, #600]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003336:	4993      	ldr	r1, [pc, #588]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800334a:	4b8e      	ldr	r3, [pc, #568]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003350:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003358:	498a      	ldr	r1, [pc, #552]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800336c:	4b85      	ldr	r3, [pc, #532]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003372:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800337a:	4982      	ldr	r1, [pc, #520]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800338e:	4b7d      	ldr	r3, [pc, #500]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003394:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339c:	4979      	ldr	r1, [pc, #484]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033b0:	4b74      	ldr	r3, [pc, #464]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b6:	f023 0203 	bic.w	r2, r3, #3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033be:	4971      	ldr	r1, [pc, #452]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d8:	f023 020c 	bic.w	r2, r3, #12
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033e0:	4968      	ldr	r1, [pc, #416]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033f4:	4b63      	ldr	r3, [pc, #396]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003402:	4960      	ldr	r1, [pc, #384]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003416:	4b5b      	ldr	r3, [pc, #364]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003424:	4957      	ldr	r1, [pc, #348]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003438:	4b52      	ldr	r3, [pc, #328]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003446:	494f      	ldr	r1, [pc, #316]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800345a:	4b4a      	ldr	r3, [pc, #296]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003460:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003468:	4946      	ldr	r1, [pc, #280]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800347c:	4b41      	ldr	r3, [pc, #260]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003482:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348a:	493e      	ldr	r1, [pc, #248]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800349e:	4b39      	ldr	r3, [pc, #228]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ac:	4935      	ldr	r1, [pc, #212]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034c0:	4b30      	ldr	r3, [pc, #192]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034ce:	492d      	ldr	r1, [pc, #180]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d011      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80034e2:	4b28      	ldr	r3, [pc, #160]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034f0:	4924      	ldr	r1, [pc, #144]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003500:	d101      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003502:	2301      	movs	r3, #1
 8003504:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003512:	2301      	movs	r3, #1
 8003514:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003522:	4b18      	ldr	r3, [pc, #96]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003528:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003530:	4914      	ldr	r1, [pc, #80]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00b      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003544:	4b0f      	ldr	r3, [pc, #60]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003554:	490b      	ldr	r1, [pc, #44]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00f      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003568:	4b06      	ldr	r3, [pc, #24]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800356e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003578:	4902      	ldr	r1, [pc, #8]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003580:	e002      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00b      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003594:	4b8a      	ldr	r3, [pc, #552]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003596:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800359a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a4:	4986      	ldr	r1, [pc, #536]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00b      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80035b8:	4b81      	ldr	r3, [pc, #516]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035be:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035c8:	497d      	ldr	r1, [pc, #500]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d006      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 80d6 	beq.w	8003790 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035e4:	4b76      	ldr	r3, [pc, #472]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a75      	ldr	r2, [pc, #468]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80035ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f0:	f7fd fcb6 	bl	8000f60 <HAL_GetTick>
 80035f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035f8:	f7fd fcb2 	bl	8000f60 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	@ 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e195      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800360a:	4b6d      	ldr	r3, [pc, #436]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d021      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003626:	2b00      	cmp	r3, #0
 8003628:	d11d      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800362a:	4b65      	ldr	r3, [pc, #404]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800362c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003630:	0c1b      	lsrs	r3, r3, #16
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003638:	4b61      	ldr	r3, [pc, #388]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800363a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800363e:	0e1b      	lsrs	r3, r3, #24
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	019a      	lsls	r2, r3, #6
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	041b      	lsls	r3, r3, #16
 8003650:	431a      	orrs	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	061b      	lsls	r3, r3, #24
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	071b      	lsls	r3, r3, #28
 800365e:	4958      	ldr	r1, [pc, #352]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d004      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003676:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800367a:	d00a      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003684:	2b00      	cmp	r3, #0
 8003686:	d02e      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003690:	d129      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003692:	4b4b      	ldr	r3, [pc, #300]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003698:	0c1b      	lsrs	r3, r3, #16
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036a0:	4b47      	ldr	r3, [pc, #284]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036a6:	0f1b      	lsrs	r3, r3, #28
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	019a      	lsls	r2, r3, #6
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	041b      	lsls	r3, r3, #16
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	061b      	lsls	r3, r3, #24
 80036c0:	431a      	orrs	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	071b      	lsls	r3, r3, #28
 80036c6:	493e      	ldr	r1, [pc, #248]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80036ce:	4b3c      	ldr	r3, [pc, #240]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036d4:	f023 021f 	bic.w	r2, r3, #31
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036dc:	3b01      	subs	r3, #1
 80036de:	4938      	ldr	r1, [pc, #224]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d01d      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036f2:	4b33      	ldr	r3, [pc, #204]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036f8:	0e1b      	lsrs	r3, r3, #24
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003700:	4b2f      	ldr	r3, [pc, #188]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003702:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003706:	0f1b      	lsrs	r3, r3, #28
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	019a      	lsls	r2, r3, #6
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	041b      	lsls	r3, r3, #16
 800371a:	431a      	orrs	r2, r3
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	061b      	lsls	r3, r3, #24
 8003720:	431a      	orrs	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	071b      	lsls	r3, r3, #28
 8003726:	4926      	ldr	r1, [pc, #152]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d011      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	019a      	lsls	r2, r3, #6
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	041b      	lsls	r3, r3, #16
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	061b      	lsls	r3, r3, #24
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	071b      	lsls	r3, r3, #28
 8003756:	491a      	ldr	r1, [pc, #104]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800375e:	4b18      	ldr	r3, [pc, #96]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a17      	ldr	r2, [pc, #92]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003764:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800376a:	f7fd fbf9 	bl	8000f60 <HAL_GetTick>
 800376e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003770:	e008      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003772:	f7fd fbf5 	bl	8000f60 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b64      	cmp	r3, #100	@ 0x64
 800377e:	d901      	bls.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e0d8      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003784:	4b0e      	ldr	r3, [pc, #56]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0f0      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	2b01      	cmp	r3, #1
 8003794:	f040 80ce 	bne.w	8003934 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003798:	4b09      	ldr	r3, [pc, #36]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a08      	ldr	r2, [pc, #32]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800379e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a4:	f7fd fbdc 	bl	8000f60 <HAL_GetTick>
 80037a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037aa:	e00b      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037ac:	f7fd fbd8 	bl	8000f60 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b64      	cmp	r3, #100	@ 0x64
 80037b8:	d904      	bls.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e0bb      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80037be:	bf00      	nop
 80037c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037c4:	4b5e      	ldr	r3, [pc, #376]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037d0:	d0ec      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d02e      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d12a      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037fa:	4b51      	ldr	r3, [pc, #324]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003800:	0c1b      	lsrs	r3, r3, #16
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003808:	4b4d      	ldr	r3, [pc, #308]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800380e:	0f1b      	lsrs	r3, r3, #28
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	019a      	lsls	r2, r3, #6
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	041b      	lsls	r3, r3, #16
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	061b      	lsls	r3, r3, #24
 8003828:	431a      	orrs	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	071b      	lsls	r3, r3, #28
 800382e:	4944      	ldr	r1, [pc, #272]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003836:	4b42      	ldr	r3, [pc, #264]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003838:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800383c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003844:	3b01      	subs	r3, #1
 8003846:	021b      	lsls	r3, r3, #8
 8003848:	493d      	ldr	r1, [pc, #244]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d022      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003860:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003864:	d11d      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003866:	4b36      	ldr	r3, [pc, #216]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386c:	0e1b      	lsrs	r3, r3, #24
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003874:	4b32      	ldr	r3, [pc, #200]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387a:	0f1b      	lsrs	r3, r3, #28
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	019a      	lsls	r2, r3, #6
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	041b      	lsls	r3, r3, #16
 800388e:	431a      	orrs	r2, r3
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	061b      	lsls	r3, r3, #24
 8003894:	431a      	orrs	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	071b      	lsls	r3, r3, #28
 800389a:	4929      	ldr	r1, [pc, #164]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d028      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038ae:	4b24      	ldr	r3, [pc, #144]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b4:	0e1b      	lsrs	r3, r3, #24
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038bc:	4b20      	ldr	r3, [pc, #128]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c2:	0c1b      	lsrs	r3, r3, #16
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	019a      	lsls	r2, r3, #6
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	041b      	lsls	r3, r3, #16
 80038d4:	431a      	orrs	r2, r3
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	061b      	lsls	r3, r3, #24
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	071b      	lsls	r3, r3, #28
 80038e2:	4917      	ldr	r1, [pc, #92]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80038ea:	4b15      	ldr	r3, [pc, #84]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f8:	4911      	ldr	r1, [pc, #68]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003900:	4b0f      	ldr	r3, [pc, #60]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a0e      	ldr	r2, [pc, #56]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003906:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800390a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800390c:	f7fd fb28 	bl	8000f60 <HAL_GetTick>
 8003910:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003914:	f7fd fb24 	bl	8000f60 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	@ 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e007      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003926:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800392e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003932:	d1ef      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3720      	adds	r7, #32
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40023800 	.word	0x40023800

08003944 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e040      	b.n	80039d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fd fa20 	bl	8000dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2224      	movs	r2, #36	@ 0x24
 8003970:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0201 	bic.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fb16 	bl	8003fbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f8af 	bl	8003af4 <UART_SetConfig>
 8003996:	4603      	mov	r3, r0
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e01b      	b.n	80039d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 fb95 	bl	8004100 <UART_CheckIdleState>
 80039d6:	4603      	mov	r3, r0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08a      	sub	sp, #40	@ 0x28
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d177      	bne.n	8003ae8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_UART_Transmit+0x24>
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e070      	b.n	8003aea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2221      	movs	r2, #33	@ 0x21
 8003a14:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a16:	f7fd faa3 	bl	8000f60 <HAL_GetTick>
 8003a1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	88fa      	ldrh	r2, [r7, #6]
 8003a20:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	88fa      	ldrh	r2, [r7, #6]
 8003a28:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a34:	d108      	bne.n	8003a48 <HAL_UART_Transmit+0x68>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d104      	bne.n	8003a48 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	e003      	b.n	8003a50 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a50:	e02f      	b.n	8003ab2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2180      	movs	r1, #128	@ 0x80
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 fbf7 	bl	8004250 <UART_WaitOnFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d004      	beq.n	8003a72 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e03b      	b.n	8003aea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10b      	bne.n	8003a90 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a86:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	3302      	adds	r3, #2
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	e007      	b.n	8003aa0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	781a      	ldrb	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1c9      	bne.n	8003a52 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2140      	movs	r1, #64	@ 0x40
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 fbc1 	bl	8004250 <UART_WaitOnFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d004      	beq.n	8003ade <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e005      	b.n	8003aea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	e000      	b.n	8003aea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003ae8:	2302      	movs	r3, #2
  }
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3720      	adds	r7, #32
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4ba6      	ldr	r3, [pc, #664]	@ (8003db8 <UART_SetConfig+0x2c4>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6812      	ldr	r2, [r2, #0]
 8003b26:	6979      	ldr	r1, [r7, #20]
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a94      	ldr	r2, [pc, #592]	@ (8003dbc <UART_SetConfig+0x2c8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d120      	bne.n	8003bb2 <UART_SetConfig+0xbe>
 8003b70:	4b93      	ldr	r3, [pc, #588]	@ (8003dc0 <UART_SetConfig+0x2cc>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d816      	bhi.n	8003bac <UART_SetConfig+0xb8>
 8003b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b84 <UART_SetConfig+0x90>)
 8003b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b84:	08003b95 	.word	0x08003b95
 8003b88:	08003ba1 	.word	0x08003ba1
 8003b8c:	08003b9b 	.word	0x08003b9b
 8003b90:	08003ba7 	.word	0x08003ba7
 8003b94:	2301      	movs	r3, #1
 8003b96:	77fb      	strb	r3, [r7, #31]
 8003b98:	e150      	b.n	8003e3c <UART_SetConfig+0x348>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	77fb      	strb	r3, [r7, #31]
 8003b9e:	e14d      	b.n	8003e3c <UART_SetConfig+0x348>
 8003ba0:	2304      	movs	r3, #4
 8003ba2:	77fb      	strb	r3, [r7, #31]
 8003ba4:	e14a      	b.n	8003e3c <UART_SetConfig+0x348>
 8003ba6:	2308      	movs	r3, #8
 8003ba8:	77fb      	strb	r3, [r7, #31]
 8003baa:	e147      	b.n	8003e3c <UART_SetConfig+0x348>
 8003bac:	2310      	movs	r3, #16
 8003bae:	77fb      	strb	r3, [r7, #31]
 8003bb0:	e144      	b.n	8003e3c <UART_SetConfig+0x348>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a83      	ldr	r2, [pc, #524]	@ (8003dc4 <UART_SetConfig+0x2d0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d132      	bne.n	8003c22 <UART_SetConfig+0x12e>
 8003bbc:	4b80      	ldr	r3, [pc, #512]	@ (8003dc0 <UART_SetConfig+0x2cc>)
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc2:	f003 030c 	and.w	r3, r3, #12
 8003bc6:	2b0c      	cmp	r3, #12
 8003bc8:	d828      	bhi.n	8003c1c <UART_SetConfig+0x128>
 8003bca:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd0 <UART_SetConfig+0xdc>)
 8003bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd0:	08003c05 	.word	0x08003c05
 8003bd4:	08003c1d 	.word	0x08003c1d
 8003bd8:	08003c1d 	.word	0x08003c1d
 8003bdc:	08003c1d 	.word	0x08003c1d
 8003be0:	08003c11 	.word	0x08003c11
 8003be4:	08003c1d 	.word	0x08003c1d
 8003be8:	08003c1d 	.word	0x08003c1d
 8003bec:	08003c1d 	.word	0x08003c1d
 8003bf0:	08003c0b 	.word	0x08003c0b
 8003bf4:	08003c1d 	.word	0x08003c1d
 8003bf8:	08003c1d 	.word	0x08003c1d
 8003bfc:	08003c1d 	.word	0x08003c1d
 8003c00:	08003c17 	.word	0x08003c17
 8003c04:	2300      	movs	r3, #0
 8003c06:	77fb      	strb	r3, [r7, #31]
 8003c08:	e118      	b.n	8003e3c <UART_SetConfig+0x348>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	77fb      	strb	r3, [r7, #31]
 8003c0e:	e115      	b.n	8003e3c <UART_SetConfig+0x348>
 8003c10:	2304      	movs	r3, #4
 8003c12:	77fb      	strb	r3, [r7, #31]
 8003c14:	e112      	b.n	8003e3c <UART_SetConfig+0x348>
 8003c16:	2308      	movs	r3, #8
 8003c18:	77fb      	strb	r3, [r7, #31]
 8003c1a:	e10f      	b.n	8003e3c <UART_SetConfig+0x348>
 8003c1c:	2310      	movs	r3, #16
 8003c1e:	77fb      	strb	r3, [r7, #31]
 8003c20:	e10c      	b.n	8003e3c <UART_SetConfig+0x348>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a68      	ldr	r2, [pc, #416]	@ (8003dc8 <UART_SetConfig+0x2d4>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d120      	bne.n	8003c6e <UART_SetConfig+0x17a>
 8003c2c:	4b64      	ldr	r3, [pc, #400]	@ (8003dc0 <UART_SetConfig+0x2cc>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c32:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c36:	2b30      	cmp	r3, #48	@ 0x30
 8003c38:	d013      	beq.n	8003c62 <UART_SetConfig+0x16e>
 8003c3a:	2b30      	cmp	r3, #48	@ 0x30
 8003c3c:	d814      	bhi.n	8003c68 <UART_SetConfig+0x174>
 8003c3e:	2b20      	cmp	r3, #32
 8003c40:	d009      	beq.n	8003c56 <UART_SetConfig+0x162>
 8003c42:	2b20      	cmp	r3, #32
 8003c44:	d810      	bhi.n	8003c68 <UART_SetConfig+0x174>
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <UART_SetConfig+0x15c>
 8003c4a:	2b10      	cmp	r3, #16
 8003c4c:	d006      	beq.n	8003c5c <UART_SetConfig+0x168>
 8003c4e:	e00b      	b.n	8003c68 <UART_SetConfig+0x174>
 8003c50:	2300      	movs	r3, #0
 8003c52:	77fb      	strb	r3, [r7, #31]
 8003c54:	e0f2      	b.n	8003e3c <UART_SetConfig+0x348>
 8003c56:	2302      	movs	r3, #2
 8003c58:	77fb      	strb	r3, [r7, #31]
 8003c5a:	e0ef      	b.n	8003e3c <UART_SetConfig+0x348>
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	77fb      	strb	r3, [r7, #31]
 8003c60:	e0ec      	b.n	8003e3c <UART_SetConfig+0x348>
 8003c62:	2308      	movs	r3, #8
 8003c64:	77fb      	strb	r3, [r7, #31]
 8003c66:	e0e9      	b.n	8003e3c <UART_SetConfig+0x348>
 8003c68:	2310      	movs	r3, #16
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e0e6      	b.n	8003e3c <UART_SetConfig+0x348>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a56      	ldr	r2, [pc, #344]	@ (8003dcc <UART_SetConfig+0x2d8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d120      	bne.n	8003cba <UART_SetConfig+0x1c6>
 8003c78:	4b51      	ldr	r3, [pc, #324]	@ (8003dc0 <UART_SetConfig+0x2cc>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003c82:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c84:	d013      	beq.n	8003cae <UART_SetConfig+0x1ba>
 8003c86:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c88:	d814      	bhi.n	8003cb4 <UART_SetConfig+0x1c0>
 8003c8a:	2b80      	cmp	r3, #128	@ 0x80
 8003c8c:	d009      	beq.n	8003ca2 <UART_SetConfig+0x1ae>
 8003c8e:	2b80      	cmp	r3, #128	@ 0x80
 8003c90:	d810      	bhi.n	8003cb4 <UART_SetConfig+0x1c0>
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <UART_SetConfig+0x1a8>
 8003c96:	2b40      	cmp	r3, #64	@ 0x40
 8003c98:	d006      	beq.n	8003ca8 <UART_SetConfig+0x1b4>
 8003c9a:	e00b      	b.n	8003cb4 <UART_SetConfig+0x1c0>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	77fb      	strb	r3, [r7, #31]
 8003ca0:	e0cc      	b.n	8003e3c <UART_SetConfig+0x348>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	77fb      	strb	r3, [r7, #31]
 8003ca6:	e0c9      	b.n	8003e3c <UART_SetConfig+0x348>
 8003ca8:	2304      	movs	r3, #4
 8003caa:	77fb      	strb	r3, [r7, #31]
 8003cac:	e0c6      	b.n	8003e3c <UART_SetConfig+0x348>
 8003cae:	2308      	movs	r3, #8
 8003cb0:	77fb      	strb	r3, [r7, #31]
 8003cb2:	e0c3      	b.n	8003e3c <UART_SetConfig+0x348>
 8003cb4:	2310      	movs	r3, #16
 8003cb6:	77fb      	strb	r3, [r7, #31]
 8003cb8:	e0c0      	b.n	8003e3c <UART_SetConfig+0x348>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a44      	ldr	r2, [pc, #272]	@ (8003dd0 <UART_SetConfig+0x2dc>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d125      	bne.n	8003d10 <UART_SetConfig+0x21c>
 8003cc4:	4b3e      	ldr	r3, [pc, #248]	@ (8003dc0 <UART_SetConfig+0x2cc>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cd2:	d017      	beq.n	8003d04 <UART_SetConfig+0x210>
 8003cd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cd8:	d817      	bhi.n	8003d0a <UART_SetConfig+0x216>
 8003cda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cde:	d00b      	beq.n	8003cf8 <UART_SetConfig+0x204>
 8003ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ce4:	d811      	bhi.n	8003d0a <UART_SetConfig+0x216>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <UART_SetConfig+0x1fe>
 8003cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cee:	d006      	beq.n	8003cfe <UART_SetConfig+0x20a>
 8003cf0:	e00b      	b.n	8003d0a <UART_SetConfig+0x216>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	77fb      	strb	r3, [r7, #31]
 8003cf6:	e0a1      	b.n	8003e3c <UART_SetConfig+0x348>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	77fb      	strb	r3, [r7, #31]
 8003cfc:	e09e      	b.n	8003e3c <UART_SetConfig+0x348>
 8003cfe:	2304      	movs	r3, #4
 8003d00:	77fb      	strb	r3, [r7, #31]
 8003d02:	e09b      	b.n	8003e3c <UART_SetConfig+0x348>
 8003d04:	2308      	movs	r3, #8
 8003d06:	77fb      	strb	r3, [r7, #31]
 8003d08:	e098      	b.n	8003e3c <UART_SetConfig+0x348>
 8003d0a:	2310      	movs	r3, #16
 8003d0c:	77fb      	strb	r3, [r7, #31]
 8003d0e:	e095      	b.n	8003e3c <UART_SetConfig+0x348>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a2f      	ldr	r2, [pc, #188]	@ (8003dd4 <UART_SetConfig+0x2e0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d125      	bne.n	8003d66 <UART_SetConfig+0x272>
 8003d1a:	4b29      	ldr	r3, [pc, #164]	@ (8003dc0 <UART_SetConfig+0x2cc>)
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d28:	d017      	beq.n	8003d5a <UART_SetConfig+0x266>
 8003d2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d2e:	d817      	bhi.n	8003d60 <UART_SetConfig+0x26c>
 8003d30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d34:	d00b      	beq.n	8003d4e <UART_SetConfig+0x25a>
 8003d36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d3a:	d811      	bhi.n	8003d60 <UART_SetConfig+0x26c>
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <UART_SetConfig+0x254>
 8003d40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d44:	d006      	beq.n	8003d54 <UART_SetConfig+0x260>
 8003d46:	e00b      	b.n	8003d60 <UART_SetConfig+0x26c>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	77fb      	strb	r3, [r7, #31]
 8003d4c:	e076      	b.n	8003e3c <UART_SetConfig+0x348>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	77fb      	strb	r3, [r7, #31]
 8003d52:	e073      	b.n	8003e3c <UART_SetConfig+0x348>
 8003d54:	2304      	movs	r3, #4
 8003d56:	77fb      	strb	r3, [r7, #31]
 8003d58:	e070      	b.n	8003e3c <UART_SetConfig+0x348>
 8003d5a:	2308      	movs	r3, #8
 8003d5c:	77fb      	strb	r3, [r7, #31]
 8003d5e:	e06d      	b.n	8003e3c <UART_SetConfig+0x348>
 8003d60:	2310      	movs	r3, #16
 8003d62:	77fb      	strb	r3, [r7, #31]
 8003d64:	e06a      	b.n	8003e3c <UART_SetConfig+0x348>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8003dd8 <UART_SetConfig+0x2e4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d138      	bne.n	8003de2 <UART_SetConfig+0x2ee>
 8003d70:	4b13      	ldr	r3, [pc, #76]	@ (8003dc0 <UART_SetConfig+0x2cc>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d76:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003d7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d7e:	d017      	beq.n	8003db0 <UART_SetConfig+0x2bc>
 8003d80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d84:	d82a      	bhi.n	8003ddc <UART_SetConfig+0x2e8>
 8003d86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d8a:	d00b      	beq.n	8003da4 <UART_SetConfig+0x2b0>
 8003d8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d90:	d824      	bhi.n	8003ddc <UART_SetConfig+0x2e8>
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <UART_SetConfig+0x2aa>
 8003d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d9a:	d006      	beq.n	8003daa <UART_SetConfig+0x2b6>
 8003d9c:	e01e      	b.n	8003ddc <UART_SetConfig+0x2e8>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	77fb      	strb	r3, [r7, #31]
 8003da2:	e04b      	b.n	8003e3c <UART_SetConfig+0x348>
 8003da4:	2302      	movs	r3, #2
 8003da6:	77fb      	strb	r3, [r7, #31]
 8003da8:	e048      	b.n	8003e3c <UART_SetConfig+0x348>
 8003daa:	2304      	movs	r3, #4
 8003dac:	77fb      	strb	r3, [r7, #31]
 8003dae:	e045      	b.n	8003e3c <UART_SetConfig+0x348>
 8003db0:	2308      	movs	r3, #8
 8003db2:	77fb      	strb	r3, [r7, #31]
 8003db4:	e042      	b.n	8003e3c <UART_SetConfig+0x348>
 8003db6:	bf00      	nop
 8003db8:	efff69f3 	.word	0xefff69f3
 8003dbc:	40011000 	.word	0x40011000
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	40004400 	.word	0x40004400
 8003dc8:	40004800 	.word	0x40004800
 8003dcc:	40004c00 	.word	0x40004c00
 8003dd0:	40005000 	.word	0x40005000
 8003dd4:	40011400 	.word	0x40011400
 8003dd8:	40007800 	.word	0x40007800
 8003ddc:	2310      	movs	r3, #16
 8003dde:	77fb      	strb	r3, [r7, #31]
 8003de0:	e02c      	b.n	8003e3c <UART_SetConfig+0x348>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a72      	ldr	r2, [pc, #456]	@ (8003fb0 <UART_SetConfig+0x4bc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d125      	bne.n	8003e38 <UART_SetConfig+0x344>
 8003dec:	4b71      	ldr	r3, [pc, #452]	@ (8003fb4 <UART_SetConfig+0x4c0>)
 8003dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003df6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003dfa:	d017      	beq.n	8003e2c <UART_SetConfig+0x338>
 8003dfc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003e00:	d817      	bhi.n	8003e32 <UART_SetConfig+0x33e>
 8003e02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e06:	d00b      	beq.n	8003e20 <UART_SetConfig+0x32c>
 8003e08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e0c:	d811      	bhi.n	8003e32 <UART_SetConfig+0x33e>
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <UART_SetConfig+0x326>
 8003e12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e16:	d006      	beq.n	8003e26 <UART_SetConfig+0x332>
 8003e18:	e00b      	b.n	8003e32 <UART_SetConfig+0x33e>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	77fb      	strb	r3, [r7, #31]
 8003e1e:	e00d      	b.n	8003e3c <UART_SetConfig+0x348>
 8003e20:	2302      	movs	r3, #2
 8003e22:	77fb      	strb	r3, [r7, #31]
 8003e24:	e00a      	b.n	8003e3c <UART_SetConfig+0x348>
 8003e26:	2304      	movs	r3, #4
 8003e28:	77fb      	strb	r3, [r7, #31]
 8003e2a:	e007      	b.n	8003e3c <UART_SetConfig+0x348>
 8003e2c:	2308      	movs	r3, #8
 8003e2e:	77fb      	strb	r3, [r7, #31]
 8003e30:	e004      	b.n	8003e3c <UART_SetConfig+0x348>
 8003e32:	2310      	movs	r3, #16
 8003e34:	77fb      	strb	r3, [r7, #31]
 8003e36:	e001      	b.n	8003e3c <UART_SetConfig+0x348>
 8003e38:	2310      	movs	r3, #16
 8003e3a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e44:	d15b      	bne.n	8003efe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003e46:	7ffb      	ldrb	r3, [r7, #31]
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d828      	bhi.n	8003e9e <UART_SetConfig+0x3aa>
 8003e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e54 <UART_SetConfig+0x360>)
 8003e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e52:	bf00      	nop
 8003e54:	08003e79 	.word	0x08003e79
 8003e58:	08003e81 	.word	0x08003e81
 8003e5c:	08003e89 	.word	0x08003e89
 8003e60:	08003e9f 	.word	0x08003e9f
 8003e64:	08003e8f 	.word	0x08003e8f
 8003e68:	08003e9f 	.word	0x08003e9f
 8003e6c:	08003e9f 	.word	0x08003e9f
 8003e70:	08003e9f 	.word	0x08003e9f
 8003e74:	08003e97 	.word	0x08003e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e78:	f7ff f914 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 8003e7c:	61b8      	str	r0, [r7, #24]
        break;
 8003e7e:	e013      	b.n	8003ea8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e80:	f7ff f924 	bl	80030cc <HAL_RCC_GetPCLK2Freq>
 8003e84:	61b8      	str	r0, [r7, #24]
        break;
 8003e86:	e00f      	b.n	8003ea8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e88:	4b4b      	ldr	r3, [pc, #300]	@ (8003fb8 <UART_SetConfig+0x4c4>)
 8003e8a:	61bb      	str	r3, [r7, #24]
        break;
 8003e8c:	e00c      	b.n	8003ea8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e8e:	f7ff f837 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8003e92:	61b8      	str	r0, [r7, #24]
        break;
 8003e94:	e008      	b.n	8003ea8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e9a:	61bb      	str	r3, [r7, #24]
        break;
 8003e9c:	e004      	b.n	8003ea8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	77bb      	strb	r3, [r7, #30]
        break;
 8003ea6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d074      	beq.n	8003f98 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	005a      	lsls	r2, r3, #1
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	085b      	lsrs	r3, r3, #1
 8003eb8:	441a      	add	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	2b0f      	cmp	r3, #15
 8003ec8:	d916      	bls.n	8003ef8 <UART_SetConfig+0x404>
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ed0:	d212      	bcs.n	8003ef8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	f023 030f 	bic.w	r3, r3, #15
 8003eda:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	085b      	lsrs	r3, r3, #1
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	89fb      	ldrh	r3, [r7, #14]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	89fa      	ldrh	r2, [r7, #14]
 8003ef4:	60da      	str	r2, [r3, #12]
 8003ef6:	e04f      	b.n	8003f98 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	77bb      	strb	r3, [r7, #30]
 8003efc:	e04c      	b.n	8003f98 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003efe:	7ffb      	ldrb	r3, [r7, #31]
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d828      	bhi.n	8003f56 <UART_SetConfig+0x462>
 8003f04:	a201      	add	r2, pc, #4	@ (adr r2, 8003f0c <UART_SetConfig+0x418>)
 8003f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0a:	bf00      	nop
 8003f0c:	08003f31 	.word	0x08003f31
 8003f10:	08003f39 	.word	0x08003f39
 8003f14:	08003f41 	.word	0x08003f41
 8003f18:	08003f57 	.word	0x08003f57
 8003f1c:	08003f47 	.word	0x08003f47
 8003f20:	08003f57 	.word	0x08003f57
 8003f24:	08003f57 	.word	0x08003f57
 8003f28:	08003f57 	.word	0x08003f57
 8003f2c:	08003f4f 	.word	0x08003f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f30:	f7ff f8b8 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 8003f34:	61b8      	str	r0, [r7, #24]
        break;
 8003f36:	e013      	b.n	8003f60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f38:	f7ff f8c8 	bl	80030cc <HAL_RCC_GetPCLK2Freq>
 8003f3c:	61b8      	str	r0, [r7, #24]
        break;
 8003f3e:	e00f      	b.n	8003f60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f40:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb8 <UART_SetConfig+0x4c4>)
 8003f42:	61bb      	str	r3, [r7, #24]
        break;
 8003f44:	e00c      	b.n	8003f60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f46:	f7fe ffdb 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8003f4a:	61b8      	str	r0, [r7, #24]
        break;
 8003f4c:	e008      	b.n	8003f60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f52:	61bb      	str	r3, [r7, #24]
        break;
 8003f54:	e004      	b.n	8003f60 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	77bb      	strb	r3, [r7, #30]
        break;
 8003f5e:	bf00      	nop
    }

    if (pclk != 0U)
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d018      	beq.n	8003f98 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	085a      	lsrs	r2, r3, #1
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	441a      	add	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	2b0f      	cmp	r3, #15
 8003f7e:	d909      	bls.n	8003f94 <UART_SetConfig+0x4a0>
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f86:	d205      	bcs.n	8003f94 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	60da      	str	r2, [r3, #12]
 8003f92:	e001      	b.n	8003f98 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003fa4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3720      	adds	r7, #32
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40007c00 	.word	0x40007c00
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	00f42400 	.word	0x00f42400

08003fbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004098:	2b00      	cmp	r3, #0
 800409a:	d01a      	beq.n	80040d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040ba:	d10a      	bne.n	80040d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	605a      	str	r2, [r3, #4]
  }
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b098      	sub	sp, #96	@ 0x60
 8004104:	af02      	add	r7, sp, #8
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004110:	f7fc ff26 	bl	8000f60 <HAL_GetTick>
 8004114:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b08      	cmp	r3, #8
 8004122:	d12e      	bne.n	8004182 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004124:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800412c:	2200      	movs	r2, #0
 800412e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f88c 	bl	8004250 <UART_WaitOnFlagUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d021      	beq.n	8004182 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004146:	e853 3f00 	ldrex	r3, [r3]
 800414a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800414c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800414e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004152:	653b      	str	r3, [r7, #80]	@ 0x50
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800415c:	647b      	str	r3, [r7, #68]	@ 0x44
 800415e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004160:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004162:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004164:	e841 2300 	strex	r3, r2, [r1]
 8004168:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800416a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e6      	bne.n	800413e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2220      	movs	r2, #32
 8004174:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e062      	b.n	8004248 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b04      	cmp	r3, #4
 800418e:	d149      	bne.n	8004224 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004190:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004198:	2200      	movs	r2, #0
 800419a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f856 	bl	8004250 <UART_WaitOnFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d03c      	beq.n	8004224 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b2:	e853 3f00 	ldrex	r3, [r3]
 80041b6:	623b      	str	r3, [r7, #32]
   return(result);
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80041ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041d0:	e841 2300 	strex	r3, r2, [r1]
 80041d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e6      	bne.n	80041aa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3308      	adds	r3, #8
 80041e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	e853 3f00 	ldrex	r3, [r3]
 80041ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0301 	bic.w	r3, r3, #1
 80041f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3308      	adds	r3, #8
 80041fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041fc:	61fa      	str	r2, [r7, #28]
 80041fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004200:	69b9      	ldr	r1, [r7, #24]
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	e841 2300 	strex	r3, r2, [r1]
 8004208:	617b      	str	r3, [r7, #20]
   return(result);
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e5      	bne.n	80041dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e011      	b.n	8004248 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2220      	movs	r2, #32
 8004228:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2220      	movs	r2, #32
 800422e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3758      	adds	r7, #88	@ 0x58
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	4613      	mov	r3, r2
 800425e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004260:	e04f      	b.n	8004302 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004268:	d04b      	beq.n	8004302 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426a:	f7fc fe79 	bl	8000f60 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	429a      	cmp	r2, r3
 8004278:	d302      	bcc.n	8004280 <UART_WaitOnFlagUntilTimeout+0x30>
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e04e      	b.n	8004322 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b00      	cmp	r3, #0
 8004290:	d037      	beq.n	8004302 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b80      	cmp	r3, #128	@ 0x80
 8004296:	d034      	beq.n	8004302 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b40      	cmp	r3, #64	@ 0x40
 800429c:	d031      	beq.n	8004302 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d110      	bne.n	80042ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2208      	movs	r2, #8
 80042b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 f838 	bl	800432a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2208      	movs	r2, #8
 80042be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e029      	b.n	8004322 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042dc:	d111      	bne.n	8004302 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 f81e 	bl	800432a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e00f      	b.n	8004322 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69da      	ldr	r2, [r3, #28]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4013      	ands	r3, r2
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	429a      	cmp	r2, r3
 8004310:	bf0c      	ite	eq
 8004312:	2301      	moveq	r3, #1
 8004314:	2300      	movne	r3, #0
 8004316:	b2db      	uxtb	r3, r3
 8004318:	461a      	mov	r2, r3
 800431a:	79fb      	ldrb	r3, [r7, #7]
 800431c:	429a      	cmp	r2, r3
 800431e:	d0a0      	beq.n	8004262 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800432a:	b480      	push	{r7}
 800432c:	b095      	sub	sp, #84	@ 0x54
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800433a:	e853 3f00 	ldrex	r3, [r3]
 800433e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004342:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004346:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004350:	643b      	str	r3, [r7, #64]	@ 0x40
 8004352:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004354:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004356:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004358:	e841 2300 	strex	r3, r2, [r1]
 800435c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800435e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1e6      	bne.n	8004332 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3308      	adds	r3, #8
 800436a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	e853 3f00 	ldrex	r3, [r3]
 8004372:	61fb      	str	r3, [r7, #28]
   return(result);
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f023 0301 	bic.w	r3, r3, #1
 800437a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3308      	adds	r3, #8
 8004382:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004384:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004386:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800438a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800438c:	e841 2300 	strex	r3, r2, [r1]
 8004390:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e5      	bne.n	8004364 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800439c:	2b01      	cmp	r3, #1
 800439e:	d118      	bne.n	80043d2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f023 0310 	bic.w	r3, r3, #16
 80043b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	6979      	ldr	r1, [r7, #20]
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	613b      	str	r3, [r7, #16]
   return(result);
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1e6      	bne.n	80043a0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043e6:	bf00      	nop
 80043e8:	3754      	adds	r7, #84	@ 0x54
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <sniprintf>:
 80043f4:	b40c      	push	{r2, r3}
 80043f6:	b530      	push	{r4, r5, lr}
 80043f8:	4b17      	ldr	r3, [pc, #92]	@ (8004458 <sniprintf+0x64>)
 80043fa:	1e0c      	subs	r4, r1, #0
 80043fc:	681d      	ldr	r5, [r3, #0]
 80043fe:	b09d      	sub	sp, #116	@ 0x74
 8004400:	da08      	bge.n	8004414 <sniprintf+0x20>
 8004402:	238b      	movs	r3, #139	@ 0x8b
 8004404:	602b      	str	r3, [r5, #0]
 8004406:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800440a:	b01d      	add	sp, #116	@ 0x74
 800440c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004410:	b002      	add	sp, #8
 8004412:	4770      	bx	lr
 8004414:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004418:	f8ad 3014 	strh.w	r3, [sp, #20]
 800441c:	bf14      	ite	ne
 800441e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8004422:	4623      	moveq	r3, r4
 8004424:	9304      	str	r3, [sp, #16]
 8004426:	9307      	str	r3, [sp, #28]
 8004428:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800442c:	9002      	str	r0, [sp, #8]
 800442e:	9006      	str	r0, [sp, #24]
 8004430:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004434:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004436:	ab21      	add	r3, sp, #132	@ 0x84
 8004438:	a902      	add	r1, sp, #8
 800443a:	4628      	mov	r0, r5
 800443c:	9301      	str	r3, [sp, #4]
 800443e:	f000 f995 	bl	800476c <_svfiprintf_r>
 8004442:	1c43      	adds	r3, r0, #1
 8004444:	bfbc      	itt	lt
 8004446:	238b      	movlt	r3, #139	@ 0x8b
 8004448:	602b      	strlt	r3, [r5, #0]
 800444a:	2c00      	cmp	r4, #0
 800444c:	d0dd      	beq.n	800440a <sniprintf+0x16>
 800444e:	9b02      	ldr	r3, [sp, #8]
 8004450:	2200      	movs	r2, #0
 8004452:	701a      	strb	r2, [r3, #0]
 8004454:	e7d9      	b.n	800440a <sniprintf+0x16>
 8004456:	bf00      	nop
 8004458:	2000000c 	.word	0x2000000c

0800445c <memset>:
 800445c:	4402      	add	r2, r0
 800445e:	4603      	mov	r3, r0
 8004460:	4293      	cmp	r3, r2
 8004462:	d100      	bne.n	8004466 <memset+0xa>
 8004464:	4770      	bx	lr
 8004466:	f803 1b01 	strb.w	r1, [r3], #1
 800446a:	e7f9      	b.n	8004460 <memset+0x4>

0800446c <__errno>:
 800446c:	4b01      	ldr	r3, [pc, #4]	@ (8004474 <__errno+0x8>)
 800446e:	6818      	ldr	r0, [r3, #0]
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	2000000c 	.word	0x2000000c

08004478 <__libc_init_array>:
 8004478:	b570      	push	{r4, r5, r6, lr}
 800447a:	4d0d      	ldr	r5, [pc, #52]	@ (80044b0 <__libc_init_array+0x38>)
 800447c:	4c0d      	ldr	r4, [pc, #52]	@ (80044b4 <__libc_init_array+0x3c>)
 800447e:	1b64      	subs	r4, r4, r5
 8004480:	10a4      	asrs	r4, r4, #2
 8004482:	2600      	movs	r6, #0
 8004484:	42a6      	cmp	r6, r4
 8004486:	d109      	bne.n	800449c <__libc_init_array+0x24>
 8004488:	4d0b      	ldr	r5, [pc, #44]	@ (80044b8 <__libc_init_array+0x40>)
 800448a:	4c0c      	ldr	r4, [pc, #48]	@ (80044bc <__libc_init_array+0x44>)
 800448c:	f000 fc66 	bl	8004d5c <_init>
 8004490:	1b64      	subs	r4, r4, r5
 8004492:	10a4      	asrs	r4, r4, #2
 8004494:	2600      	movs	r6, #0
 8004496:	42a6      	cmp	r6, r4
 8004498:	d105      	bne.n	80044a6 <__libc_init_array+0x2e>
 800449a:	bd70      	pop	{r4, r5, r6, pc}
 800449c:	f855 3b04 	ldr.w	r3, [r5], #4
 80044a0:	4798      	blx	r3
 80044a2:	3601      	adds	r6, #1
 80044a4:	e7ee      	b.n	8004484 <__libc_init_array+0xc>
 80044a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044aa:	4798      	blx	r3
 80044ac:	3601      	adds	r6, #1
 80044ae:	e7f2      	b.n	8004496 <__libc_init_array+0x1e>
 80044b0:	08004df8 	.word	0x08004df8
 80044b4:	08004df8 	.word	0x08004df8
 80044b8:	08004df8 	.word	0x08004df8
 80044bc:	08004dfc 	.word	0x08004dfc

080044c0 <__retarget_lock_acquire_recursive>:
 80044c0:	4770      	bx	lr

080044c2 <__retarget_lock_release_recursive>:
 80044c2:	4770      	bx	lr

080044c4 <_free_r>:
 80044c4:	b538      	push	{r3, r4, r5, lr}
 80044c6:	4605      	mov	r5, r0
 80044c8:	2900      	cmp	r1, #0
 80044ca:	d041      	beq.n	8004550 <_free_r+0x8c>
 80044cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044d0:	1f0c      	subs	r4, r1, #4
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	bfb8      	it	lt
 80044d6:	18e4      	addlt	r4, r4, r3
 80044d8:	f000 f8e0 	bl	800469c <__malloc_lock>
 80044dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004554 <_free_r+0x90>)
 80044de:	6813      	ldr	r3, [r2, #0]
 80044e0:	b933      	cbnz	r3, 80044f0 <_free_r+0x2c>
 80044e2:	6063      	str	r3, [r4, #4]
 80044e4:	6014      	str	r4, [r2, #0]
 80044e6:	4628      	mov	r0, r5
 80044e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044ec:	f000 b8dc 	b.w	80046a8 <__malloc_unlock>
 80044f0:	42a3      	cmp	r3, r4
 80044f2:	d908      	bls.n	8004506 <_free_r+0x42>
 80044f4:	6820      	ldr	r0, [r4, #0]
 80044f6:	1821      	adds	r1, r4, r0
 80044f8:	428b      	cmp	r3, r1
 80044fa:	bf01      	itttt	eq
 80044fc:	6819      	ldreq	r1, [r3, #0]
 80044fe:	685b      	ldreq	r3, [r3, #4]
 8004500:	1809      	addeq	r1, r1, r0
 8004502:	6021      	streq	r1, [r4, #0]
 8004504:	e7ed      	b.n	80044e2 <_free_r+0x1e>
 8004506:	461a      	mov	r2, r3
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	b10b      	cbz	r3, 8004510 <_free_r+0x4c>
 800450c:	42a3      	cmp	r3, r4
 800450e:	d9fa      	bls.n	8004506 <_free_r+0x42>
 8004510:	6811      	ldr	r1, [r2, #0]
 8004512:	1850      	adds	r0, r2, r1
 8004514:	42a0      	cmp	r0, r4
 8004516:	d10b      	bne.n	8004530 <_free_r+0x6c>
 8004518:	6820      	ldr	r0, [r4, #0]
 800451a:	4401      	add	r1, r0
 800451c:	1850      	adds	r0, r2, r1
 800451e:	4283      	cmp	r3, r0
 8004520:	6011      	str	r1, [r2, #0]
 8004522:	d1e0      	bne.n	80044e6 <_free_r+0x22>
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	6053      	str	r3, [r2, #4]
 800452a:	4408      	add	r0, r1
 800452c:	6010      	str	r0, [r2, #0]
 800452e:	e7da      	b.n	80044e6 <_free_r+0x22>
 8004530:	d902      	bls.n	8004538 <_free_r+0x74>
 8004532:	230c      	movs	r3, #12
 8004534:	602b      	str	r3, [r5, #0]
 8004536:	e7d6      	b.n	80044e6 <_free_r+0x22>
 8004538:	6820      	ldr	r0, [r4, #0]
 800453a:	1821      	adds	r1, r4, r0
 800453c:	428b      	cmp	r3, r1
 800453e:	bf04      	itt	eq
 8004540:	6819      	ldreq	r1, [r3, #0]
 8004542:	685b      	ldreq	r3, [r3, #4]
 8004544:	6063      	str	r3, [r4, #4]
 8004546:	bf04      	itt	eq
 8004548:	1809      	addeq	r1, r1, r0
 800454a:	6021      	streq	r1, [r4, #0]
 800454c:	6054      	str	r4, [r2, #4]
 800454e:	e7ca      	b.n	80044e6 <_free_r+0x22>
 8004550:	bd38      	pop	{r3, r4, r5, pc}
 8004552:	bf00      	nop
 8004554:	20000304 	.word	0x20000304

08004558 <sbrk_aligned>:
 8004558:	b570      	push	{r4, r5, r6, lr}
 800455a:	4e0f      	ldr	r6, [pc, #60]	@ (8004598 <sbrk_aligned+0x40>)
 800455c:	460c      	mov	r4, r1
 800455e:	6831      	ldr	r1, [r6, #0]
 8004560:	4605      	mov	r5, r0
 8004562:	b911      	cbnz	r1, 800456a <sbrk_aligned+0x12>
 8004564:	f000 fba6 	bl	8004cb4 <_sbrk_r>
 8004568:	6030      	str	r0, [r6, #0]
 800456a:	4621      	mov	r1, r4
 800456c:	4628      	mov	r0, r5
 800456e:	f000 fba1 	bl	8004cb4 <_sbrk_r>
 8004572:	1c43      	adds	r3, r0, #1
 8004574:	d103      	bne.n	800457e <sbrk_aligned+0x26>
 8004576:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800457a:	4620      	mov	r0, r4
 800457c:	bd70      	pop	{r4, r5, r6, pc}
 800457e:	1cc4      	adds	r4, r0, #3
 8004580:	f024 0403 	bic.w	r4, r4, #3
 8004584:	42a0      	cmp	r0, r4
 8004586:	d0f8      	beq.n	800457a <sbrk_aligned+0x22>
 8004588:	1a21      	subs	r1, r4, r0
 800458a:	4628      	mov	r0, r5
 800458c:	f000 fb92 	bl	8004cb4 <_sbrk_r>
 8004590:	3001      	adds	r0, #1
 8004592:	d1f2      	bne.n	800457a <sbrk_aligned+0x22>
 8004594:	e7ef      	b.n	8004576 <sbrk_aligned+0x1e>
 8004596:	bf00      	nop
 8004598:	20000300 	.word	0x20000300

0800459c <_malloc_r>:
 800459c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045a0:	1ccd      	adds	r5, r1, #3
 80045a2:	f025 0503 	bic.w	r5, r5, #3
 80045a6:	3508      	adds	r5, #8
 80045a8:	2d0c      	cmp	r5, #12
 80045aa:	bf38      	it	cc
 80045ac:	250c      	movcc	r5, #12
 80045ae:	2d00      	cmp	r5, #0
 80045b0:	4606      	mov	r6, r0
 80045b2:	db01      	blt.n	80045b8 <_malloc_r+0x1c>
 80045b4:	42a9      	cmp	r1, r5
 80045b6:	d904      	bls.n	80045c2 <_malloc_r+0x26>
 80045b8:	230c      	movs	r3, #12
 80045ba:	6033      	str	r3, [r6, #0]
 80045bc:	2000      	movs	r0, #0
 80045be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004698 <_malloc_r+0xfc>
 80045c6:	f000 f869 	bl	800469c <__malloc_lock>
 80045ca:	f8d8 3000 	ldr.w	r3, [r8]
 80045ce:	461c      	mov	r4, r3
 80045d0:	bb44      	cbnz	r4, 8004624 <_malloc_r+0x88>
 80045d2:	4629      	mov	r1, r5
 80045d4:	4630      	mov	r0, r6
 80045d6:	f7ff ffbf 	bl	8004558 <sbrk_aligned>
 80045da:	1c43      	adds	r3, r0, #1
 80045dc:	4604      	mov	r4, r0
 80045de:	d158      	bne.n	8004692 <_malloc_r+0xf6>
 80045e0:	f8d8 4000 	ldr.w	r4, [r8]
 80045e4:	4627      	mov	r7, r4
 80045e6:	2f00      	cmp	r7, #0
 80045e8:	d143      	bne.n	8004672 <_malloc_r+0xd6>
 80045ea:	2c00      	cmp	r4, #0
 80045ec:	d04b      	beq.n	8004686 <_malloc_r+0xea>
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	4639      	mov	r1, r7
 80045f2:	4630      	mov	r0, r6
 80045f4:	eb04 0903 	add.w	r9, r4, r3
 80045f8:	f000 fb5c 	bl	8004cb4 <_sbrk_r>
 80045fc:	4581      	cmp	r9, r0
 80045fe:	d142      	bne.n	8004686 <_malloc_r+0xea>
 8004600:	6821      	ldr	r1, [r4, #0]
 8004602:	1a6d      	subs	r5, r5, r1
 8004604:	4629      	mov	r1, r5
 8004606:	4630      	mov	r0, r6
 8004608:	f7ff ffa6 	bl	8004558 <sbrk_aligned>
 800460c:	3001      	adds	r0, #1
 800460e:	d03a      	beq.n	8004686 <_malloc_r+0xea>
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	442b      	add	r3, r5
 8004614:	6023      	str	r3, [r4, #0]
 8004616:	f8d8 3000 	ldr.w	r3, [r8]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	bb62      	cbnz	r2, 8004678 <_malloc_r+0xdc>
 800461e:	f8c8 7000 	str.w	r7, [r8]
 8004622:	e00f      	b.n	8004644 <_malloc_r+0xa8>
 8004624:	6822      	ldr	r2, [r4, #0]
 8004626:	1b52      	subs	r2, r2, r5
 8004628:	d420      	bmi.n	800466c <_malloc_r+0xd0>
 800462a:	2a0b      	cmp	r2, #11
 800462c:	d917      	bls.n	800465e <_malloc_r+0xc2>
 800462e:	1961      	adds	r1, r4, r5
 8004630:	42a3      	cmp	r3, r4
 8004632:	6025      	str	r5, [r4, #0]
 8004634:	bf18      	it	ne
 8004636:	6059      	strne	r1, [r3, #4]
 8004638:	6863      	ldr	r3, [r4, #4]
 800463a:	bf08      	it	eq
 800463c:	f8c8 1000 	streq.w	r1, [r8]
 8004640:	5162      	str	r2, [r4, r5]
 8004642:	604b      	str	r3, [r1, #4]
 8004644:	4630      	mov	r0, r6
 8004646:	f000 f82f 	bl	80046a8 <__malloc_unlock>
 800464a:	f104 000b 	add.w	r0, r4, #11
 800464e:	1d23      	adds	r3, r4, #4
 8004650:	f020 0007 	bic.w	r0, r0, #7
 8004654:	1ac2      	subs	r2, r0, r3
 8004656:	bf1c      	itt	ne
 8004658:	1a1b      	subne	r3, r3, r0
 800465a:	50a3      	strne	r3, [r4, r2]
 800465c:	e7af      	b.n	80045be <_malloc_r+0x22>
 800465e:	6862      	ldr	r2, [r4, #4]
 8004660:	42a3      	cmp	r3, r4
 8004662:	bf0c      	ite	eq
 8004664:	f8c8 2000 	streq.w	r2, [r8]
 8004668:	605a      	strne	r2, [r3, #4]
 800466a:	e7eb      	b.n	8004644 <_malloc_r+0xa8>
 800466c:	4623      	mov	r3, r4
 800466e:	6864      	ldr	r4, [r4, #4]
 8004670:	e7ae      	b.n	80045d0 <_malloc_r+0x34>
 8004672:	463c      	mov	r4, r7
 8004674:	687f      	ldr	r7, [r7, #4]
 8004676:	e7b6      	b.n	80045e6 <_malloc_r+0x4a>
 8004678:	461a      	mov	r2, r3
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	42a3      	cmp	r3, r4
 800467e:	d1fb      	bne.n	8004678 <_malloc_r+0xdc>
 8004680:	2300      	movs	r3, #0
 8004682:	6053      	str	r3, [r2, #4]
 8004684:	e7de      	b.n	8004644 <_malloc_r+0xa8>
 8004686:	230c      	movs	r3, #12
 8004688:	6033      	str	r3, [r6, #0]
 800468a:	4630      	mov	r0, r6
 800468c:	f000 f80c 	bl	80046a8 <__malloc_unlock>
 8004690:	e794      	b.n	80045bc <_malloc_r+0x20>
 8004692:	6005      	str	r5, [r0, #0]
 8004694:	e7d6      	b.n	8004644 <_malloc_r+0xa8>
 8004696:	bf00      	nop
 8004698:	20000304 	.word	0x20000304

0800469c <__malloc_lock>:
 800469c:	4801      	ldr	r0, [pc, #4]	@ (80046a4 <__malloc_lock+0x8>)
 800469e:	f7ff bf0f 	b.w	80044c0 <__retarget_lock_acquire_recursive>
 80046a2:	bf00      	nop
 80046a4:	200002fc 	.word	0x200002fc

080046a8 <__malloc_unlock>:
 80046a8:	4801      	ldr	r0, [pc, #4]	@ (80046b0 <__malloc_unlock+0x8>)
 80046aa:	f7ff bf0a 	b.w	80044c2 <__retarget_lock_release_recursive>
 80046ae:	bf00      	nop
 80046b0:	200002fc 	.word	0x200002fc

080046b4 <__ssputs_r>:
 80046b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046b8:	688e      	ldr	r6, [r1, #8]
 80046ba:	461f      	mov	r7, r3
 80046bc:	42be      	cmp	r6, r7
 80046be:	680b      	ldr	r3, [r1, #0]
 80046c0:	4682      	mov	sl, r0
 80046c2:	460c      	mov	r4, r1
 80046c4:	4690      	mov	r8, r2
 80046c6:	d82d      	bhi.n	8004724 <__ssputs_r+0x70>
 80046c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80046d0:	d026      	beq.n	8004720 <__ssputs_r+0x6c>
 80046d2:	6965      	ldr	r5, [r4, #20]
 80046d4:	6909      	ldr	r1, [r1, #16]
 80046d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046da:	eba3 0901 	sub.w	r9, r3, r1
 80046de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046e2:	1c7b      	adds	r3, r7, #1
 80046e4:	444b      	add	r3, r9
 80046e6:	106d      	asrs	r5, r5, #1
 80046e8:	429d      	cmp	r5, r3
 80046ea:	bf38      	it	cc
 80046ec:	461d      	movcc	r5, r3
 80046ee:	0553      	lsls	r3, r2, #21
 80046f0:	d527      	bpl.n	8004742 <__ssputs_r+0x8e>
 80046f2:	4629      	mov	r1, r5
 80046f4:	f7ff ff52 	bl	800459c <_malloc_r>
 80046f8:	4606      	mov	r6, r0
 80046fa:	b360      	cbz	r0, 8004756 <__ssputs_r+0xa2>
 80046fc:	6921      	ldr	r1, [r4, #16]
 80046fe:	464a      	mov	r2, r9
 8004700:	f000 fae8 	bl	8004cd4 <memcpy>
 8004704:	89a3      	ldrh	r3, [r4, #12]
 8004706:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800470a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800470e:	81a3      	strh	r3, [r4, #12]
 8004710:	6126      	str	r6, [r4, #16]
 8004712:	6165      	str	r5, [r4, #20]
 8004714:	444e      	add	r6, r9
 8004716:	eba5 0509 	sub.w	r5, r5, r9
 800471a:	6026      	str	r6, [r4, #0]
 800471c:	60a5      	str	r5, [r4, #8]
 800471e:	463e      	mov	r6, r7
 8004720:	42be      	cmp	r6, r7
 8004722:	d900      	bls.n	8004726 <__ssputs_r+0x72>
 8004724:	463e      	mov	r6, r7
 8004726:	6820      	ldr	r0, [r4, #0]
 8004728:	4632      	mov	r2, r6
 800472a:	4641      	mov	r1, r8
 800472c:	f000 faa8 	bl	8004c80 <memmove>
 8004730:	68a3      	ldr	r3, [r4, #8]
 8004732:	1b9b      	subs	r3, r3, r6
 8004734:	60a3      	str	r3, [r4, #8]
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	4433      	add	r3, r6
 800473a:	6023      	str	r3, [r4, #0]
 800473c:	2000      	movs	r0, #0
 800473e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004742:	462a      	mov	r2, r5
 8004744:	f000 fad4 	bl	8004cf0 <_realloc_r>
 8004748:	4606      	mov	r6, r0
 800474a:	2800      	cmp	r0, #0
 800474c:	d1e0      	bne.n	8004710 <__ssputs_r+0x5c>
 800474e:	6921      	ldr	r1, [r4, #16]
 8004750:	4650      	mov	r0, sl
 8004752:	f7ff feb7 	bl	80044c4 <_free_r>
 8004756:	230c      	movs	r3, #12
 8004758:	f8ca 3000 	str.w	r3, [sl]
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004762:	81a3      	strh	r3, [r4, #12]
 8004764:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004768:	e7e9      	b.n	800473e <__ssputs_r+0x8a>
	...

0800476c <_svfiprintf_r>:
 800476c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004770:	4698      	mov	r8, r3
 8004772:	898b      	ldrh	r3, [r1, #12]
 8004774:	061b      	lsls	r3, r3, #24
 8004776:	b09d      	sub	sp, #116	@ 0x74
 8004778:	4607      	mov	r7, r0
 800477a:	460d      	mov	r5, r1
 800477c:	4614      	mov	r4, r2
 800477e:	d510      	bpl.n	80047a2 <_svfiprintf_r+0x36>
 8004780:	690b      	ldr	r3, [r1, #16]
 8004782:	b973      	cbnz	r3, 80047a2 <_svfiprintf_r+0x36>
 8004784:	2140      	movs	r1, #64	@ 0x40
 8004786:	f7ff ff09 	bl	800459c <_malloc_r>
 800478a:	6028      	str	r0, [r5, #0]
 800478c:	6128      	str	r0, [r5, #16]
 800478e:	b930      	cbnz	r0, 800479e <_svfiprintf_r+0x32>
 8004790:	230c      	movs	r3, #12
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004798:	b01d      	add	sp, #116	@ 0x74
 800479a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800479e:	2340      	movs	r3, #64	@ 0x40
 80047a0:	616b      	str	r3, [r5, #20]
 80047a2:	2300      	movs	r3, #0
 80047a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80047a6:	2320      	movs	r3, #32
 80047a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80047b0:	2330      	movs	r3, #48	@ 0x30
 80047b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004950 <_svfiprintf_r+0x1e4>
 80047b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047ba:	f04f 0901 	mov.w	r9, #1
 80047be:	4623      	mov	r3, r4
 80047c0:	469a      	mov	sl, r3
 80047c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047c6:	b10a      	cbz	r2, 80047cc <_svfiprintf_r+0x60>
 80047c8:	2a25      	cmp	r2, #37	@ 0x25
 80047ca:	d1f9      	bne.n	80047c0 <_svfiprintf_r+0x54>
 80047cc:	ebba 0b04 	subs.w	fp, sl, r4
 80047d0:	d00b      	beq.n	80047ea <_svfiprintf_r+0x7e>
 80047d2:	465b      	mov	r3, fp
 80047d4:	4622      	mov	r2, r4
 80047d6:	4629      	mov	r1, r5
 80047d8:	4638      	mov	r0, r7
 80047da:	f7ff ff6b 	bl	80046b4 <__ssputs_r>
 80047de:	3001      	adds	r0, #1
 80047e0:	f000 80a7 	beq.w	8004932 <_svfiprintf_r+0x1c6>
 80047e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047e6:	445a      	add	r2, fp
 80047e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80047ea:	f89a 3000 	ldrb.w	r3, [sl]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 809f 	beq.w	8004932 <_svfiprintf_r+0x1c6>
 80047f4:	2300      	movs	r3, #0
 80047f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80047fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047fe:	f10a 0a01 	add.w	sl, sl, #1
 8004802:	9304      	str	r3, [sp, #16]
 8004804:	9307      	str	r3, [sp, #28]
 8004806:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800480a:	931a      	str	r3, [sp, #104]	@ 0x68
 800480c:	4654      	mov	r4, sl
 800480e:	2205      	movs	r2, #5
 8004810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004814:	484e      	ldr	r0, [pc, #312]	@ (8004950 <_svfiprintf_r+0x1e4>)
 8004816:	f7fb fd1b 	bl	8000250 <memchr>
 800481a:	9a04      	ldr	r2, [sp, #16]
 800481c:	b9d8      	cbnz	r0, 8004856 <_svfiprintf_r+0xea>
 800481e:	06d0      	lsls	r0, r2, #27
 8004820:	bf44      	itt	mi
 8004822:	2320      	movmi	r3, #32
 8004824:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004828:	0711      	lsls	r1, r2, #28
 800482a:	bf44      	itt	mi
 800482c:	232b      	movmi	r3, #43	@ 0x2b
 800482e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004832:	f89a 3000 	ldrb.w	r3, [sl]
 8004836:	2b2a      	cmp	r3, #42	@ 0x2a
 8004838:	d015      	beq.n	8004866 <_svfiprintf_r+0xfa>
 800483a:	9a07      	ldr	r2, [sp, #28]
 800483c:	4654      	mov	r4, sl
 800483e:	2000      	movs	r0, #0
 8004840:	f04f 0c0a 	mov.w	ip, #10
 8004844:	4621      	mov	r1, r4
 8004846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800484a:	3b30      	subs	r3, #48	@ 0x30
 800484c:	2b09      	cmp	r3, #9
 800484e:	d94b      	bls.n	80048e8 <_svfiprintf_r+0x17c>
 8004850:	b1b0      	cbz	r0, 8004880 <_svfiprintf_r+0x114>
 8004852:	9207      	str	r2, [sp, #28]
 8004854:	e014      	b.n	8004880 <_svfiprintf_r+0x114>
 8004856:	eba0 0308 	sub.w	r3, r0, r8
 800485a:	fa09 f303 	lsl.w	r3, r9, r3
 800485e:	4313      	orrs	r3, r2
 8004860:	9304      	str	r3, [sp, #16]
 8004862:	46a2      	mov	sl, r4
 8004864:	e7d2      	b.n	800480c <_svfiprintf_r+0xa0>
 8004866:	9b03      	ldr	r3, [sp, #12]
 8004868:	1d19      	adds	r1, r3, #4
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	9103      	str	r1, [sp, #12]
 800486e:	2b00      	cmp	r3, #0
 8004870:	bfbb      	ittet	lt
 8004872:	425b      	neglt	r3, r3
 8004874:	f042 0202 	orrlt.w	r2, r2, #2
 8004878:	9307      	strge	r3, [sp, #28]
 800487a:	9307      	strlt	r3, [sp, #28]
 800487c:	bfb8      	it	lt
 800487e:	9204      	strlt	r2, [sp, #16]
 8004880:	7823      	ldrb	r3, [r4, #0]
 8004882:	2b2e      	cmp	r3, #46	@ 0x2e
 8004884:	d10a      	bne.n	800489c <_svfiprintf_r+0x130>
 8004886:	7863      	ldrb	r3, [r4, #1]
 8004888:	2b2a      	cmp	r3, #42	@ 0x2a
 800488a:	d132      	bne.n	80048f2 <_svfiprintf_r+0x186>
 800488c:	9b03      	ldr	r3, [sp, #12]
 800488e:	1d1a      	adds	r2, r3, #4
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	9203      	str	r2, [sp, #12]
 8004894:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004898:	3402      	adds	r4, #2
 800489a:	9305      	str	r3, [sp, #20]
 800489c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004960 <_svfiprintf_r+0x1f4>
 80048a0:	7821      	ldrb	r1, [r4, #0]
 80048a2:	2203      	movs	r2, #3
 80048a4:	4650      	mov	r0, sl
 80048a6:	f7fb fcd3 	bl	8000250 <memchr>
 80048aa:	b138      	cbz	r0, 80048bc <_svfiprintf_r+0x150>
 80048ac:	9b04      	ldr	r3, [sp, #16]
 80048ae:	eba0 000a 	sub.w	r0, r0, sl
 80048b2:	2240      	movs	r2, #64	@ 0x40
 80048b4:	4082      	lsls	r2, r0
 80048b6:	4313      	orrs	r3, r2
 80048b8:	3401      	adds	r4, #1
 80048ba:	9304      	str	r3, [sp, #16]
 80048bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048c0:	4824      	ldr	r0, [pc, #144]	@ (8004954 <_svfiprintf_r+0x1e8>)
 80048c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048c6:	2206      	movs	r2, #6
 80048c8:	f7fb fcc2 	bl	8000250 <memchr>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d036      	beq.n	800493e <_svfiprintf_r+0x1d2>
 80048d0:	4b21      	ldr	r3, [pc, #132]	@ (8004958 <_svfiprintf_r+0x1ec>)
 80048d2:	bb1b      	cbnz	r3, 800491c <_svfiprintf_r+0x1b0>
 80048d4:	9b03      	ldr	r3, [sp, #12]
 80048d6:	3307      	adds	r3, #7
 80048d8:	f023 0307 	bic.w	r3, r3, #7
 80048dc:	3308      	adds	r3, #8
 80048de:	9303      	str	r3, [sp, #12]
 80048e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048e2:	4433      	add	r3, r6
 80048e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80048e6:	e76a      	b.n	80047be <_svfiprintf_r+0x52>
 80048e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80048ec:	460c      	mov	r4, r1
 80048ee:	2001      	movs	r0, #1
 80048f0:	e7a8      	b.n	8004844 <_svfiprintf_r+0xd8>
 80048f2:	2300      	movs	r3, #0
 80048f4:	3401      	adds	r4, #1
 80048f6:	9305      	str	r3, [sp, #20]
 80048f8:	4619      	mov	r1, r3
 80048fa:	f04f 0c0a 	mov.w	ip, #10
 80048fe:	4620      	mov	r0, r4
 8004900:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004904:	3a30      	subs	r2, #48	@ 0x30
 8004906:	2a09      	cmp	r2, #9
 8004908:	d903      	bls.n	8004912 <_svfiprintf_r+0x1a6>
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0c6      	beq.n	800489c <_svfiprintf_r+0x130>
 800490e:	9105      	str	r1, [sp, #20]
 8004910:	e7c4      	b.n	800489c <_svfiprintf_r+0x130>
 8004912:	fb0c 2101 	mla	r1, ip, r1, r2
 8004916:	4604      	mov	r4, r0
 8004918:	2301      	movs	r3, #1
 800491a:	e7f0      	b.n	80048fe <_svfiprintf_r+0x192>
 800491c:	ab03      	add	r3, sp, #12
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	462a      	mov	r2, r5
 8004922:	4b0e      	ldr	r3, [pc, #56]	@ (800495c <_svfiprintf_r+0x1f0>)
 8004924:	a904      	add	r1, sp, #16
 8004926:	4638      	mov	r0, r7
 8004928:	f3af 8000 	nop.w
 800492c:	1c42      	adds	r2, r0, #1
 800492e:	4606      	mov	r6, r0
 8004930:	d1d6      	bne.n	80048e0 <_svfiprintf_r+0x174>
 8004932:	89ab      	ldrh	r3, [r5, #12]
 8004934:	065b      	lsls	r3, r3, #25
 8004936:	f53f af2d 	bmi.w	8004794 <_svfiprintf_r+0x28>
 800493a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800493c:	e72c      	b.n	8004798 <_svfiprintf_r+0x2c>
 800493e:	ab03      	add	r3, sp, #12
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	462a      	mov	r2, r5
 8004944:	4b05      	ldr	r3, [pc, #20]	@ (800495c <_svfiprintf_r+0x1f0>)
 8004946:	a904      	add	r1, sp, #16
 8004948:	4638      	mov	r0, r7
 800494a:	f000 f879 	bl	8004a40 <_printf_i>
 800494e:	e7ed      	b.n	800492c <_svfiprintf_r+0x1c0>
 8004950:	08004dbc 	.word	0x08004dbc
 8004954:	08004dc6 	.word	0x08004dc6
 8004958:	00000000 	.word	0x00000000
 800495c:	080046b5 	.word	0x080046b5
 8004960:	08004dc2 	.word	0x08004dc2

08004964 <_printf_common>:
 8004964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004968:	4616      	mov	r6, r2
 800496a:	4698      	mov	r8, r3
 800496c:	688a      	ldr	r2, [r1, #8]
 800496e:	690b      	ldr	r3, [r1, #16]
 8004970:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004974:	4293      	cmp	r3, r2
 8004976:	bfb8      	it	lt
 8004978:	4613      	movlt	r3, r2
 800497a:	6033      	str	r3, [r6, #0]
 800497c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004980:	4607      	mov	r7, r0
 8004982:	460c      	mov	r4, r1
 8004984:	b10a      	cbz	r2, 800498a <_printf_common+0x26>
 8004986:	3301      	adds	r3, #1
 8004988:	6033      	str	r3, [r6, #0]
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	0699      	lsls	r1, r3, #26
 800498e:	bf42      	ittt	mi
 8004990:	6833      	ldrmi	r3, [r6, #0]
 8004992:	3302      	addmi	r3, #2
 8004994:	6033      	strmi	r3, [r6, #0]
 8004996:	6825      	ldr	r5, [r4, #0]
 8004998:	f015 0506 	ands.w	r5, r5, #6
 800499c:	d106      	bne.n	80049ac <_printf_common+0x48>
 800499e:	f104 0a19 	add.w	sl, r4, #25
 80049a2:	68e3      	ldr	r3, [r4, #12]
 80049a4:	6832      	ldr	r2, [r6, #0]
 80049a6:	1a9b      	subs	r3, r3, r2
 80049a8:	42ab      	cmp	r3, r5
 80049aa:	dc26      	bgt.n	80049fa <_printf_common+0x96>
 80049ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049b0:	6822      	ldr	r2, [r4, #0]
 80049b2:	3b00      	subs	r3, #0
 80049b4:	bf18      	it	ne
 80049b6:	2301      	movne	r3, #1
 80049b8:	0692      	lsls	r2, r2, #26
 80049ba:	d42b      	bmi.n	8004a14 <_printf_common+0xb0>
 80049bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049c0:	4641      	mov	r1, r8
 80049c2:	4638      	mov	r0, r7
 80049c4:	47c8      	blx	r9
 80049c6:	3001      	adds	r0, #1
 80049c8:	d01e      	beq.n	8004a08 <_printf_common+0xa4>
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	6922      	ldr	r2, [r4, #16]
 80049ce:	f003 0306 	and.w	r3, r3, #6
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	bf02      	ittt	eq
 80049d6:	68e5      	ldreq	r5, [r4, #12]
 80049d8:	6833      	ldreq	r3, [r6, #0]
 80049da:	1aed      	subeq	r5, r5, r3
 80049dc:	68a3      	ldr	r3, [r4, #8]
 80049de:	bf0c      	ite	eq
 80049e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049e4:	2500      	movne	r5, #0
 80049e6:	4293      	cmp	r3, r2
 80049e8:	bfc4      	itt	gt
 80049ea:	1a9b      	subgt	r3, r3, r2
 80049ec:	18ed      	addgt	r5, r5, r3
 80049ee:	2600      	movs	r6, #0
 80049f0:	341a      	adds	r4, #26
 80049f2:	42b5      	cmp	r5, r6
 80049f4:	d11a      	bne.n	8004a2c <_printf_common+0xc8>
 80049f6:	2000      	movs	r0, #0
 80049f8:	e008      	b.n	8004a0c <_printf_common+0xa8>
 80049fa:	2301      	movs	r3, #1
 80049fc:	4652      	mov	r2, sl
 80049fe:	4641      	mov	r1, r8
 8004a00:	4638      	mov	r0, r7
 8004a02:	47c8      	blx	r9
 8004a04:	3001      	adds	r0, #1
 8004a06:	d103      	bne.n	8004a10 <_printf_common+0xac>
 8004a08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a10:	3501      	adds	r5, #1
 8004a12:	e7c6      	b.n	80049a2 <_printf_common+0x3e>
 8004a14:	18e1      	adds	r1, r4, r3
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	2030      	movs	r0, #48	@ 0x30
 8004a1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a1e:	4422      	add	r2, r4
 8004a20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a28:	3302      	adds	r3, #2
 8004a2a:	e7c7      	b.n	80049bc <_printf_common+0x58>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	4622      	mov	r2, r4
 8004a30:	4641      	mov	r1, r8
 8004a32:	4638      	mov	r0, r7
 8004a34:	47c8      	blx	r9
 8004a36:	3001      	adds	r0, #1
 8004a38:	d0e6      	beq.n	8004a08 <_printf_common+0xa4>
 8004a3a:	3601      	adds	r6, #1
 8004a3c:	e7d9      	b.n	80049f2 <_printf_common+0x8e>
	...

08004a40 <_printf_i>:
 8004a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a44:	7e0f      	ldrb	r7, [r1, #24]
 8004a46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a48:	2f78      	cmp	r7, #120	@ 0x78
 8004a4a:	4691      	mov	r9, r2
 8004a4c:	4680      	mov	r8, r0
 8004a4e:	460c      	mov	r4, r1
 8004a50:	469a      	mov	sl, r3
 8004a52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a56:	d807      	bhi.n	8004a68 <_printf_i+0x28>
 8004a58:	2f62      	cmp	r7, #98	@ 0x62
 8004a5a:	d80a      	bhi.n	8004a72 <_printf_i+0x32>
 8004a5c:	2f00      	cmp	r7, #0
 8004a5e:	f000 80d2 	beq.w	8004c06 <_printf_i+0x1c6>
 8004a62:	2f58      	cmp	r7, #88	@ 0x58
 8004a64:	f000 80b9 	beq.w	8004bda <_printf_i+0x19a>
 8004a68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a70:	e03a      	b.n	8004ae8 <_printf_i+0xa8>
 8004a72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a76:	2b15      	cmp	r3, #21
 8004a78:	d8f6      	bhi.n	8004a68 <_printf_i+0x28>
 8004a7a:	a101      	add	r1, pc, #4	@ (adr r1, 8004a80 <_printf_i+0x40>)
 8004a7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a80:	08004ad9 	.word	0x08004ad9
 8004a84:	08004aed 	.word	0x08004aed
 8004a88:	08004a69 	.word	0x08004a69
 8004a8c:	08004a69 	.word	0x08004a69
 8004a90:	08004a69 	.word	0x08004a69
 8004a94:	08004a69 	.word	0x08004a69
 8004a98:	08004aed 	.word	0x08004aed
 8004a9c:	08004a69 	.word	0x08004a69
 8004aa0:	08004a69 	.word	0x08004a69
 8004aa4:	08004a69 	.word	0x08004a69
 8004aa8:	08004a69 	.word	0x08004a69
 8004aac:	08004bed 	.word	0x08004bed
 8004ab0:	08004b17 	.word	0x08004b17
 8004ab4:	08004ba7 	.word	0x08004ba7
 8004ab8:	08004a69 	.word	0x08004a69
 8004abc:	08004a69 	.word	0x08004a69
 8004ac0:	08004c0f 	.word	0x08004c0f
 8004ac4:	08004a69 	.word	0x08004a69
 8004ac8:	08004b17 	.word	0x08004b17
 8004acc:	08004a69 	.word	0x08004a69
 8004ad0:	08004a69 	.word	0x08004a69
 8004ad4:	08004baf 	.word	0x08004baf
 8004ad8:	6833      	ldr	r3, [r6, #0]
 8004ada:	1d1a      	adds	r2, r3, #4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6032      	str	r2, [r6, #0]
 8004ae0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ae4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e09d      	b.n	8004c28 <_printf_i+0x1e8>
 8004aec:	6833      	ldr	r3, [r6, #0]
 8004aee:	6820      	ldr	r0, [r4, #0]
 8004af0:	1d19      	adds	r1, r3, #4
 8004af2:	6031      	str	r1, [r6, #0]
 8004af4:	0606      	lsls	r6, r0, #24
 8004af6:	d501      	bpl.n	8004afc <_printf_i+0xbc>
 8004af8:	681d      	ldr	r5, [r3, #0]
 8004afa:	e003      	b.n	8004b04 <_printf_i+0xc4>
 8004afc:	0645      	lsls	r5, r0, #25
 8004afe:	d5fb      	bpl.n	8004af8 <_printf_i+0xb8>
 8004b00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b04:	2d00      	cmp	r5, #0
 8004b06:	da03      	bge.n	8004b10 <_printf_i+0xd0>
 8004b08:	232d      	movs	r3, #45	@ 0x2d
 8004b0a:	426d      	negs	r5, r5
 8004b0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b10:	4859      	ldr	r0, [pc, #356]	@ (8004c78 <_printf_i+0x238>)
 8004b12:	230a      	movs	r3, #10
 8004b14:	e011      	b.n	8004b3a <_printf_i+0xfa>
 8004b16:	6821      	ldr	r1, [r4, #0]
 8004b18:	6833      	ldr	r3, [r6, #0]
 8004b1a:	0608      	lsls	r0, r1, #24
 8004b1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b20:	d402      	bmi.n	8004b28 <_printf_i+0xe8>
 8004b22:	0649      	lsls	r1, r1, #25
 8004b24:	bf48      	it	mi
 8004b26:	b2ad      	uxthmi	r5, r5
 8004b28:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b2a:	4853      	ldr	r0, [pc, #332]	@ (8004c78 <_printf_i+0x238>)
 8004b2c:	6033      	str	r3, [r6, #0]
 8004b2e:	bf14      	ite	ne
 8004b30:	230a      	movne	r3, #10
 8004b32:	2308      	moveq	r3, #8
 8004b34:	2100      	movs	r1, #0
 8004b36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b3a:	6866      	ldr	r6, [r4, #4]
 8004b3c:	60a6      	str	r6, [r4, #8]
 8004b3e:	2e00      	cmp	r6, #0
 8004b40:	bfa2      	ittt	ge
 8004b42:	6821      	ldrge	r1, [r4, #0]
 8004b44:	f021 0104 	bicge.w	r1, r1, #4
 8004b48:	6021      	strge	r1, [r4, #0]
 8004b4a:	b90d      	cbnz	r5, 8004b50 <_printf_i+0x110>
 8004b4c:	2e00      	cmp	r6, #0
 8004b4e:	d04b      	beq.n	8004be8 <_printf_i+0x1a8>
 8004b50:	4616      	mov	r6, r2
 8004b52:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b56:	fb03 5711 	mls	r7, r3, r1, r5
 8004b5a:	5dc7      	ldrb	r7, [r0, r7]
 8004b5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b60:	462f      	mov	r7, r5
 8004b62:	42bb      	cmp	r3, r7
 8004b64:	460d      	mov	r5, r1
 8004b66:	d9f4      	bls.n	8004b52 <_printf_i+0x112>
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d10b      	bne.n	8004b84 <_printf_i+0x144>
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	07df      	lsls	r7, r3, #31
 8004b70:	d508      	bpl.n	8004b84 <_printf_i+0x144>
 8004b72:	6923      	ldr	r3, [r4, #16]
 8004b74:	6861      	ldr	r1, [r4, #4]
 8004b76:	4299      	cmp	r1, r3
 8004b78:	bfde      	ittt	le
 8004b7a:	2330      	movle	r3, #48	@ 0x30
 8004b7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b80:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004b84:	1b92      	subs	r2, r2, r6
 8004b86:	6122      	str	r2, [r4, #16]
 8004b88:	f8cd a000 	str.w	sl, [sp]
 8004b8c:	464b      	mov	r3, r9
 8004b8e:	aa03      	add	r2, sp, #12
 8004b90:	4621      	mov	r1, r4
 8004b92:	4640      	mov	r0, r8
 8004b94:	f7ff fee6 	bl	8004964 <_printf_common>
 8004b98:	3001      	adds	r0, #1
 8004b9a:	d14a      	bne.n	8004c32 <_printf_i+0x1f2>
 8004b9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ba0:	b004      	add	sp, #16
 8004ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	f043 0320 	orr.w	r3, r3, #32
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	4833      	ldr	r0, [pc, #204]	@ (8004c7c <_printf_i+0x23c>)
 8004bb0:	2778      	movs	r7, #120	@ 0x78
 8004bb2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	6831      	ldr	r1, [r6, #0]
 8004bba:	061f      	lsls	r7, r3, #24
 8004bbc:	f851 5b04 	ldr.w	r5, [r1], #4
 8004bc0:	d402      	bmi.n	8004bc8 <_printf_i+0x188>
 8004bc2:	065f      	lsls	r7, r3, #25
 8004bc4:	bf48      	it	mi
 8004bc6:	b2ad      	uxthmi	r5, r5
 8004bc8:	6031      	str	r1, [r6, #0]
 8004bca:	07d9      	lsls	r1, r3, #31
 8004bcc:	bf44      	itt	mi
 8004bce:	f043 0320 	orrmi.w	r3, r3, #32
 8004bd2:	6023      	strmi	r3, [r4, #0]
 8004bd4:	b11d      	cbz	r5, 8004bde <_printf_i+0x19e>
 8004bd6:	2310      	movs	r3, #16
 8004bd8:	e7ac      	b.n	8004b34 <_printf_i+0xf4>
 8004bda:	4827      	ldr	r0, [pc, #156]	@ (8004c78 <_printf_i+0x238>)
 8004bdc:	e7e9      	b.n	8004bb2 <_printf_i+0x172>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	f023 0320 	bic.w	r3, r3, #32
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	e7f6      	b.n	8004bd6 <_printf_i+0x196>
 8004be8:	4616      	mov	r6, r2
 8004bea:	e7bd      	b.n	8004b68 <_printf_i+0x128>
 8004bec:	6833      	ldr	r3, [r6, #0]
 8004bee:	6825      	ldr	r5, [r4, #0]
 8004bf0:	6961      	ldr	r1, [r4, #20]
 8004bf2:	1d18      	adds	r0, r3, #4
 8004bf4:	6030      	str	r0, [r6, #0]
 8004bf6:	062e      	lsls	r6, r5, #24
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	d501      	bpl.n	8004c00 <_printf_i+0x1c0>
 8004bfc:	6019      	str	r1, [r3, #0]
 8004bfe:	e002      	b.n	8004c06 <_printf_i+0x1c6>
 8004c00:	0668      	lsls	r0, r5, #25
 8004c02:	d5fb      	bpl.n	8004bfc <_printf_i+0x1bc>
 8004c04:	8019      	strh	r1, [r3, #0]
 8004c06:	2300      	movs	r3, #0
 8004c08:	6123      	str	r3, [r4, #16]
 8004c0a:	4616      	mov	r6, r2
 8004c0c:	e7bc      	b.n	8004b88 <_printf_i+0x148>
 8004c0e:	6833      	ldr	r3, [r6, #0]
 8004c10:	1d1a      	adds	r2, r3, #4
 8004c12:	6032      	str	r2, [r6, #0]
 8004c14:	681e      	ldr	r6, [r3, #0]
 8004c16:	6862      	ldr	r2, [r4, #4]
 8004c18:	2100      	movs	r1, #0
 8004c1a:	4630      	mov	r0, r6
 8004c1c:	f7fb fb18 	bl	8000250 <memchr>
 8004c20:	b108      	cbz	r0, 8004c26 <_printf_i+0x1e6>
 8004c22:	1b80      	subs	r0, r0, r6
 8004c24:	6060      	str	r0, [r4, #4]
 8004c26:	6863      	ldr	r3, [r4, #4]
 8004c28:	6123      	str	r3, [r4, #16]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c30:	e7aa      	b.n	8004b88 <_printf_i+0x148>
 8004c32:	6923      	ldr	r3, [r4, #16]
 8004c34:	4632      	mov	r2, r6
 8004c36:	4649      	mov	r1, r9
 8004c38:	4640      	mov	r0, r8
 8004c3a:	47d0      	blx	sl
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	d0ad      	beq.n	8004b9c <_printf_i+0x15c>
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	079b      	lsls	r3, r3, #30
 8004c44:	d413      	bmi.n	8004c6e <_printf_i+0x22e>
 8004c46:	68e0      	ldr	r0, [r4, #12]
 8004c48:	9b03      	ldr	r3, [sp, #12]
 8004c4a:	4298      	cmp	r0, r3
 8004c4c:	bfb8      	it	lt
 8004c4e:	4618      	movlt	r0, r3
 8004c50:	e7a6      	b.n	8004ba0 <_printf_i+0x160>
 8004c52:	2301      	movs	r3, #1
 8004c54:	4632      	mov	r2, r6
 8004c56:	4649      	mov	r1, r9
 8004c58:	4640      	mov	r0, r8
 8004c5a:	47d0      	blx	sl
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	d09d      	beq.n	8004b9c <_printf_i+0x15c>
 8004c60:	3501      	adds	r5, #1
 8004c62:	68e3      	ldr	r3, [r4, #12]
 8004c64:	9903      	ldr	r1, [sp, #12]
 8004c66:	1a5b      	subs	r3, r3, r1
 8004c68:	42ab      	cmp	r3, r5
 8004c6a:	dcf2      	bgt.n	8004c52 <_printf_i+0x212>
 8004c6c:	e7eb      	b.n	8004c46 <_printf_i+0x206>
 8004c6e:	2500      	movs	r5, #0
 8004c70:	f104 0619 	add.w	r6, r4, #25
 8004c74:	e7f5      	b.n	8004c62 <_printf_i+0x222>
 8004c76:	bf00      	nop
 8004c78:	08004dcd 	.word	0x08004dcd
 8004c7c:	08004dde 	.word	0x08004dde

08004c80 <memmove>:
 8004c80:	4288      	cmp	r0, r1
 8004c82:	b510      	push	{r4, lr}
 8004c84:	eb01 0402 	add.w	r4, r1, r2
 8004c88:	d902      	bls.n	8004c90 <memmove+0x10>
 8004c8a:	4284      	cmp	r4, r0
 8004c8c:	4623      	mov	r3, r4
 8004c8e:	d807      	bhi.n	8004ca0 <memmove+0x20>
 8004c90:	1e43      	subs	r3, r0, #1
 8004c92:	42a1      	cmp	r1, r4
 8004c94:	d008      	beq.n	8004ca8 <memmove+0x28>
 8004c96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c9e:	e7f8      	b.n	8004c92 <memmove+0x12>
 8004ca0:	4402      	add	r2, r0
 8004ca2:	4601      	mov	r1, r0
 8004ca4:	428a      	cmp	r2, r1
 8004ca6:	d100      	bne.n	8004caa <memmove+0x2a>
 8004ca8:	bd10      	pop	{r4, pc}
 8004caa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cb2:	e7f7      	b.n	8004ca4 <memmove+0x24>

08004cb4 <_sbrk_r>:
 8004cb4:	b538      	push	{r3, r4, r5, lr}
 8004cb6:	4d06      	ldr	r5, [pc, #24]	@ (8004cd0 <_sbrk_r+0x1c>)
 8004cb8:	2300      	movs	r3, #0
 8004cba:	4604      	mov	r4, r0
 8004cbc:	4608      	mov	r0, r1
 8004cbe:	602b      	str	r3, [r5, #0]
 8004cc0:	f7fb fffc 	bl	8000cbc <_sbrk>
 8004cc4:	1c43      	adds	r3, r0, #1
 8004cc6:	d102      	bne.n	8004cce <_sbrk_r+0x1a>
 8004cc8:	682b      	ldr	r3, [r5, #0]
 8004cca:	b103      	cbz	r3, 8004cce <_sbrk_r+0x1a>
 8004ccc:	6023      	str	r3, [r4, #0]
 8004cce:	bd38      	pop	{r3, r4, r5, pc}
 8004cd0:	200002f8 	.word	0x200002f8

08004cd4 <memcpy>:
 8004cd4:	440a      	add	r2, r1
 8004cd6:	4291      	cmp	r1, r2
 8004cd8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004cdc:	d100      	bne.n	8004ce0 <memcpy+0xc>
 8004cde:	4770      	bx	lr
 8004ce0:	b510      	push	{r4, lr}
 8004ce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ce6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cea:	4291      	cmp	r1, r2
 8004cec:	d1f9      	bne.n	8004ce2 <memcpy+0xe>
 8004cee:	bd10      	pop	{r4, pc}

08004cf0 <_realloc_r>:
 8004cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf4:	4680      	mov	r8, r0
 8004cf6:	4615      	mov	r5, r2
 8004cf8:	460c      	mov	r4, r1
 8004cfa:	b921      	cbnz	r1, 8004d06 <_realloc_r+0x16>
 8004cfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d00:	4611      	mov	r1, r2
 8004d02:	f7ff bc4b 	b.w	800459c <_malloc_r>
 8004d06:	b92a      	cbnz	r2, 8004d14 <_realloc_r+0x24>
 8004d08:	f7ff fbdc 	bl	80044c4 <_free_r>
 8004d0c:	2400      	movs	r4, #0
 8004d0e:	4620      	mov	r0, r4
 8004d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d14:	f000 f81a 	bl	8004d4c <_malloc_usable_size_r>
 8004d18:	4285      	cmp	r5, r0
 8004d1a:	4606      	mov	r6, r0
 8004d1c:	d802      	bhi.n	8004d24 <_realloc_r+0x34>
 8004d1e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d22:	d8f4      	bhi.n	8004d0e <_realloc_r+0x1e>
 8004d24:	4629      	mov	r1, r5
 8004d26:	4640      	mov	r0, r8
 8004d28:	f7ff fc38 	bl	800459c <_malloc_r>
 8004d2c:	4607      	mov	r7, r0
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	d0ec      	beq.n	8004d0c <_realloc_r+0x1c>
 8004d32:	42b5      	cmp	r5, r6
 8004d34:	462a      	mov	r2, r5
 8004d36:	4621      	mov	r1, r4
 8004d38:	bf28      	it	cs
 8004d3a:	4632      	movcs	r2, r6
 8004d3c:	f7ff ffca 	bl	8004cd4 <memcpy>
 8004d40:	4621      	mov	r1, r4
 8004d42:	4640      	mov	r0, r8
 8004d44:	f7ff fbbe 	bl	80044c4 <_free_r>
 8004d48:	463c      	mov	r4, r7
 8004d4a:	e7e0      	b.n	8004d0e <_realloc_r+0x1e>

08004d4c <_malloc_usable_size_r>:
 8004d4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d50:	1f18      	subs	r0, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bfbc      	itt	lt
 8004d56:	580b      	ldrlt	r3, [r1, r0]
 8004d58:	18c0      	addlt	r0, r0, r3
 8004d5a:	4770      	bx	lr

08004d5c <_init>:
 8004d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5e:	bf00      	nop
 8004d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d62:	bc08      	pop	{r3}
 8004d64:	469e      	mov	lr, r3
 8004d66:	4770      	bx	lr

08004d68 <_fini>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	bf00      	nop
 8004d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6e:	bc08      	pop	{r3}
 8004d70:	469e      	mov	lr, r3
 8004d72:	4770      	bx	lr
